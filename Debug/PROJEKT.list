
PROJEKT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004b90  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e8  08004d20  08004d20  00014d20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004e08  08004e08  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08004e08  08004e08  00014e08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004e10  08004e10  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004e10  08004e10  00014e10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004e14  08004e14  00014e14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08004e18  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000013c  20000074  08004e8c  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001b0  08004e8c  000201b0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010906  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000023de  00000000  00000000  000309aa  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000f20  00000000  00000000  00032d88  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000e00  00000000  00000000  00033ca8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00022977  00000000  00000000  00034aa8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000d467  00000000  00000000  0005741f  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d012a  00000000  00000000  00064886  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001349b0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000041a8  00000000  00000000  00134a2c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004d08 	.word	0x08004d08

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	08004d08 	.word	0x08004d08

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b972 	b.w	800056c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	4688      	mov	r8, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14b      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4615      	mov	r5, r2
 80002b2:	d967      	bls.n	8000384 <__udivmoddi4+0xe4>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0720 	rsb	r7, r2, #32
 80002be:	fa01 f302 	lsl.w	r3, r1, r2
 80002c2:	fa20 f707 	lsr.w	r7, r0, r7
 80002c6:	4095      	lsls	r5, r2
 80002c8:	ea47 0803 	orr.w	r8, r7, r3
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002d8:	fa1f fc85 	uxth.w	ip, r5
 80002dc:	fb0e 8817 	mls	r8, lr, r7, r8
 80002e0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002e4:	fb07 f10c 	mul.w	r1, r7, ip
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18eb      	adds	r3, r5, r3
 80002ee:	f107 30ff 	add.w	r0, r7, #4294967295
 80002f2:	f080 811b 	bcs.w	800052c <__udivmoddi4+0x28c>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8118 	bls.w	800052c <__udivmoddi4+0x28c>
 80002fc:	3f02      	subs	r7, #2
 80002fe:	442b      	add	r3, r5
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0fe 	udiv	r0, r3, lr
 8000308:	fb0e 3310 	mls	r3, lr, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fc0c 	mul.w	ip, r0, ip
 8000314:	45a4      	cmp	ip, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	192c      	adds	r4, r5, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	f080 8107 	bcs.w	8000530 <__udivmoddi4+0x290>
 8000322:	45a4      	cmp	ip, r4
 8000324:	f240 8104 	bls.w	8000530 <__udivmoddi4+0x290>
 8000328:	3802      	subs	r0, #2
 800032a:	442c      	add	r4, r5
 800032c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000330:	eba4 040c 	sub.w	r4, r4, ip
 8000334:	2700      	movs	r7, #0
 8000336:	b11e      	cbz	r6, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c6 4300 	strd	r4, r3, [r6]
 8000340:	4639      	mov	r1, r7
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d909      	bls.n	800035e <__udivmoddi4+0xbe>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80eb 	beq.w	8000526 <__udivmoddi4+0x286>
 8000350:	2700      	movs	r7, #0
 8000352:	e9c6 0100 	strd	r0, r1, [r6]
 8000356:	4638      	mov	r0, r7
 8000358:	4639      	mov	r1, r7
 800035a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035e:	fab3 f783 	clz	r7, r3
 8000362:	2f00      	cmp	r7, #0
 8000364:	d147      	bne.n	80003f6 <__udivmoddi4+0x156>
 8000366:	428b      	cmp	r3, r1
 8000368:	d302      	bcc.n	8000370 <__udivmoddi4+0xd0>
 800036a:	4282      	cmp	r2, r0
 800036c:	f200 80fa 	bhi.w	8000564 <__udivmoddi4+0x2c4>
 8000370:	1a84      	subs	r4, r0, r2
 8000372:	eb61 0303 	sbc.w	r3, r1, r3
 8000376:	2001      	movs	r0, #1
 8000378:	4698      	mov	r8, r3
 800037a:	2e00      	cmp	r6, #0
 800037c:	d0e0      	beq.n	8000340 <__udivmoddi4+0xa0>
 800037e:	e9c6 4800 	strd	r4, r8, [r6]
 8000382:	e7dd      	b.n	8000340 <__udivmoddi4+0xa0>
 8000384:	b902      	cbnz	r2, 8000388 <__udivmoddi4+0xe8>
 8000386:	deff      	udf	#255	; 0xff
 8000388:	fab2 f282 	clz	r2, r2
 800038c:	2a00      	cmp	r2, #0
 800038e:	f040 808f 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000392:	1b49      	subs	r1, r1, r5
 8000394:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000398:	fa1f f885 	uxth.w	r8, r5
 800039c:	2701      	movs	r7, #1
 800039e:	fbb1 fcfe 	udiv	ip, r1, lr
 80003a2:	0c23      	lsrs	r3, r4, #16
 80003a4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003a8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ac:	fb08 f10c 	mul.w	r1, r8, ip
 80003b0:	4299      	cmp	r1, r3
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b4:	18eb      	adds	r3, r5, r3
 80003b6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4299      	cmp	r1, r3
 80003be:	f200 80cd 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003c2:	4684      	mov	ip, r0
 80003c4:	1a59      	subs	r1, r3, r1
 80003c6:	b2a3      	uxth	r3, r4
 80003c8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003cc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003d0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003d4:	fb08 f800 	mul.w	r8, r8, r0
 80003d8:	45a0      	cmp	r8, r4
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0x14c>
 80003dc:	192c      	adds	r4, r5, r4
 80003de:	f100 33ff 	add.w	r3, r0, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x14a>
 80003e4:	45a0      	cmp	r8, r4
 80003e6:	f200 80b6 	bhi.w	8000556 <__udivmoddi4+0x2b6>
 80003ea:	4618      	mov	r0, r3
 80003ec:	eba4 0408 	sub.w	r4, r4, r8
 80003f0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003f4:	e79f      	b.n	8000336 <__udivmoddi4+0x96>
 80003f6:	f1c7 0c20 	rsb	ip, r7, #32
 80003fa:	40bb      	lsls	r3, r7
 80003fc:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000400:	ea4e 0e03 	orr.w	lr, lr, r3
 8000404:	fa01 f407 	lsl.w	r4, r1, r7
 8000408:	fa20 f50c 	lsr.w	r5, r0, ip
 800040c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000410:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000414:	4325      	orrs	r5, r4
 8000416:	fbb3 f9f8 	udiv	r9, r3, r8
 800041a:	0c2c      	lsrs	r4, r5, #16
 800041c:	fb08 3319 	mls	r3, r8, r9, r3
 8000420:	fa1f fa8e 	uxth.w	sl, lr
 8000424:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000428:	fb09 f40a 	mul.w	r4, r9, sl
 800042c:	429c      	cmp	r4, r3
 800042e:	fa02 f207 	lsl.w	r2, r2, r7
 8000432:	fa00 f107 	lsl.w	r1, r0, r7
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1e 0303 	adds.w	r3, lr, r3
 800043c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000440:	f080 8087 	bcs.w	8000552 <__udivmoddi4+0x2b2>
 8000444:	429c      	cmp	r4, r3
 8000446:	f240 8084 	bls.w	8000552 <__udivmoddi4+0x2b2>
 800044a:	f1a9 0902 	sub.w	r9, r9, #2
 800044e:	4473      	add	r3, lr
 8000450:	1b1b      	subs	r3, r3, r4
 8000452:	b2ad      	uxth	r5, r5
 8000454:	fbb3 f0f8 	udiv	r0, r3, r8
 8000458:	fb08 3310 	mls	r3, r8, r0, r3
 800045c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000460:	fb00 fa0a 	mul.w	sl, r0, sl
 8000464:	45a2      	cmp	sl, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1e 0404 	adds.w	r4, lr, r4
 800046c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000470:	d26b      	bcs.n	800054a <__udivmoddi4+0x2aa>
 8000472:	45a2      	cmp	sl, r4
 8000474:	d969      	bls.n	800054a <__udivmoddi4+0x2aa>
 8000476:	3802      	subs	r0, #2
 8000478:	4474      	add	r4, lr
 800047a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800047e:	fba0 8902 	umull	r8, r9, r0, r2
 8000482:	eba4 040a 	sub.w	r4, r4, sl
 8000486:	454c      	cmp	r4, r9
 8000488:	46c2      	mov	sl, r8
 800048a:	464b      	mov	r3, r9
 800048c:	d354      	bcc.n	8000538 <__udivmoddi4+0x298>
 800048e:	d051      	beq.n	8000534 <__udivmoddi4+0x294>
 8000490:	2e00      	cmp	r6, #0
 8000492:	d069      	beq.n	8000568 <__udivmoddi4+0x2c8>
 8000494:	ebb1 050a 	subs.w	r5, r1, sl
 8000498:	eb64 0403 	sbc.w	r4, r4, r3
 800049c:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004a0:	40fd      	lsrs	r5, r7
 80004a2:	40fc      	lsrs	r4, r7
 80004a4:	ea4c 0505 	orr.w	r5, ip, r5
 80004a8:	e9c6 5400 	strd	r5, r4, [r6]
 80004ac:	2700      	movs	r7, #0
 80004ae:	e747      	b.n	8000340 <__udivmoddi4+0xa0>
 80004b0:	f1c2 0320 	rsb	r3, r2, #32
 80004b4:	fa20 f703 	lsr.w	r7, r0, r3
 80004b8:	4095      	lsls	r5, r2
 80004ba:	fa01 f002 	lsl.w	r0, r1, r2
 80004be:	fa21 f303 	lsr.w	r3, r1, r3
 80004c2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004c6:	4338      	orrs	r0, r7
 80004c8:	0c01      	lsrs	r1, r0, #16
 80004ca:	fbb3 f7fe 	udiv	r7, r3, lr
 80004ce:	fa1f f885 	uxth.w	r8, r5
 80004d2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004d6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004da:	fb07 f308 	mul.w	r3, r7, r8
 80004de:	428b      	cmp	r3, r1
 80004e0:	fa04 f402 	lsl.w	r4, r4, r2
 80004e4:	d907      	bls.n	80004f6 <__udivmoddi4+0x256>
 80004e6:	1869      	adds	r1, r5, r1
 80004e8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004ec:	d22f      	bcs.n	800054e <__udivmoddi4+0x2ae>
 80004ee:	428b      	cmp	r3, r1
 80004f0:	d92d      	bls.n	800054e <__udivmoddi4+0x2ae>
 80004f2:	3f02      	subs	r7, #2
 80004f4:	4429      	add	r1, r5
 80004f6:	1acb      	subs	r3, r1, r3
 80004f8:	b281      	uxth	r1, r0
 80004fa:	fbb3 f0fe 	udiv	r0, r3, lr
 80004fe:	fb0e 3310 	mls	r3, lr, r0, r3
 8000502:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000506:	fb00 f308 	mul.w	r3, r0, r8
 800050a:	428b      	cmp	r3, r1
 800050c:	d907      	bls.n	800051e <__udivmoddi4+0x27e>
 800050e:	1869      	adds	r1, r5, r1
 8000510:	f100 3cff 	add.w	ip, r0, #4294967295
 8000514:	d217      	bcs.n	8000546 <__udivmoddi4+0x2a6>
 8000516:	428b      	cmp	r3, r1
 8000518:	d915      	bls.n	8000546 <__udivmoddi4+0x2a6>
 800051a:	3802      	subs	r0, #2
 800051c:	4429      	add	r1, r5
 800051e:	1ac9      	subs	r1, r1, r3
 8000520:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000524:	e73b      	b.n	800039e <__udivmoddi4+0xfe>
 8000526:	4637      	mov	r7, r6
 8000528:	4630      	mov	r0, r6
 800052a:	e709      	b.n	8000340 <__udivmoddi4+0xa0>
 800052c:	4607      	mov	r7, r0
 800052e:	e6e7      	b.n	8000300 <__udivmoddi4+0x60>
 8000530:	4618      	mov	r0, r3
 8000532:	e6fb      	b.n	800032c <__udivmoddi4+0x8c>
 8000534:	4541      	cmp	r1, r8
 8000536:	d2ab      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 8000538:	ebb8 0a02 	subs.w	sl, r8, r2
 800053c:	eb69 020e 	sbc.w	r2, r9, lr
 8000540:	3801      	subs	r0, #1
 8000542:	4613      	mov	r3, r2
 8000544:	e7a4      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000546:	4660      	mov	r0, ip
 8000548:	e7e9      	b.n	800051e <__udivmoddi4+0x27e>
 800054a:	4618      	mov	r0, r3
 800054c:	e795      	b.n	800047a <__udivmoddi4+0x1da>
 800054e:	4667      	mov	r7, ip
 8000550:	e7d1      	b.n	80004f6 <__udivmoddi4+0x256>
 8000552:	4681      	mov	r9, r0
 8000554:	e77c      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000556:	3802      	subs	r0, #2
 8000558:	442c      	add	r4, r5
 800055a:	e747      	b.n	80003ec <__udivmoddi4+0x14c>
 800055c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000560:	442b      	add	r3, r5
 8000562:	e72f      	b.n	80003c4 <__udivmoddi4+0x124>
 8000564:	4638      	mov	r0, r7
 8000566:	e708      	b.n	800037a <__udivmoddi4+0xda>
 8000568:	4637      	mov	r7, r6
 800056a:	e6e9      	b.n	8000340 <__udivmoddi4+0xa0>

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b08a      	sub	sp, #40	; 0x28
 8000574:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000576:	f107 0314 	add.w	r3, r7, #20
 800057a:	2200      	movs	r2, #0
 800057c:	601a      	str	r2, [r3, #0]
 800057e:	605a      	str	r2, [r3, #4]
 8000580:	609a      	str	r2, [r3, #8]
 8000582:	60da      	str	r2, [r3, #12]
 8000584:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000586:	2300      	movs	r3, #0
 8000588:	613b      	str	r3, [r7, #16]
 800058a:	4b55      	ldr	r3, [pc, #340]	; (80006e0 <MX_GPIO_Init+0x170>)
 800058c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800058e:	4a54      	ldr	r2, [pc, #336]	; (80006e0 <MX_GPIO_Init+0x170>)
 8000590:	f043 0304 	orr.w	r3, r3, #4
 8000594:	6313      	str	r3, [r2, #48]	; 0x30
 8000596:	4b52      	ldr	r3, [pc, #328]	; (80006e0 <MX_GPIO_Init+0x170>)
 8000598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800059a:	f003 0304 	and.w	r3, r3, #4
 800059e:	613b      	str	r3, [r7, #16]
 80005a0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005a2:	2300      	movs	r3, #0
 80005a4:	60fb      	str	r3, [r7, #12]
 80005a6:	4b4e      	ldr	r3, [pc, #312]	; (80006e0 <MX_GPIO_Init+0x170>)
 80005a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005aa:	4a4d      	ldr	r2, [pc, #308]	; (80006e0 <MX_GPIO_Init+0x170>)
 80005ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005b0:	6313      	str	r3, [r2, #48]	; 0x30
 80005b2:	4b4b      	ldr	r3, [pc, #300]	; (80006e0 <MX_GPIO_Init+0x170>)
 80005b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005ba:	60fb      	str	r3, [r7, #12]
 80005bc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005be:	2300      	movs	r3, #0
 80005c0:	60bb      	str	r3, [r7, #8]
 80005c2:	4b47      	ldr	r3, [pc, #284]	; (80006e0 <MX_GPIO_Init+0x170>)
 80005c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005c6:	4a46      	ldr	r2, [pc, #280]	; (80006e0 <MX_GPIO_Init+0x170>)
 80005c8:	f043 0301 	orr.w	r3, r3, #1
 80005cc:	6313      	str	r3, [r2, #48]	; 0x30
 80005ce:	4b44      	ldr	r3, [pc, #272]	; (80006e0 <MX_GPIO_Init+0x170>)
 80005d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005d2:	f003 0301 	and.w	r3, r3, #1
 80005d6:	60bb      	str	r3, [r7, #8]
 80005d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80005da:	2300      	movs	r3, #0
 80005dc:	607b      	str	r3, [r7, #4]
 80005de:	4b40      	ldr	r3, [pc, #256]	; (80006e0 <MX_GPIO_Init+0x170>)
 80005e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005e2:	4a3f      	ldr	r2, [pc, #252]	; (80006e0 <MX_GPIO_Init+0x170>)
 80005e4:	f043 0308 	orr.w	r3, r3, #8
 80005e8:	6313      	str	r3, [r2, #48]	; 0x30
 80005ea:	4b3d      	ldr	r3, [pc, #244]	; (80006e0 <MX_GPIO_Init+0x170>)
 80005ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ee:	f003 0308 	and.w	r3, r3, #8
 80005f2:	607b      	str	r3, [r7, #4]
 80005f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005f6:	2300      	movs	r3, #0
 80005f8:	603b      	str	r3, [r7, #0]
 80005fa:	4b39      	ldr	r3, [pc, #228]	; (80006e0 <MX_GPIO_Init+0x170>)
 80005fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005fe:	4a38      	ldr	r2, [pc, #224]	; (80006e0 <MX_GPIO_Init+0x170>)
 8000600:	f043 0302 	orr.w	r3, r3, #2
 8000604:	6313      	str	r3, [r2, #48]	; 0x30
 8000606:	4b36      	ldr	r3, [pc, #216]	; (80006e0 <MX_GPIO_Init+0x170>)
 8000608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800060a:	f003 0302 	and.w	r3, r3, #2
 800060e:	603b      	str	r3, [r7, #0]
 8000610:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD12_Pin|LD13_Pin|LD14_Pin|LD15_Pin
 8000612:	2200      	movs	r2, #0
 8000614:	f24f 01f0 	movw	r1, #61680	; 0xf0f0
 8000618:	4832      	ldr	r0, [pc, #200]	; (80006e4 <MX_GPIO_Init+0x174>)
 800061a:	f001 fc9b 	bl	8001f54 <HAL_GPIO_WritePin>
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PA0_Pin;
 800061e:	2301      	movs	r3, #1
 8000620:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000622:	4b31      	ldr	r3, [pc, #196]	; (80006e8 <MX_GPIO_Init+0x178>)
 8000624:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000626:	2300      	movs	r3, #0
 8000628:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PA0_GPIO_Port, &GPIO_InitStruct);
 800062a:	f107 0314 	add.w	r3, r7, #20
 800062e:	4619      	mov	r1, r3
 8000630:	482e      	ldr	r0, [pc, #184]	; (80006ec <MX_GPIO_Init+0x17c>)
 8000632:	f001 fadd 	bl	8001bf0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PD4 PD5 PD6 PD7 */
  GPIO_InitStruct.Pin = LD12_Pin|LD13_Pin|LD14_Pin|LD15_Pin
 8000636:	f24f 03f0 	movw	r3, #61680	; 0xf0f0
 800063a:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800063c:	2301      	movs	r3, #1
 800063e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000640:	2300      	movs	r3, #0
 8000642:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000644:	2300      	movs	r3, #0
 8000646:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000648:	f107 0314 	add.w	r3, r7, #20
 800064c:	4619      	mov	r1, r3
 800064e:	4825      	ldr	r0, [pc, #148]	; (80006e4 <MX_GPIO_Init+0x174>)
 8000650:	f001 face 	bl	8001bf0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000654:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000658:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800065a:	4b23      	ldr	r3, [pc, #140]	; (80006e8 <MX_GPIO_Init+0x178>)
 800065c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800065e:	2301      	movs	r3, #1
 8000660:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000662:	f107 0314 	add.w	r3, r7, #20
 8000666:	4619      	mov	r1, r3
 8000668:	4821      	ldr	r0, [pc, #132]	; (80006f0 <MX_GPIO_Init+0x180>)
 800066a:	f001 fac1 	bl	8001bf0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD1 PD2 PD3 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 800066e:	230e      	movs	r3, #14
 8000670:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000672:	4b1d      	ldr	r3, [pc, #116]	; (80006e8 <MX_GPIO_Init+0x178>)
 8000674:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000676:	2301      	movs	r3, #1
 8000678:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800067a:	f107 0314 	add.w	r3, r7, #20
 800067e:	4619      	mov	r1, r3
 8000680:	4818      	ldr	r0, [pc, #96]	; (80006e4 <MX_GPIO_Init+0x174>)
 8000682:	f001 fab5 	bl	8001bf0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000686:	2200      	movs	r2, #0
 8000688:	2100      	movs	r1, #0
 800068a:	2006      	movs	r0, #6
 800068c:	f001 fa79 	bl	8001b82 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000690:	2006      	movs	r0, #6
 8000692:	f001 fa92 	bl	8001bba <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8000696:	2200      	movs	r2, #0
 8000698:	2100      	movs	r1, #0
 800069a:	2007      	movs	r0, #7
 800069c:	f001 fa71 	bl	8001b82 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80006a0:	2007      	movs	r0, #7
 80006a2:	f001 fa8a 	bl	8001bba <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 80006a6:	2200      	movs	r2, #0
 80006a8:	2100      	movs	r1, #0
 80006aa:	2008      	movs	r0, #8
 80006ac:	f001 fa69 	bl	8001b82 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80006b0:	2008      	movs	r0, #8
 80006b2:	f001 fa82 	bl	8001bba <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 80006b6:	2200      	movs	r2, #0
 80006b8:	2100      	movs	r1, #0
 80006ba:	2009      	movs	r0, #9
 80006bc:	f001 fa61 	bl	8001b82 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80006c0:	2009      	movs	r0, #9
 80006c2:	f001 fa7a 	bl	8001bba <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80006c6:	2200      	movs	r2, #0
 80006c8:	2100      	movs	r1, #0
 80006ca:	2028      	movs	r0, #40	; 0x28
 80006cc:	f001 fa59 	bl	8001b82 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80006d0:	2028      	movs	r0, #40	; 0x28
 80006d2:	f001 fa72 	bl	8001bba <HAL_NVIC_EnableIRQ>

}
 80006d6:	bf00      	nop
 80006d8:	3728      	adds	r7, #40	; 0x28
 80006da:	46bd      	mov	sp, r7
 80006dc:	bd80      	pop	{r7, pc}
 80006de:	bf00      	nop
 80006e0:	40023800 	.word	0x40023800
 80006e4:	40020c00 	.word	0x40020c00
 80006e8:	10110000 	.word	0x10110000
 80006ec:	40020000 	.word	0x40020000
 80006f0:	40020800 	.word	0x40020800

080006f4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 80006f8:	4b12      	ldr	r3, [pc, #72]	; (8000744 <MX_I2C1_Init+0x50>)
 80006fa:	4a13      	ldr	r2, [pc, #76]	; (8000748 <MX_I2C1_Init+0x54>)
 80006fc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80006fe:	4b11      	ldr	r3, [pc, #68]	; (8000744 <MX_I2C1_Init+0x50>)
 8000700:	4a12      	ldr	r2, [pc, #72]	; (800074c <MX_I2C1_Init+0x58>)
 8000702:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000704:	4b0f      	ldr	r3, [pc, #60]	; (8000744 <MX_I2C1_Init+0x50>)
 8000706:	2200      	movs	r2, #0
 8000708:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800070a:	4b0e      	ldr	r3, [pc, #56]	; (8000744 <MX_I2C1_Init+0x50>)
 800070c:	2200      	movs	r2, #0
 800070e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000710:	4b0c      	ldr	r3, [pc, #48]	; (8000744 <MX_I2C1_Init+0x50>)
 8000712:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000716:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000718:	4b0a      	ldr	r3, [pc, #40]	; (8000744 <MX_I2C1_Init+0x50>)
 800071a:	2200      	movs	r2, #0
 800071c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800071e:	4b09      	ldr	r3, [pc, #36]	; (8000744 <MX_I2C1_Init+0x50>)
 8000720:	2200      	movs	r2, #0
 8000722:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000724:	4b07      	ldr	r3, [pc, #28]	; (8000744 <MX_I2C1_Init+0x50>)
 8000726:	2200      	movs	r2, #0
 8000728:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800072a:	4b06      	ldr	r3, [pc, #24]	; (8000744 <MX_I2C1_Init+0x50>)
 800072c:	2200      	movs	r2, #0
 800072e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000730:	4804      	ldr	r0, [pc, #16]	; (8000744 <MX_I2C1_Init+0x50>)
 8000732:	f001 fc5b 	bl	8001fec <HAL_I2C_Init>
 8000736:	4603      	mov	r3, r0
 8000738:	2b00      	cmp	r3, #0
 800073a:	d001      	beq.n	8000740 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800073c:	f000 fe8c 	bl	8001458 <Error_Handler>
  }

}
 8000740:	bf00      	nop
 8000742:	bd80      	pop	{r7, pc}
 8000744:	200000a0 	.word	0x200000a0
 8000748:	40005400 	.word	0x40005400
 800074c:	000186a0 	.word	0x000186a0

08000750 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b08a      	sub	sp, #40	; 0x28
 8000754:	af00      	add	r7, sp, #0
 8000756:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000758:	f107 0314 	add.w	r3, r7, #20
 800075c:	2200      	movs	r2, #0
 800075e:	601a      	str	r2, [r3, #0]
 8000760:	605a      	str	r2, [r3, #4]
 8000762:	609a      	str	r2, [r3, #8]
 8000764:	60da      	str	r2, [r3, #12]
 8000766:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	4a19      	ldr	r2, [pc, #100]	; (80007d4 <HAL_I2C_MspInit+0x84>)
 800076e:	4293      	cmp	r3, r2
 8000770:	d12b      	bne.n	80007ca <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000772:	2300      	movs	r3, #0
 8000774:	613b      	str	r3, [r7, #16]
 8000776:	4b18      	ldr	r3, [pc, #96]	; (80007d8 <HAL_I2C_MspInit+0x88>)
 8000778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077a:	4a17      	ldr	r2, [pc, #92]	; (80007d8 <HAL_I2C_MspInit+0x88>)
 800077c:	f043 0302 	orr.w	r3, r3, #2
 8000780:	6313      	str	r3, [r2, #48]	; 0x30
 8000782:	4b15      	ldr	r3, [pc, #84]	; (80007d8 <HAL_I2C_MspInit+0x88>)
 8000784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000786:	f003 0302 	and.w	r3, r3, #2
 800078a:	613b      	str	r3, [r7, #16]
 800078c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800078e:	23c0      	movs	r3, #192	; 0xc0
 8000790:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000792:	2312      	movs	r3, #18
 8000794:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000796:	2301      	movs	r3, #1
 8000798:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800079a:	2303      	movs	r3, #3
 800079c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800079e:	2304      	movs	r3, #4
 80007a0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007a2:	f107 0314 	add.w	r3, r7, #20
 80007a6:	4619      	mov	r1, r3
 80007a8:	480c      	ldr	r0, [pc, #48]	; (80007dc <HAL_I2C_MspInit+0x8c>)
 80007aa:	f001 fa21 	bl	8001bf0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80007ae:	2300      	movs	r3, #0
 80007b0:	60fb      	str	r3, [r7, #12]
 80007b2:	4b09      	ldr	r3, [pc, #36]	; (80007d8 <HAL_I2C_MspInit+0x88>)
 80007b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007b6:	4a08      	ldr	r2, [pc, #32]	; (80007d8 <HAL_I2C_MspInit+0x88>)
 80007b8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80007bc:	6413      	str	r3, [r2, #64]	; 0x40
 80007be:	4b06      	ldr	r3, [pc, #24]	; (80007d8 <HAL_I2C_MspInit+0x88>)
 80007c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007c2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80007c6:	60fb      	str	r3, [r7, #12]
 80007c8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80007ca:	bf00      	nop
 80007cc:	3728      	adds	r7, #40	; 0x28
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bd80      	pop	{r7, pc}
 80007d2:	bf00      	nop
 80007d4:	40005400 	.word	0x40005400
 80007d8:	40023800 	.word	0x40023800
 80007dc:	40020400 	.word	0x40020400

080007e0 <lcd_init>:
#include "i2c.h"



void lcd_init(struct lcd_disp * lcd)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b084      	sub	sp, #16
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	6078      	str	r0, [r7, #4]
	uint8_t xpin = 0;
 80007e8:	2300      	movs	r3, #0
 80007ea:	73fb      	strb	r3, [r7, #15]
	/* set backlight */
	if(lcd->bl)
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d001      	beq.n	80007fa <lcd_init+0x1a>
	{
		xpin = BL_PIN;
 80007f6:	2308      	movs	r3, #8
 80007f8:	73fb      	strb	r3, [r7, #15]
	}

	/* init sequence */
	HAL_Delay(40);
 80007fa:	2028      	movs	r0, #40	; 0x28
 80007fc:	f001 f8c4 	bl	8001988 <HAL_Delay>
	lcd_write(lcd->addr, INIT_8_BIT_MODE, xpin);
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	781b      	ldrb	r3, [r3, #0]
 8000804:	7bfa      	ldrb	r2, [r7, #15]
 8000806:	2130      	movs	r1, #48	; 0x30
 8000808:	4618      	mov	r0, r3
 800080a:	f000 f829 	bl	8000860 <lcd_write>
	HAL_Delay(5);
 800080e:	2005      	movs	r0, #5
 8000810:	f001 f8ba 	bl	8001988 <HAL_Delay>
	lcd_write(lcd->addr, INIT_8_BIT_MODE, xpin);
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	781b      	ldrb	r3, [r3, #0]
 8000818:	7bfa      	ldrb	r2, [r7, #15]
 800081a:	2130      	movs	r1, #48	; 0x30
 800081c:	4618      	mov	r0, r3
 800081e:	f000 f81f 	bl	8000860 <lcd_write>
	HAL_Delay(1);
 8000822:	2001      	movs	r0, #1
 8000824:	f001 f8b0 	bl	8001988 <HAL_Delay>
	lcd_write(lcd->addr, INIT_8_BIT_MODE, xpin);
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	781b      	ldrb	r3, [r3, #0]
 800082c:	7bfa      	ldrb	r2, [r7, #15]
 800082e:	2130      	movs	r1, #48	; 0x30
 8000830:	4618      	mov	r0, r3
 8000832:	f000 f815 	bl	8000860 <lcd_write>

	/* set 4-bit mode */
	lcd_write(lcd->addr, INIT_4_BIT_MODE, xpin);
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	781b      	ldrb	r3, [r3, #0]
 800083a:	7bfa      	ldrb	r2, [r7, #15]
 800083c:	2102      	movs	r1, #2
 800083e:	4618      	mov	r0, r3
 8000840:	f000 f80e 	bl	8000860 <lcd_write>

	/* set cursor mode */
	lcd_write(lcd->addr, UNDERLINE_OFF_BLINK_OFF, xpin);
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	781b      	ldrb	r3, [r3, #0]
 8000848:	7bfa      	ldrb	r2, [r7, #15]
 800084a:	210c      	movs	r1, #12
 800084c:	4618      	mov	r0, r3
 800084e:	f000 f807 	bl	8000860 <lcd_write>

	/* clear */
	lcd_clear(lcd);
 8000852:	6878      	ldr	r0, [r7, #4]
 8000854:	f000 f89e 	bl	8000994 <lcd_clear>

}
 8000858:	bf00      	nop
 800085a:	3710      	adds	r7, #16
 800085c:	46bd      	mov	sp, r7
 800085e:	bd80      	pop	{r7, pc}

08000860 <lcd_write>:

void lcd_write(uint8_t addr, uint8_t data, uint8_t xpin)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b086      	sub	sp, #24
 8000864:	af02      	add	r7, sp, #8
 8000866:	4603      	mov	r3, r0
 8000868:	71fb      	strb	r3, [r7, #7]
 800086a:	460b      	mov	r3, r1
 800086c:	71bb      	strb	r3, [r7, #6]
 800086e:	4613      	mov	r3, r2
 8000870:	717b      	strb	r3, [r7, #5]
	uint8_t tx_data[4];

	/* split data */
	tx_data[0] = (data & 0xF0) | EN_PIN | xpin;
 8000872:	79bb      	ldrb	r3, [r7, #6]
 8000874:	f023 030f 	bic.w	r3, r3, #15
 8000878:	b2da      	uxtb	r2, r3
 800087a:	797b      	ldrb	r3, [r7, #5]
 800087c:	4313      	orrs	r3, r2
 800087e:	b2db      	uxtb	r3, r3
 8000880:	f043 0304 	orr.w	r3, r3, #4
 8000884:	b2db      	uxtb	r3, r3
 8000886:	733b      	strb	r3, [r7, #12]
	tx_data[1] = (data & 0xF0) | xpin;
 8000888:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800088c:	f023 030f 	bic.w	r3, r3, #15
 8000890:	b25a      	sxtb	r2, r3
 8000892:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8000896:	4313      	orrs	r3, r2
 8000898:	b25b      	sxtb	r3, r3
 800089a:	b2db      	uxtb	r3, r3
 800089c:	737b      	strb	r3, [r7, #13]
	tx_data[2] = (data << 4) | EN_PIN | xpin;
 800089e:	79bb      	ldrb	r3, [r7, #6]
 80008a0:	011b      	lsls	r3, r3, #4
 80008a2:	b2da      	uxtb	r2, r3
 80008a4:	797b      	ldrb	r3, [r7, #5]
 80008a6:	4313      	orrs	r3, r2
 80008a8:	b2db      	uxtb	r3, r3
 80008aa:	f043 0304 	orr.w	r3, r3, #4
 80008ae:	b2db      	uxtb	r3, r3
 80008b0:	73bb      	strb	r3, [r7, #14]
	tx_data[3] = (data << 4) | xpin;
 80008b2:	79bb      	ldrb	r3, [r7, #6]
 80008b4:	011b      	lsls	r3, r3, #4
 80008b6:	b25a      	sxtb	r2, r3
 80008b8:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80008bc:	4313      	orrs	r3, r2
 80008be:	b25b      	sxtb	r3, r3
 80008c0:	b2db      	uxtb	r3, r3
 80008c2:	73fb      	strb	r3, [r7, #15]

	/* send data via i2c */
	HAL_I2C_Master_Transmit(&HI2C_DEF, addr, tx_data, 4, 100);
 80008c4:	79fb      	ldrb	r3, [r7, #7]
 80008c6:	b299      	uxth	r1, r3
 80008c8:	f107 020c 	add.w	r2, r7, #12
 80008cc:	2364      	movs	r3, #100	; 0x64
 80008ce:	9300      	str	r3, [sp, #0]
 80008d0:	2304      	movs	r3, #4
 80008d2:	4805      	ldr	r0, [pc, #20]	; (80008e8 <lcd_write+0x88>)
 80008d4:	f001 fcc2 	bl	800225c <HAL_I2C_Master_Transmit>

	HAL_Delay(5);
 80008d8:	2005      	movs	r0, #5
 80008da:	f001 f855 	bl	8001988 <HAL_Delay>
}
 80008de:	bf00      	nop
 80008e0:	3710      	adds	r7, #16
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	bf00      	nop
 80008e8:	200000a0 	.word	0x200000a0

080008ec <lcd_display>:

void lcd_display(struct lcd_disp * lcd)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b084      	sub	sp, #16
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
	uint8_t xpin = 0, i = 0;
 80008f4:	2300      	movs	r3, #0
 80008f6:	73fb      	strb	r3, [r7, #15]
 80008f8:	2300      	movs	r3, #0
 80008fa:	73bb      	strb	r3, [r7, #14]

	/* set backlight */
	if(lcd->bl)
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8000902:	2b00      	cmp	r3, #0
 8000904:	d001      	beq.n	800090a <lcd_display+0x1e>
	{
		xpin = BL_PIN;
 8000906:	2308      	movs	r3, #8
 8000908:	73fb      	strb	r3, [r7, #15]
	}

	lcd_clear(lcd);
 800090a:	6878      	ldr	r0, [r7, #4]
 800090c:	f000 f842 	bl	8000994 <lcd_clear>

	/* send first line data */
	lcd_write(lcd->addr, FIRST_CHAR_LINE_1, xpin);
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	781b      	ldrb	r3, [r3, #0]
 8000914:	7bfa      	ldrb	r2, [r7, #15]
 8000916:	2180      	movs	r1, #128	; 0x80
 8000918:	4618      	mov	r0, r3
 800091a:	f7ff ffa1 	bl	8000860 <lcd_write>
	while(lcd->f_line[i])
 800091e:	e00f      	b.n	8000940 <lcd_display+0x54>
	{
		lcd_write(lcd->addr, lcd->f_line[i], (xpin | RS_PIN));
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	7818      	ldrb	r0, [r3, #0]
 8000924:	7bbb      	ldrb	r3, [r7, #14]
 8000926:	687a      	ldr	r2, [r7, #4]
 8000928:	4413      	add	r3, r2
 800092a:	7859      	ldrb	r1, [r3, #1]
 800092c:	7bfb      	ldrb	r3, [r7, #15]
 800092e:	f043 0301 	orr.w	r3, r3, #1
 8000932:	b2db      	uxtb	r3, r3
 8000934:	461a      	mov	r2, r3
 8000936:	f7ff ff93 	bl	8000860 <lcd_write>
		i++;
 800093a:	7bbb      	ldrb	r3, [r7, #14]
 800093c:	3301      	adds	r3, #1
 800093e:	73bb      	strb	r3, [r7, #14]
	while(lcd->f_line[i])
 8000940:	7bbb      	ldrb	r3, [r7, #14]
 8000942:	687a      	ldr	r2, [r7, #4]
 8000944:	4413      	add	r3, r2
 8000946:	785b      	ldrb	r3, [r3, #1]
 8000948:	2b00      	cmp	r3, #0
 800094a:	d1e9      	bne.n	8000920 <lcd_display+0x34>
	}

	/* send second line data */
	i = 0;
 800094c:	2300      	movs	r3, #0
 800094e:	73bb      	strb	r3, [r7, #14]
	lcd_write(lcd->addr, FIRST_CHAR_LINE_2, xpin);
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	781b      	ldrb	r3, [r3, #0]
 8000954:	7bfa      	ldrb	r2, [r7, #15]
 8000956:	21c0      	movs	r1, #192	; 0xc0
 8000958:	4618      	mov	r0, r3
 800095a:	f7ff ff81 	bl	8000860 <lcd_write>
	while(lcd->s_line[i])
 800095e:	e00f      	b.n	8000980 <lcd_display+0x94>
	{
		lcd_write(lcd->addr, lcd->s_line[i], (xpin | RS_PIN));
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	7818      	ldrb	r0, [r3, #0]
 8000964:	7bbb      	ldrb	r3, [r7, #14]
 8000966:	687a      	ldr	r2, [r7, #4]
 8000968:	4413      	add	r3, r2
 800096a:	7c99      	ldrb	r1, [r3, #18]
 800096c:	7bfb      	ldrb	r3, [r7, #15]
 800096e:	f043 0301 	orr.w	r3, r3, #1
 8000972:	b2db      	uxtb	r3, r3
 8000974:	461a      	mov	r2, r3
 8000976:	f7ff ff73 	bl	8000860 <lcd_write>
		i++;
 800097a:	7bbb      	ldrb	r3, [r7, #14]
 800097c:	3301      	adds	r3, #1
 800097e:	73bb      	strb	r3, [r7, #14]
	while(lcd->s_line[i])
 8000980:	7bbb      	ldrb	r3, [r7, #14]
 8000982:	687a      	ldr	r2, [r7, #4]
 8000984:	4413      	add	r3, r2
 8000986:	7c9b      	ldrb	r3, [r3, #18]
 8000988:	2b00      	cmp	r3, #0
 800098a:	d1e9      	bne.n	8000960 <lcd_display+0x74>
	}
}
 800098c:	bf00      	nop
 800098e:	3710      	adds	r7, #16
 8000990:	46bd      	mov	sp, r7
 8000992:	bd80      	pop	{r7, pc}

08000994 <lcd_clear>:

void lcd_clear(struct lcd_disp * lcd)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b084      	sub	sp, #16
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]
	uint8_t xpin = 0;
 800099c:	2300      	movs	r3, #0
 800099e:	73fb      	strb	r3, [r7, #15]

	/* set backlight */
	if(lcd->bl)
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d001      	beq.n	80009ae <lcd_clear+0x1a>
	{
		xpin = BL_PIN;
 80009aa:	2308      	movs	r3, #8
 80009ac:	73fb      	strb	r3, [r7, #15]
	}

	/* clear display */
	lcd_write(lcd->addr, CLEAR_LCD, xpin);
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	781b      	ldrb	r3, [r3, #0]
 80009b2:	7bfa      	ldrb	r2, [r7, #15]
 80009b4:	2101      	movs	r1, #1
 80009b6:	4618      	mov	r0, r3
 80009b8:	f7ff ff52 	bl	8000860 <lcd_write>
}
 80009bc:	bf00      	nop
 80009be:	3710      	adds	r7, #16
 80009c0:	46bd      	mov	sp, r7
 80009c2:	bd80      	pop	{r7, pc}

080009c4 <set_clock>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void set_clock(uint8_t hour, uint8_t minute, uint8_t second, uint8_t day, uint8_t month, uint8_t year){
 80009c4:	b590      	push	{r4, r7, lr}
 80009c6:	b089      	sub	sp, #36	; 0x24
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	4604      	mov	r4, r0
 80009cc:	4608      	mov	r0, r1
 80009ce:	4611      	mov	r1, r2
 80009d0:	461a      	mov	r2, r3
 80009d2:	4623      	mov	r3, r4
 80009d4:	71fb      	strb	r3, [r7, #7]
 80009d6:	4603      	mov	r3, r0
 80009d8:	71bb      	strb	r3, [r7, #6]
 80009da:	460b      	mov	r3, r1
 80009dc:	717b      	strb	r3, [r7, #5]
 80009de:	4613      	mov	r3, r2
 80009e0:	713b      	strb	r3, [r7, #4]
	RTC_TimeTypeDef sTime = {0};
 80009e2:	f107 030c 	add.w	r3, r7, #12
 80009e6:	2200      	movs	r2, #0
 80009e8:	601a      	str	r2, [r3, #0]
 80009ea:	605a      	str	r2, [r3, #4]
 80009ec:	609a      	str	r2, [r3, #8]
 80009ee:	60da      	str	r2, [r3, #12]
 80009f0:	611a      	str	r2, [r3, #16]
	RTC_DateTypeDef DateToUpdate = {0};
 80009f2:	2300      	movs	r3, #0
 80009f4:	60bb      	str	r3, [r7, #8]
	sTime.Hours = hour;
 80009f6:	79fb      	ldrb	r3, [r7, #7]
 80009f8:	733b      	strb	r3, [r7, #12]
	sTime.Minutes = minute;
 80009fa:	79bb      	ldrb	r3, [r7, #6]
 80009fc:	737b      	strb	r3, [r7, #13]
	sTime.Seconds = second;
 80009fe:	797b      	ldrb	r3, [r7, #5]
 8000a00:	73bb      	strb	r3, [r7, #14]
	sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000a02:	2300      	movs	r3, #0
 8000a04:	61bb      	str	r3, [r7, #24]
	sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000a06:	2300      	movs	r3, #0
 8000a08:	61fb      	str	r3, [r7, #28]

	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8000a0a:	f107 030c 	add.w	r3, r7, #12
 8000a0e:	2200      	movs	r2, #0
 8000a10:	4619      	mov	r1, r3
 8000a12:	4870      	ldr	r0, [pc, #448]	; (8000bd4 <set_clock+0x210>)
 8000a14:	f002 fceb 	bl	80033ee <HAL_RTC_SetTime>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d001      	beq.n	8000a22 <set_clock+0x5e>
	{
		Error_Handler();
 8000a1e:	f000 fd1b 	bl	8001458 <Error_Handler>
	}

	DateToUpdate.WeekDay = RTC_WEEKDAY_SATURDAY;
 8000a22:	2306      	movs	r3, #6
 8000a24:	723b      	strb	r3, [r7, #8]
	if (month == 1){
 8000a26:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8000a2a:	2b01      	cmp	r3, #1
 8000a2c:	d102      	bne.n	8000a34 <set_clock+0x70>
		DateToUpdate.Month = RTC_MONTH_JANUARY;
 8000a2e:	2301      	movs	r3, #1
 8000a30:	727b      	strb	r3, [r7, #9]
 8000a32:	e04b      	b.n	8000acc <set_clock+0x108>
	}
	else if (month == 2){
 8000a34:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8000a38:	2b02      	cmp	r3, #2
 8000a3a:	d102      	bne.n	8000a42 <set_clock+0x7e>
		DateToUpdate.Month = RTC_MONTH_FEBRUARY;
 8000a3c:	2302      	movs	r3, #2
 8000a3e:	727b      	strb	r3, [r7, #9]
 8000a40:	e044      	b.n	8000acc <set_clock+0x108>
	}
	else if (month == 3){
 8000a42:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8000a46:	2b03      	cmp	r3, #3
 8000a48:	d102      	bne.n	8000a50 <set_clock+0x8c>
		DateToUpdate.Month = RTC_MONTH_MARCH;
 8000a4a:	2303      	movs	r3, #3
 8000a4c:	727b      	strb	r3, [r7, #9]
 8000a4e:	e03d      	b.n	8000acc <set_clock+0x108>
	}
	else if (month == 4){
 8000a50:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8000a54:	2b04      	cmp	r3, #4
 8000a56:	d102      	bne.n	8000a5e <set_clock+0x9a>
		DateToUpdate.Month = RTC_MONTH_APRIL;
 8000a58:	2304      	movs	r3, #4
 8000a5a:	727b      	strb	r3, [r7, #9]
 8000a5c:	e036      	b.n	8000acc <set_clock+0x108>
	}
	else if (month == 5){
 8000a5e:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8000a62:	2b05      	cmp	r3, #5
 8000a64:	d102      	bne.n	8000a6c <set_clock+0xa8>
		DateToUpdate.Month = RTC_MONTH_MAY;
 8000a66:	2305      	movs	r3, #5
 8000a68:	727b      	strb	r3, [r7, #9]
 8000a6a:	e02f      	b.n	8000acc <set_clock+0x108>
	}
	else if (month == 6){
 8000a6c:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8000a70:	2b06      	cmp	r3, #6
 8000a72:	d102      	bne.n	8000a7a <set_clock+0xb6>
		DateToUpdate.Month = RTC_MONTH_JUNE;
 8000a74:	2306      	movs	r3, #6
 8000a76:	727b      	strb	r3, [r7, #9]
 8000a78:	e028      	b.n	8000acc <set_clock+0x108>
	}
	else if (month == 7){
 8000a7a:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8000a7e:	2b07      	cmp	r3, #7
 8000a80:	d102      	bne.n	8000a88 <set_clock+0xc4>
		DateToUpdate.Month = RTC_MONTH_JULY;
 8000a82:	2307      	movs	r3, #7
 8000a84:	727b      	strb	r3, [r7, #9]
 8000a86:	e021      	b.n	8000acc <set_clock+0x108>
	}
	else if (month == 8){
 8000a88:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8000a8c:	2b08      	cmp	r3, #8
 8000a8e:	d102      	bne.n	8000a96 <set_clock+0xd2>
		DateToUpdate.Month = RTC_MONTH_AUGUST;
 8000a90:	2308      	movs	r3, #8
 8000a92:	727b      	strb	r3, [r7, #9]
 8000a94:	e01a      	b.n	8000acc <set_clock+0x108>
	}
	else if (month == 9){
 8000a96:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8000a9a:	2b09      	cmp	r3, #9
 8000a9c:	d102      	bne.n	8000aa4 <set_clock+0xe0>
		DateToUpdate.Month = RTC_MONTH_SEPTEMBER;
 8000a9e:	2309      	movs	r3, #9
 8000aa0:	727b      	strb	r3, [r7, #9]
 8000aa2:	e013      	b.n	8000acc <set_clock+0x108>
	}
	else if (month == 10){
 8000aa4:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8000aa8:	2b0a      	cmp	r3, #10
 8000aaa:	d102      	bne.n	8000ab2 <set_clock+0xee>
		DateToUpdate.Month = RTC_MONTH_OCTOBER;
 8000aac:	2310      	movs	r3, #16
 8000aae:	727b      	strb	r3, [r7, #9]
 8000ab0:	e00c      	b.n	8000acc <set_clock+0x108>
	}
	else if (month == 11){
 8000ab2:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8000ab6:	2b0b      	cmp	r3, #11
 8000ab8:	d102      	bne.n	8000ac0 <set_clock+0xfc>
		DateToUpdate.Month = RTC_MONTH_NOVEMBER;
 8000aba:	2311      	movs	r3, #17
 8000abc:	727b      	strb	r3, [r7, #9]
 8000abe:	e005      	b.n	8000acc <set_clock+0x108>
	}
	else if (month == 12){
 8000ac0:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8000ac4:	2b0c      	cmp	r3, #12
 8000ac6:	d101      	bne.n	8000acc <set_clock+0x108>
		DateToUpdate.Month = RTC_MONTH_DECEMBER;
 8000ac8:	2312      	movs	r3, #18
 8000aca:	727b      	strb	r3, [r7, #9]
	}

	if (day == 1 || day == 8 || day == 15 || day == 22 || day == 29){
 8000acc:	793b      	ldrb	r3, [r7, #4]
 8000ace:	2b01      	cmp	r3, #1
 8000ad0:	d00b      	beq.n	8000aea <set_clock+0x126>
 8000ad2:	793b      	ldrb	r3, [r7, #4]
 8000ad4:	2b08      	cmp	r3, #8
 8000ad6:	d008      	beq.n	8000aea <set_clock+0x126>
 8000ad8:	793b      	ldrb	r3, [r7, #4]
 8000ada:	2b0f      	cmp	r3, #15
 8000adc:	d005      	beq.n	8000aea <set_clock+0x126>
 8000ade:	793b      	ldrb	r3, [r7, #4]
 8000ae0:	2b16      	cmp	r3, #22
 8000ae2:	d002      	beq.n	8000aea <set_clock+0x126>
 8000ae4:	793b      	ldrb	r3, [r7, #4]
 8000ae6:	2b1d      	cmp	r3, #29
 8000ae8:	d102      	bne.n	8000af0 <set_clock+0x12c>

		DateToUpdate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000aea:	2301      	movs	r3, #1
 8000aec:	723b      	strb	r3, [r7, #8]
 8000aee:	e05b      	b.n	8000ba8 <set_clock+0x1e4>
	}
	else if (day == 2 || day == 9 || day == 16 || day == 23 || day == 30){
 8000af0:	793b      	ldrb	r3, [r7, #4]
 8000af2:	2b02      	cmp	r3, #2
 8000af4:	d00b      	beq.n	8000b0e <set_clock+0x14a>
 8000af6:	793b      	ldrb	r3, [r7, #4]
 8000af8:	2b09      	cmp	r3, #9
 8000afa:	d008      	beq.n	8000b0e <set_clock+0x14a>
 8000afc:	793b      	ldrb	r3, [r7, #4]
 8000afe:	2b10      	cmp	r3, #16
 8000b00:	d005      	beq.n	8000b0e <set_clock+0x14a>
 8000b02:	793b      	ldrb	r3, [r7, #4]
 8000b04:	2b17      	cmp	r3, #23
 8000b06:	d002      	beq.n	8000b0e <set_clock+0x14a>
 8000b08:	793b      	ldrb	r3, [r7, #4]
 8000b0a:	2b1e      	cmp	r3, #30
 8000b0c:	d102      	bne.n	8000b14 <set_clock+0x150>
		DateToUpdate.WeekDay = RTC_WEEKDAY_TUESDAY;
 8000b0e:	2302      	movs	r3, #2
 8000b10:	723b      	strb	r3, [r7, #8]
 8000b12:	e049      	b.n	8000ba8 <set_clock+0x1e4>
	}
	else if (day == 3 || day == 10 || day == 17 || day == 24){
 8000b14:	793b      	ldrb	r3, [r7, #4]
 8000b16:	2b03      	cmp	r3, #3
 8000b18:	d008      	beq.n	8000b2c <set_clock+0x168>
 8000b1a:	793b      	ldrb	r3, [r7, #4]
 8000b1c:	2b0a      	cmp	r3, #10
 8000b1e:	d005      	beq.n	8000b2c <set_clock+0x168>
 8000b20:	793b      	ldrb	r3, [r7, #4]
 8000b22:	2b11      	cmp	r3, #17
 8000b24:	d002      	beq.n	8000b2c <set_clock+0x168>
 8000b26:	793b      	ldrb	r3, [r7, #4]
 8000b28:	2b18      	cmp	r3, #24
 8000b2a:	d102      	bne.n	8000b32 <set_clock+0x16e>
		DateToUpdate.WeekDay = RTC_WEEKDAY_WEDNESDAY;
 8000b2c:	2303      	movs	r3, #3
 8000b2e:	723b      	strb	r3, [r7, #8]
 8000b30:	e03a      	b.n	8000ba8 <set_clock+0x1e4>
	}
	else if (day == 4 || day == 11 || day == 18 || day == 25){
 8000b32:	793b      	ldrb	r3, [r7, #4]
 8000b34:	2b04      	cmp	r3, #4
 8000b36:	d008      	beq.n	8000b4a <set_clock+0x186>
 8000b38:	793b      	ldrb	r3, [r7, #4]
 8000b3a:	2b0b      	cmp	r3, #11
 8000b3c:	d005      	beq.n	8000b4a <set_clock+0x186>
 8000b3e:	793b      	ldrb	r3, [r7, #4]
 8000b40:	2b12      	cmp	r3, #18
 8000b42:	d002      	beq.n	8000b4a <set_clock+0x186>
 8000b44:	793b      	ldrb	r3, [r7, #4]
 8000b46:	2b19      	cmp	r3, #25
 8000b48:	d102      	bne.n	8000b50 <set_clock+0x18c>
		DateToUpdate.WeekDay = RTC_WEEKDAY_THURSDAY;
 8000b4a:	2304      	movs	r3, #4
 8000b4c:	723b      	strb	r3, [r7, #8]
 8000b4e:	e02b      	b.n	8000ba8 <set_clock+0x1e4>
	}
	else if (day == 5 || day == 12 || day == 19 || day == 26){
 8000b50:	793b      	ldrb	r3, [r7, #4]
 8000b52:	2b05      	cmp	r3, #5
 8000b54:	d008      	beq.n	8000b68 <set_clock+0x1a4>
 8000b56:	793b      	ldrb	r3, [r7, #4]
 8000b58:	2b0c      	cmp	r3, #12
 8000b5a:	d005      	beq.n	8000b68 <set_clock+0x1a4>
 8000b5c:	793b      	ldrb	r3, [r7, #4]
 8000b5e:	2b13      	cmp	r3, #19
 8000b60:	d002      	beq.n	8000b68 <set_clock+0x1a4>
 8000b62:	793b      	ldrb	r3, [r7, #4]
 8000b64:	2b1a      	cmp	r3, #26
 8000b66:	d102      	bne.n	8000b6e <set_clock+0x1aa>
		DateToUpdate.WeekDay = RTC_WEEKDAY_FRIDAY;
 8000b68:	2305      	movs	r3, #5
 8000b6a:	723b      	strb	r3, [r7, #8]
 8000b6c:	e01c      	b.n	8000ba8 <set_clock+0x1e4>
	}
	else if (day == 6 || day == 13 || day == 20 || day == 27){
 8000b6e:	793b      	ldrb	r3, [r7, #4]
 8000b70:	2b06      	cmp	r3, #6
 8000b72:	d008      	beq.n	8000b86 <set_clock+0x1c2>
 8000b74:	793b      	ldrb	r3, [r7, #4]
 8000b76:	2b0d      	cmp	r3, #13
 8000b78:	d005      	beq.n	8000b86 <set_clock+0x1c2>
 8000b7a:	793b      	ldrb	r3, [r7, #4]
 8000b7c:	2b14      	cmp	r3, #20
 8000b7e:	d002      	beq.n	8000b86 <set_clock+0x1c2>
 8000b80:	793b      	ldrb	r3, [r7, #4]
 8000b82:	2b1b      	cmp	r3, #27
 8000b84:	d102      	bne.n	8000b8c <set_clock+0x1c8>
		DateToUpdate.WeekDay = RTC_WEEKDAY_SATURDAY;
 8000b86:	2306      	movs	r3, #6
 8000b88:	723b      	strb	r3, [r7, #8]
 8000b8a:	e00d      	b.n	8000ba8 <set_clock+0x1e4>
	}
	else if (day == 7 || day == 14 || day == 21 || day == 28){
 8000b8c:	793b      	ldrb	r3, [r7, #4]
 8000b8e:	2b07      	cmp	r3, #7
 8000b90:	d008      	beq.n	8000ba4 <set_clock+0x1e0>
 8000b92:	793b      	ldrb	r3, [r7, #4]
 8000b94:	2b0e      	cmp	r3, #14
 8000b96:	d005      	beq.n	8000ba4 <set_clock+0x1e0>
 8000b98:	793b      	ldrb	r3, [r7, #4]
 8000b9a:	2b15      	cmp	r3, #21
 8000b9c:	d002      	beq.n	8000ba4 <set_clock+0x1e0>
 8000b9e:	793b      	ldrb	r3, [r7, #4]
 8000ba0:	2b1c      	cmp	r3, #28
 8000ba2:	d101      	bne.n	8000ba8 <set_clock+0x1e4>
		DateToUpdate.WeekDay = RTC_WEEKDAY_SUNDAY;
 8000ba4:	2307      	movs	r3, #7
 8000ba6:	723b      	strb	r3, [r7, #8]
	}

	DateToUpdate.Date = day;
 8000ba8:	793b      	ldrb	r3, [r7, #4]
 8000baa:	72bb      	strb	r3, [r7, #10]
	DateToUpdate.Year = year;
 8000bac:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8000bb0:	72fb      	strb	r3, [r7, #11]

	if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BIN) != HAL_OK)
 8000bb2:	f107 0308 	add.w	r3, r7, #8
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	4619      	mov	r1, r3
 8000bba:	4806      	ldr	r0, [pc, #24]	; (8000bd4 <set_clock+0x210>)
 8000bbc:	f002 fd32 	bl	8003624 <HAL_RTC_SetDate>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d001      	beq.n	8000bca <set_clock+0x206>
	{
		Error_Handler();
 8000bc6:	f000 fc47 	bl	8001458 <Error_Handler>
	}

}
 8000bca:	bf00      	nop
 8000bcc:	3724      	adds	r7, #36	; 0x24
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bd90      	pop	{r4, r7, pc}
 8000bd2:	bf00      	nop
 8000bd4:	20000148 	.word	0x20000148

08000bd8 <set_alarm>:
void set_alarm(uint8_t hour, uint8_t minute, uint8_t second, uint8_t day){
 8000bd8:	b590      	push	{r4, r7, lr}
 8000bda:	b08d      	sub	sp, #52	; 0x34
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	4604      	mov	r4, r0
 8000be0:	4608      	mov	r0, r1
 8000be2:	4611      	mov	r1, r2
 8000be4:	461a      	mov	r2, r3
 8000be6:	4623      	mov	r3, r4
 8000be8:	71fb      	strb	r3, [r7, #7]
 8000bea:	4603      	mov	r3, r0
 8000bec:	71bb      	strb	r3, [r7, #6]
 8000bee:	460b      	mov	r3, r1
 8000bf0:	717b      	strb	r3, [r7, #5]
 8000bf2:	4613      	mov	r3, r2
 8000bf4:	713b      	strb	r3, [r7, #4]
	RTC_AlarmTypeDef sAlarm = {0};
 8000bf6:	f107 0308 	add.w	r3, r7, #8
 8000bfa:	2228      	movs	r2, #40	; 0x28
 8000bfc:	2100      	movs	r1, #0
 8000bfe:	4618      	mov	r0, r3
 8000c00:	f003 fc74 	bl	80044ec <memset>

	sAlarm.AlarmTime.Hours = hour;
 8000c04:	79fb      	ldrb	r3, [r7, #7]
 8000c06:	723b      	strb	r3, [r7, #8]
	sAlarm.AlarmTime.Minutes = minute;
 8000c08:	79bb      	ldrb	r3, [r7, #6]
 8000c0a:	727b      	strb	r3, [r7, #9]
	sAlarm.AlarmTime.Seconds = second;
 8000c0c:	797b      	ldrb	r3, [r7, #5]
 8000c0e:	72bb      	strb	r3, [r7, #10]
	sAlarm.AlarmTime.SubSeconds = 0;
 8000c10:	2300      	movs	r3, #0
 8000c12:	60fb      	str	r3, [r7, #12]
	sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000c14:	2300      	movs	r3, #0
 8000c16:	617b      	str	r3, [r7, #20]
	sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	61bb      	str	r3, [r7, #24]
	sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	61fb      	str	r3, [r7, #28]
	sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8000c20:	2300      	movs	r3, #0
 8000c22:	623b      	str	r3, [r7, #32]
	sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8000c24:	2300      	movs	r3, #0
 8000c26:	627b      	str	r3, [r7, #36]	; 0x24
	sAlarm.AlarmDateWeekDay = day;
 8000c28:	793b      	ldrb	r3, [r7, #4]
 8000c2a:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	sAlarm.Alarm = RTC_ALARM_A;
 8000c2e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c32:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 8000c34:	f107 0308 	add.w	r3, r7, #8
 8000c38:	2200      	movs	r2, #0
 8000c3a:	4619      	mov	r1, r3
 8000c3c:	4805      	ldr	r0, [pc, #20]	; (8000c54 <set_alarm+0x7c>)
 8000c3e:	f002 fde7 	bl	8003810 <HAL_RTC_SetAlarm_IT>
 8000c42:	4603      	mov	r3, r0
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d001      	beq.n	8000c4c <set_alarm+0x74>
	{
		Error_Handler();
 8000c48:	f000 fc06 	bl	8001458 <Error_Handler>
	}

}
 8000c4c:	bf00      	nop
 8000c4e:	3734      	adds	r7, #52	; 0x34
 8000c50:	46bd      	mov	sp, r7
 8000c52:	bd90      	pop	{r4, r7, pc}
 8000c54:	20000148 	.word	0x20000148

08000c58 <get_time>:
void get_time(void){
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b088      	sub	sp, #32
 8000c5c:	af02      	add	r7, sp, #8
	RTC_TimeTypeDef sTime = {0};
 8000c5e:	1d3b      	adds	r3, r7, #4
 8000c60:	2200      	movs	r2, #0
 8000c62:	601a      	str	r2, [r3, #0]
 8000c64:	605a      	str	r2, [r3, #4]
 8000c66:	609a      	str	r2, [r3, #8]
 8000c68:	60da      	str	r2, [r3, #12]
 8000c6a:	611a      	str	r2, [r3, #16]
	RTC_DateTypeDef sDate = {0};
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	603b      	str	r3, [r7, #0]

	HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8000c70:	1d3b      	adds	r3, r7, #4
 8000c72:	2200      	movs	r2, #0
 8000c74:	4619      	mov	r1, r3
 8000c76:	4812      	ldr	r0, [pc, #72]	; (8000cc0 <get_time+0x68>)
 8000c78:	f002 fc76 	bl	8003568 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8000c7c:	463b      	mov	r3, r7
 8000c7e:	2200      	movs	r2, #0
 8000c80:	4619      	mov	r1, r3
 8000c82:	480f      	ldr	r0, [pc, #60]	; (8000cc0 <get_time+0x68>)
 8000c84:	f002 fd75 	bl	8003772 <HAL_RTC_GetDate>

	sprintf((char*)disp.f_line, "%02d:%02d:%02d", sTime.Hours, sTime.Minutes, sTime.Seconds);
 8000c88:	793b      	ldrb	r3, [r7, #4]
 8000c8a:	461a      	mov	r2, r3
 8000c8c:	797b      	ldrb	r3, [r7, #5]
 8000c8e:	4619      	mov	r1, r3
 8000c90:	79bb      	ldrb	r3, [r7, #6]
 8000c92:	9300      	str	r3, [sp, #0]
 8000c94:	460b      	mov	r3, r1
 8000c96:	490b      	ldr	r1, [pc, #44]	; (8000cc4 <get_time+0x6c>)
 8000c98:	480b      	ldr	r0, [pc, #44]	; (8000cc8 <get_time+0x70>)
 8000c9a:	f003 fc2f 	bl	80044fc <siprintf>
	sprintf((char*)disp.s_line, "%02d:%02d:%d", sDate.Date, sDate.Month, 2020 + sDate.Year);
 8000c9e:	78bb      	ldrb	r3, [r7, #2]
 8000ca0:	461a      	mov	r2, r3
 8000ca2:	787b      	ldrb	r3, [r7, #1]
 8000ca4:	4619      	mov	r1, r3
 8000ca6:	78fb      	ldrb	r3, [r7, #3]
 8000ca8:	f203 73e4 	addw	r3, r3, #2020	; 0x7e4
 8000cac:	9300      	str	r3, [sp, #0]
 8000cae:	460b      	mov	r3, r1
 8000cb0:	4906      	ldr	r1, [pc, #24]	; (8000ccc <get_time+0x74>)
 8000cb2:	4807      	ldr	r0, [pc, #28]	; (8000cd0 <get_time+0x78>)
 8000cb4:	f003 fc22 	bl	80044fc <siprintf>
}
 8000cb8:	bf00      	nop
 8000cba:	3718      	adds	r7, #24
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	bd80      	pop	{r7, pc}
 8000cc0:	20000148 	.word	0x20000148
 8000cc4:	08004d20 	.word	0x08004d20
 8000cc8:	20000125 	.word	0x20000125
 8000ccc:	08004d30 	.word	0x08004d30
 8000cd0:	20000136 	.word	0x20000136

08000cd4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000cd4:	b5b0      	push	{r4, r5, r7, lr}
 8000cd6:	b082      	sub	sp, #8
 8000cd8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cda:	f000 fde3 	bl	80018a4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cde:	f000 f95d 	bl	8000f9c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ce2:	f7ff fc45 	bl	8000570 <MX_GPIO_Init>
  MX_RTC_Init();
 8000ce6:	f000 fbbb 	bl	8001460 <MX_RTC_Init>
  MX_TIM1_Init();
 8000cea:	f000 fd37 	bl	800175c <MX_TIM1_Init>
  MX_I2C1_Init();
 8000cee:	f7ff fd01 	bl	80006f4 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  lcd_init(&disp);
 8000cf2:	489a      	ldr	r0, [pc, #616]	; (8000f5c <main+0x288>)
 8000cf4:	f7ff fd74 	bl	80007e0 <lcd_init>
  lcd_clear(&disp);
 8000cf8:	4898      	ldr	r0, [pc, #608]	; (8000f5c <main+0x288>)
 8000cfa:	f7ff fe4b 	bl	8000994 <lcd_clear>
  disp.addr = (0x27 << 1);
 8000cfe:	4b97      	ldr	r3, [pc, #604]	; (8000f5c <main+0x288>)
 8000d00:	224e      	movs	r2, #78	; 0x4e
 8000d02:	701a      	strb	r2, [r3, #0]
  disp.bl = true;
 8000d04:	4b95      	ldr	r3, [pc, #596]	; (8000f5c <main+0x288>)
 8000d06:	2201      	movs	r2, #1
 8000d08:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
  HAL_GPIO_WritePin (R1_PORT, R1_PIN, GPIO_PIN_SET);  //Pull the R1 low
 8000d0c:	2201      	movs	r2, #1
 8000d0e:	2180      	movs	r1, #128	; 0x80
 8000d10:	4893      	ldr	r0, [pc, #588]	; (8000f60 <main+0x28c>)
 8000d12:	f001 f91f 	bl	8001f54 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin (R2_PORT, R2_PIN, GPIO_PIN_SET);  // Pull the R2 High
 8000d16:	2201      	movs	r2, #1
 8000d18:	2140      	movs	r1, #64	; 0x40
 8000d1a:	4891      	ldr	r0, [pc, #580]	; (8000f60 <main+0x28c>)
 8000d1c:	f001 f91a 	bl	8001f54 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin (R3_PORT, R3_PIN, GPIO_PIN_SET);  // Pull the R3 High
 8000d20:	2201      	movs	r2, #1
 8000d22:	2120      	movs	r1, #32
 8000d24:	488e      	ldr	r0, [pc, #568]	; (8000f60 <main+0x28c>)
 8000d26:	f001 f915 	bl	8001f54 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin (R4_PORT, R4_PIN, GPIO_PIN_RESET);  // Pull the R4 High
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	2110      	movs	r1, #16
 8000d2e:	488c      	ldr	r0, [pc, #560]	; (8000f60 <main+0x28c>)
 8000d30:	f001 f910 	bl	8001f54 <HAL_GPIO_WritePin>
  clock.days = 1;
 8000d34:	4b8b      	ldr	r3, [pc, #556]	; (8000f64 <main+0x290>)
 8000d36:	2201      	movs	r2, #1
 8000d38:	70da      	strb	r2, [r3, #3]
  clock.months = 1;
 8000d3a:	4b8a      	ldr	r3, [pc, #552]	; (8000f64 <main+0x290>)
 8000d3c:	2201      	movs	r2, #1
 8000d3e:	711a      	strb	r2, [r3, #4]
  /* USER CODE BEGIN WHILE */

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  while (counter < 2){
 8000d40:	e027      	b.n	8000d92 <main+0xbe>
	  if (refresh_lcd == 1){
 8000d42:	4b89      	ldr	r3, [pc, #548]	; (8000f68 <main+0x294>)
 8000d44:	781b      	ldrb	r3, [r3, #0]
 8000d46:	2b01      	cmp	r3, #1
 8000d48:	d123      	bne.n	8000d92 <main+0xbe>
		  sprintf((char*)disp.f_line, "%02d:%02d:%02d Godzina", clock.hours, clock.minutes, clock.seconds);
 8000d4a:	4b86      	ldr	r3, [pc, #536]	; (8000f64 <main+0x290>)
 8000d4c:	781b      	ldrb	r3, [r3, #0]
 8000d4e:	461a      	mov	r2, r3
 8000d50:	4b84      	ldr	r3, [pc, #528]	; (8000f64 <main+0x290>)
 8000d52:	785b      	ldrb	r3, [r3, #1]
 8000d54:	4619      	mov	r1, r3
 8000d56:	4b83      	ldr	r3, [pc, #524]	; (8000f64 <main+0x290>)
 8000d58:	789b      	ldrb	r3, [r3, #2]
 8000d5a:	9300      	str	r3, [sp, #0]
 8000d5c:	460b      	mov	r3, r1
 8000d5e:	4983      	ldr	r1, [pc, #524]	; (8000f6c <main+0x298>)
 8000d60:	4883      	ldr	r0, [pc, #524]	; (8000f70 <main+0x29c>)
 8000d62:	f003 fbcb 	bl	80044fc <siprintf>
		  sprintf((char*)disp.s_line, "%02d-%02d-%d  Data", clock.days, clock.months, 2020 + clock.years);
 8000d66:	4b7f      	ldr	r3, [pc, #508]	; (8000f64 <main+0x290>)
 8000d68:	78db      	ldrb	r3, [r3, #3]
 8000d6a:	461a      	mov	r2, r3
 8000d6c:	4b7d      	ldr	r3, [pc, #500]	; (8000f64 <main+0x290>)
 8000d6e:	791b      	ldrb	r3, [r3, #4]
 8000d70:	4619      	mov	r1, r3
 8000d72:	4b7c      	ldr	r3, [pc, #496]	; (8000f64 <main+0x290>)
 8000d74:	795b      	ldrb	r3, [r3, #5]
 8000d76:	f203 73e4 	addw	r3, r3, #2020	; 0x7e4
 8000d7a:	9300      	str	r3, [sp, #0]
 8000d7c:	460b      	mov	r3, r1
 8000d7e:	497d      	ldr	r1, [pc, #500]	; (8000f74 <main+0x2a0>)
 8000d80:	487d      	ldr	r0, [pc, #500]	; (8000f78 <main+0x2a4>)
 8000d82:	f003 fbbb 	bl	80044fc <siprintf>
		  lcd_display(&disp);
 8000d86:	4875      	ldr	r0, [pc, #468]	; (8000f5c <main+0x288>)
 8000d88:	f7ff fdb0 	bl	80008ec <lcd_display>
		  refresh_lcd = 0;
 8000d8c:	4b76      	ldr	r3, [pc, #472]	; (8000f68 <main+0x294>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	701a      	strb	r2, [r3, #0]
  while (counter < 2){
 8000d92:	4b7a      	ldr	r3, [pc, #488]	; (8000f7c <main+0x2a8>)
 8000d94:	781b      	ldrb	r3, [r3, #0]
 8000d96:	2b01      	cmp	r3, #1
 8000d98:	d9d3      	bls.n	8000d42 <main+0x6e>
	  }
  }

  while (counter < 4){
 8000d9a:	e057      	b.n	8000e4c <main+0x178>
	  if (refresh_lcd == 1){
 8000d9c:	4b72      	ldr	r3, [pc, #456]	; (8000f68 <main+0x294>)
 8000d9e:	781b      	ldrb	r3, [r3, #0]
 8000da0:	2b01      	cmp	r3, #1
 8000da2:	d153      	bne.n	8000e4c <main+0x178>
		  alarm.hours = clock.hours + d.hours;
 8000da4:	4b6f      	ldr	r3, [pc, #444]	; (8000f64 <main+0x290>)
 8000da6:	781a      	ldrb	r2, [r3, #0]
 8000da8:	4b75      	ldr	r3, [pc, #468]	; (8000f80 <main+0x2ac>)
 8000daa:	781b      	ldrb	r3, [r3, #0]
 8000dac:	4413      	add	r3, r2
 8000dae:	b2da      	uxtb	r2, r3
 8000db0:	4b74      	ldr	r3, [pc, #464]	; (8000f84 <main+0x2b0>)
 8000db2:	701a      	strb	r2, [r3, #0]
		  alarm.minutes = clock.minutes + d.minutes;
 8000db4:	4b6b      	ldr	r3, [pc, #428]	; (8000f64 <main+0x290>)
 8000db6:	785a      	ldrb	r2, [r3, #1]
 8000db8:	4b71      	ldr	r3, [pc, #452]	; (8000f80 <main+0x2ac>)
 8000dba:	785b      	ldrb	r3, [r3, #1]
 8000dbc:	4413      	add	r3, r2
 8000dbe:	b2da      	uxtb	r2, r3
 8000dc0:	4b70      	ldr	r3, [pc, #448]	; (8000f84 <main+0x2b0>)
 8000dc2:	705a      	strb	r2, [r3, #1]
		  alarm.seconds = clock.seconds + d.seconds;
 8000dc4:	4b67      	ldr	r3, [pc, #412]	; (8000f64 <main+0x290>)
 8000dc6:	789a      	ldrb	r2, [r3, #2]
 8000dc8:	4b6d      	ldr	r3, [pc, #436]	; (8000f80 <main+0x2ac>)
 8000dca:	789b      	ldrb	r3, [r3, #2]
 8000dcc:	4413      	add	r3, r2
 8000dce:	b2da      	uxtb	r2, r3
 8000dd0:	4b6c      	ldr	r3, [pc, #432]	; (8000f84 <main+0x2b0>)
 8000dd2:	709a      	strb	r2, [r3, #2]
		  alarm.days = clock.days + d.days;
 8000dd4:	4b63      	ldr	r3, [pc, #396]	; (8000f64 <main+0x290>)
 8000dd6:	78da      	ldrb	r2, [r3, #3]
 8000dd8:	4b69      	ldr	r3, [pc, #420]	; (8000f80 <main+0x2ac>)
 8000dda:	78db      	ldrb	r3, [r3, #3]
 8000ddc:	4413      	add	r3, r2
 8000dde:	b2da      	uxtb	r2, r3
 8000de0:	4b68      	ldr	r3, [pc, #416]	; (8000f84 <main+0x2b0>)
 8000de2:	70da      	strb	r2, [r3, #3]
		  alarm.months = clock.months + d.months;
 8000de4:	4b5f      	ldr	r3, [pc, #380]	; (8000f64 <main+0x290>)
 8000de6:	791a      	ldrb	r2, [r3, #4]
 8000de8:	4b65      	ldr	r3, [pc, #404]	; (8000f80 <main+0x2ac>)
 8000dea:	791b      	ldrb	r3, [r3, #4]
 8000dec:	4413      	add	r3, r2
 8000dee:	b2da      	uxtb	r2, r3
 8000df0:	4b64      	ldr	r3, [pc, #400]	; (8000f84 <main+0x2b0>)
 8000df2:	711a      	strb	r2, [r3, #4]
		  alarm.years = clock.years + d.years;
 8000df4:	4b5b      	ldr	r3, [pc, #364]	; (8000f64 <main+0x290>)
 8000df6:	795a      	ldrb	r2, [r3, #5]
 8000df8:	4b61      	ldr	r3, [pc, #388]	; (8000f80 <main+0x2ac>)
 8000dfa:	795b      	ldrb	r3, [r3, #5]
 8000dfc:	4413      	add	r3, r2
 8000dfe:	b2da      	uxtb	r2, r3
 8000e00:	4b60      	ldr	r3, [pc, #384]	; (8000f84 <main+0x2b0>)
 8000e02:	715a      	strb	r2, [r3, #5]
		  sprintf((char*)disp.f_line, "%02d:%02d:%02d   Ustaw", alarm.hours, alarm.minutes, alarm.seconds);
 8000e04:	4b5f      	ldr	r3, [pc, #380]	; (8000f84 <main+0x2b0>)
 8000e06:	781b      	ldrb	r3, [r3, #0]
 8000e08:	461a      	mov	r2, r3
 8000e0a:	4b5e      	ldr	r3, [pc, #376]	; (8000f84 <main+0x2b0>)
 8000e0c:	785b      	ldrb	r3, [r3, #1]
 8000e0e:	4619      	mov	r1, r3
 8000e10:	4b5c      	ldr	r3, [pc, #368]	; (8000f84 <main+0x2b0>)
 8000e12:	789b      	ldrb	r3, [r3, #2]
 8000e14:	9300      	str	r3, [sp, #0]
 8000e16:	460b      	mov	r3, r1
 8000e18:	495b      	ldr	r1, [pc, #364]	; (8000f88 <main+0x2b4>)
 8000e1a:	4855      	ldr	r0, [pc, #340]	; (8000f70 <main+0x29c>)
 8000e1c:	f003 fb6e 	bl	80044fc <siprintf>
		  sprintf((char*)disp.s_line, "%02d-%02d-%d alarm", alarm.days, alarm.months, 2020 + alarm.years);
 8000e20:	4b58      	ldr	r3, [pc, #352]	; (8000f84 <main+0x2b0>)
 8000e22:	78db      	ldrb	r3, [r3, #3]
 8000e24:	461a      	mov	r2, r3
 8000e26:	4b57      	ldr	r3, [pc, #348]	; (8000f84 <main+0x2b0>)
 8000e28:	791b      	ldrb	r3, [r3, #4]
 8000e2a:	4619      	mov	r1, r3
 8000e2c:	4b55      	ldr	r3, [pc, #340]	; (8000f84 <main+0x2b0>)
 8000e2e:	795b      	ldrb	r3, [r3, #5]
 8000e30:	f203 73e4 	addw	r3, r3, #2020	; 0x7e4
 8000e34:	9300      	str	r3, [sp, #0]
 8000e36:	460b      	mov	r3, r1
 8000e38:	4954      	ldr	r1, [pc, #336]	; (8000f8c <main+0x2b8>)
 8000e3a:	484f      	ldr	r0, [pc, #316]	; (8000f78 <main+0x2a4>)
 8000e3c:	f003 fb5e 	bl	80044fc <siprintf>
		  lcd_display(&disp);
 8000e40:	4846      	ldr	r0, [pc, #280]	; (8000f5c <main+0x288>)
 8000e42:	f7ff fd53 	bl	80008ec <lcd_display>
		  refresh_lcd = 0;
 8000e46:	4b48      	ldr	r3, [pc, #288]	; (8000f68 <main+0x294>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	701a      	strb	r2, [r3, #0]
  while (counter < 4){
 8000e4c:	4b4b      	ldr	r3, [pc, #300]	; (8000f7c <main+0x2a8>)
 8000e4e:	781b      	ldrb	r3, [r3, #0]
 8000e50:	2b03      	cmp	r3, #3
 8000e52:	d9a3      	bls.n	8000d9c <main+0xc8>
	  }
  }
  set_clock(clock.hours, clock.minutes, clock.seconds, clock.days, clock.months, clock.years);
 8000e54:	4b43      	ldr	r3, [pc, #268]	; (8000f64 <main+0x290>)
 8000e56:	7818      	ldrb	r0, [r3, #0]
 8000e58:	4b42      	ldr	r3, [pc, #264]	; (8000f64 <main+0x290>)
 8000e5a:	7859      	ldrb	r1, [r3, #1]
 8000e5c:	4b41      	ldr	r3, [pc, #260]	; (8000f64 <main+0x290>)
 8000e5e:	789c      	ldrb	r4, [r3, #2]
 8000e60:	4b40      	ldr	r3, [pc, #256]	; (8000f64 <main+0x290>)
 8000e62:	78dd      	ldrb	r5, [r3, #3]
 8000e64:	4b3f      	ldr	r3, [pc, #252]	; (8000f64 <main+0x290>)
 8000e66:	791b      	ldrb	r3, [r3, #4]
 8000e68:	4a3e      	ldr	r2, [pc, #248]	; (8000f64 <main+0x290>)
 8000e6a:	7952      	ldrb	r2, [r2, #5]
 8000e6c:	9201      	str	r2, [sp, #4]
 8000e6e:	9300      	str	r3, [sp, #0]
 8000e70:	462b      	mov	r3, r5
 8000e72:	4622      	mov	r2, r4
 8000e74:	f7ff fda6 	bl	80009c4 <set_clock>
  set_alarm(alarm.hours, alarm.minutes, alarm.seconds, alarm.days);
 8000e78:	4b42      	ldr	r3, [pc, #264]	; (8000f84 <main+0x2b0>)
 8000e7a:	7818      	ldrb	r0, [r3, #0]
 8000e7c:	4b41      	ldr	r3, [pc, #260]	; (8000f84 <main+0x2b0>)
 8000e7e:	7859      	ldrb	r1, [r3, #1]
 8000e80:	4b40      	ldr	r3, [pc, #256]	; (8000f84 <main+0x2b0>)
 8000e82:	789a      	ldrb	r2, [r3, #2]
 8000e84:	4b3f      	ldr	r3, [pc, #252]	; (8000f84 <main+0x2b0>)
 8000e86:	78db      	ldrb	r3, [r3, #3]
 8000e88:	f7ff fea6 	bl	8000bd8 <set_alarm>
  while(1){
	  switch (alarm_start){
 8000e8c:	4b40      	ldr	r3, [pc, #256]	; (8000f90 <main+0x2bc>)
 8000e8e:	781b      	ldrb	r3, [r3, #0]
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d00b      	beq.n	8000eac <main+0x1d8>
 8000e94:	2b01      	cmp	r3, #1
 8000e96:	d1f9      	bne.n	8000e8c <main+0x1b8>
	  case 1:
		  get_time();
 8000e98:	f7ff fede 	bl	8000c58 <get_time>
		  lcd_display(&disp);
 8000e9c:	482f      	ldr	r0, [pc, #188]	; (8000f5c <main+0x288>)
 8000e9e:	f7ff fd25 	bl	80008ec <lcd_display>
		  HAL_Delay(950);
 8000ea2:	f240 30b6 	movw	r0, #950	; 0x3b6
 8000ea6:	f000 fd6f 	bl	8001988 <HAL_Delay>
		  break;
 8000eaa:	e056      	b.n	8000f5a <main+0x286>
	  case 0:
		  sprintf((char*)disp.f_line, ALERT_1);
 8000eac:	4a30      	ldr	r2, [pc, #192]	; (8000f70 <main+0x29c>)
 8000eae:	4b39      	ldr	r3, [pc, #228]	; (8000f94 <main+0x2c0>)
 8000eb0:	4614      	mov	r4, r2
 8000eb2:	cb07      	ldmia	r3!, {r0, r1, r2}
 8000eb4:	6020      	str	r0, [r4, #0]
 8000eb6:	6061      	str	r1, [r4, #4]
 8000eb8:	60a2      	str	r2, [r4, #8]
 8000eba:	881b      	ldrh	r3, [r3, #0]
 8000ebc:	81a3      	strh	r3, [r4, #12]
		  sprintf((char*)disp.s_line, ALERT_2);
 8000ebe:	4b27      	ldr	r3, [pc, #156]	; (8000f5c <main+0x288>)
 8000ec0:	4a35      	ldr	r2, [pc, #212]	; (8000f98 <main+0x2c4>)
 8000ec2:	f103 0512 	add.w	r5, r3, #18
 8000ec6:	4614      	mov	r4, r2
 8000ec8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000eca:	6028      	str	r0, [r5, #0]
 8000ecc:	6069      	str	r1, [r5, #4]
 8000ece:	60aa      	str	r2, [r5, #8]
 8000ed0:	60eb      	str	r3, [r5, #12]
 8000ed2:	7823      	ldrb	r3, [r4, #0]
 8000ed4:	742b      	strb	r3, [r5, #16]
		  lcd_display(&disp);
 8000ed6:	4821      	ldr	r0, [pc, #132]	; (8000f5c <main+0x288>)
 8000ed8:	f7ff fd08 	bl	80008ec <lcd_display>
		  HAL_Delay(500);
 8000edc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000ee0:	f000 fd52 	bl	8001988 <HAL_Delay>
		  lcd_clear(&disp);
 8000ee4:	481d      	ldr	r0, [pc, #116]	; (8000f5c <main+0x288>)
 8000ee6:	f7ff fd55 	bl	8000994 <lcd_clear>
		  HAL_Delay(500);
 8000eea:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000eee:	f000 fd4b 	bl	8001988 <HAL_Delay>
		  HAL_GPIO_TogglePin(LD12_GPIO_Port, LD12_Pin);
 8000ef2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ef6:	481a      	ldr	r0, [pc, #104]	; (8000f60 <main+0x28c>)
 8000ef8:	f001 f845 	bl	8001f86 <HAL_GPIO_TogglePin>
		  HAL_GPIO_TogglePin(LD13_GPIO_Port, LD13_Pin);
 8000efc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f00:	4817      	ldr	r0, [pc, #92]	; (8000f60 <main+0x28c>)
 8000f02:	f001 f840 	bl	8001f86 <HAL_GPIO_TogglePin>
		  HAL_GPIO_TogglePin(LD14_GPIO_Port, LD14_Pin);
 8000f06:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000f0a:	4815      	ldr	r0, [pc, #84]	; (8000f60 <main+0x28c>)
 8000f0c:	f001 f83b 	bl	8001f86 <HAL_GPIO_TogglePin>
		  HAL_GPIO_TogglePin(LD15_GPIO_Port, LD15_Pin);
 8000f10:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f14:	4812      	ldr	r0, [pc, #72]	; (8000f60 <main+0x28c>)
 8000f16:	f001 f836 	bl	8001f86 <HAL_GPIO_TogglePin>

		  lcd_clear(&disp);
 8000f1a:	4810      	ldr	r0, [pc, #64]	; (8000f5c <main+0x288>)
 8000f1c:	f7ff fd3a 	bl	8000994 <lcd_clear>
		  if (alarm_start == 1){
 8000f20:	4b1b      	ldr	r3, [pc, #108]	; (8000f90 <main+0x2bc>)
 8000f22:	781b      	ldrb	r3, [r3, #0]
 8000f24:	2b01      	cmp	r3, #1
 8000f26:	d1b1      	bne.n	8000e8c <main+0x1b8>
			  HAL_GPIO_WritePin(LD12_GPIO_Port, LD12_Pin, 0);
 8000f28:	2200      	movs	r2, #0
 8000f2a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f2e:	480c      	ldr	r0, [pc, #48]	; (8000f60 <main+0x28c>)
 8000f30:	f001 f810 	bl	8001f54 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(LD13_GPIO_Port, LD13_Pin, 0);
 8000f34:	2200      	movs	r2, #0
 8000f36:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f3a:	4809      	ldr	r0, [pc, #36]	; (8000f60 <main+0x28c>)
 8000f3c:	f001 f80a 	bl	8001f54 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(LD14_GPIO_Port, LD14_Pin, 0);
 8000f40:	2200      	movs	r2, #0
 8000f42:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000f46:	4806      	ldr	r0, [pc, #24]	; (8000f60 <main+0x28c>)
 8000f48:	f001 f804 	bl	8001f54 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(LD15_GPIO_Port, LD15_Pin, 0);
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f52:	4803      	ldr	r0, [pc, #12]	; (8000f60 <main+0x28c>)
 8000f54:	f000 fffe 	bl	8001f54 <HAL_GPIO_WritePin>
		  break;
 8000f58:	bf00      	nop
	  switch (alarm_start){
 8000f5a:	e797      	b.n	8000e8c <main+0x1b8>
 8000f5c:	20000124 	.word	0x20000124
 8000f60:	40020c00 	.word	0x40020c00
 8000f64:	2000011c 	.word	0x2000011c
 8000f68:	20000000 	.word	0x20000000
 8000f6c:	08004d40 	.word	0x08004d40
 8000f70:	20000125 	.word	0x20000125
 8000f74:	08004d58 	.word	0x08004d58
 8000f78:	20000136 	.word	0x20000136
 8000f7c:	20000090 	.word	0x20000090
 8000f80:	20000114 	.word	0x20000114
 8000f84:	20000108 	.word	0x20000108
 8000f88:	08004d6c 	.word	0x08004d6c
 8000f8c:	08004d84 	.word	0x08004d84
 8000f90:	20000001 	.word	0x20000001
 8000f94:	08004d98 	.word	0x08004d98
 8000f98:	08004da8 	.word	0x08004da8

08000f9c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b098      	sub	sp, #96	; 0x60
 8000fa0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fa2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000fa6:	2230      	movs	r2, #48	; 0x30
 8000fa8:	2100      	movs	r1, #0
 8000faa:	4618      	mov	r0, r3
 8000fac:	f003 fa9e 	bl	80044ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fb0:	f107 031c 	add.w	r3, r7, #28
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	601a      	str	r2, [r3, #0]
 8000fb8:	605a      	str	r2, [r3, #4]
 8000fba:	609a      	str	r2, [r3, #8]
 8000fbc:	60da      	str	r2, [r3, #12]
 8000fbe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000fc0:	f107 030c 	add.w	r3, r7, #12
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	601a      	str	r2, [r3, #0]
 8000fc8:	605a      	str	r2, [r3, #4]
 8000fca:	609a      	str	r2, [r3, #8]
 8000fcc:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fce:	2300      	movs	r3, #0
 8000fd0:	60bb      	str	r3, [r7, #8]
 8000fd2:	4b31      	ldr	r3, [pc, #196]	; (8001098 <SystemClock_Config+0xfc>)
 8000fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fd6:	4a30      	ldr	r2, [pc, #192]	; (8001098 <SystemClock_Config+0xfc>)
 8000fd8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fdc:	6413      	str	r3, [r2, #64]	; 0x40
 8000fde:	4b2e      	ldr	r3, [pc, #184]	; (8001098 <SystemClock_Config+0xfc>)
 8000fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fe2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fe6:	60bb      	str	r3, [r7, #8]
 8000fe8:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000fea:	2300      	movs	r3, #0
 8000fec:	607b      	str	r3, [r7, #4]
 8000fee:	4b2b      	ldr	r3, [pc, #172]	; (800109c <SystemClock_Config+0x100>)
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	4a2a      	ldr	r2, [pc, #168]	; (800109c <SystemClock_Config+0x100>)
 8000ff4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ff8:	6013      	str	r3, [r2, #0]
 8000ffa:	4b28      	ldr	r3, [pc, #160]	; (800109c <SystemClock_Config+0x100>)
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001002:	607b      	str	r3, [r7, #4]
 8001004:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8001006:	230a      	movs	r3, #10
 8001008:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800100a:	2301      	movs	r3, #1
 800100c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800100e:	2310      	movs	r3, #16
 8001010:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001012:	2301      	movs	r3, #1
 8001014:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001016:	2302      	movs	r3, #2
 8001018:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800101a:	2300      	movs	r3, #0
 800101c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800101e:	2308      	movs	r3, #8
 8001020:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001022:	23a8      	movs	r3, #168	; 0xa8
 8001024:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001026:	2302      	movs	r3, #2
 8001028:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800102a:	2304      	movs	r3, #4
 800102c:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800102e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001032:	4618      	mov	r0, r3
 8001034:	f001 fc1a 	bl	800286c <HAL_RCC_OscConfig>
 8001038:	4603      	mov	r3, r0
 800103a:	2b00      	cmp	r3, #0
 800103c:	d001      	beq.n	8001042 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800103e:	f000 fa0b 	bl	8001458 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001042:	230f      	movs	r3, #15
 8001044:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001046:	2302      	movs	r3, #2
 8001048:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800104a:	2300      	movs	r3, #0
 800104c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800104e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001052:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001054:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001058:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800105a:	f107 031c 	add.w	r3, r7, #28
 800105e:	2105      	movs	r1, #5
 8001060:	4618      	mov	r0, r3
 8001062:	f001 fe73 	bl	8002d4c <HAL_RCC_ClockConfig>
 8001066:	4603      	mov	r3, r0
 8001068:	2b00      	cmp	r3, #0
 800106a:	d001      	beq.n	8001070 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 800106c:	f000 f9f4 	bl	8001458 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001070:	2302      	movs	r3, #2
 8001072:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001074:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001078:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800107a:	f107 030c 	add.w	r3, r7, #12
 800107e:	4618      	mov	r0, r3
 8001080:	f002 f842 	bl	8003108 <HAL_RCCEx_PeriphCLKConfig>
 8001084:	4603      	mov	r3, r0
 8001086:	2b00      	cmp	r3, #0
 8001088:	d001      	beq.n	800108e <SystemClock_Config+0xf2>
  {
    Error_Handler();
 800108a:	f000 f9e5 	bl	8001458 <Error_Handler>
  }
}
 800108e:	bf00      	nop
 8001090:	3760      	adds	r7, #96	; 0x60
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	40023800 	.word	0x40023800
 800109c:	40007000 	.word	0x40007000

080010a0 <HAL_RTC_AlarmAEventCallback>:

/* USER CODE BEGIN 4 */
void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc){
 80010a0:	b480      	push	{r7}
 80010a2:	b083      	sub	sp, #12
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
	alarm_start = 0;
 80010a8:	4b04      	ldr	r3, [pc, #16]	; (80010bc <HAL_RTC_AlarmAEventCallback+0x1c>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	701a      	strb	r2, [r3, #0]

}
 80010ae:	bf00      	nop
 80010b0:	370c      	adds	r7, #12
 80010b2:	46bd      	mov	sp, r7
 80010b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b8:	4770      	bx	lr
 80010ba:	bf00      	nop
 80010bc:	20000001 	.word	0x20000001

080010c0 <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b082      	sub	sp, #8
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	4603      	mov	r3, r0
 80010c8:	80fb      	strh	r3, [r7, #6]

	if (GPIO_Pin == PA0_Pin){
 80010ca:	88fb      	ldrh	r3, [r7, #6]
 80010cc:	2b01      	cmp	r3, #1
 80010ce:	d102      	bne.n	80010d6 <HAL_GPIO_EXTI_Callback+0x16>
		alarm_start = 1;
 80010d0:	4b15      	ldr	r3, [pc, #84]	; (8001128 <HAL_GPIO_EXTI_Callback+0x68>)
 80010d2:	2201      	movs	r2, #1
 80010d4:	701a      	strb	r2, [r3, #0]
	}

	if (GPIO_Pin == C4_PIN){
 80010d6:	88fb      	ldrh	r3, [r7, #6]
 80010d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80010dc:	d105      	bne.n	80010ea <HAL_GPIO_EXTI_Callback+0x2a>
		HAL_TIM_Base_Start_IT(&htim1);
 80010de:	4813      	ldr	r0, [pc, #76]	; (800112c <HAL_GPIO_EXTI_Callback+0x6c>)
 80010e0:	f002 fdd9 	bl	8003c96 <HAL_TIM_Base_Start_IT>
		state = false;
 80010e4:	4b12      	ldr	r3, [pc, #72]	; (8001130 <HAL_GPIO_EXTI_Callback+0x70>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	701a      	strb	r2, [r3, #0]

	}

	if (GPIO_Pin == C3_PIN){
 80010ea:	88fb      	ldrh	r3, [r7, #6]
 80010ec:	2b02      	cmp	r3, #2
 80010ee:	d105      	bne.n	80010fc <HAL_GPIO_EXTI_Callback+0x3c>
		HAL_TIM_Base_Start_IT(&htim1);
 80010f0:	480e      	ldr	r0, [pc, #56]	; (800112c <HAL_GPIO_EXTI_Callback+0x6c>)
 80010f2:	f002 fdd0 	bl	8003c96 <HAL_TIM_Base_Start_IT>
		state = false;
 80010f6:	4b0e      	ldr	r3, [pc, #56]	; (8001130 <HAL_GPIO_EXTI_Callback+0x70>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	701a      	strb	r2, [r3, #0]

	}

	if (GPIO_Pin == C2_PIN){
 80010fc:	88fb      	ldrh	r3, [r7, #6]
 80010fe:	2b04      	cmp	r3, #4
 8001100:	d105      	bne.n	800110e <HAL_GPIO_EXTI_Callback+0x4e>
		HAL_TIM_Base_Start_IT(&htim1);
 8001102:	480a      	ldr	r0, [pc, #40]	; (800112c <HAL_GPIO_EXTI_Callback+0x6c>)
 8001104:	f002 fdc7 	bl	8003c96 <HAL_TIM_Base_Start_IT>
		state = false;
 8001108:	4b09      	ldr	r3, [pc, #36]	; (8001130 <HAL_GPIO_EXTI_Callback+0x70>)
 800110a:	2200      	movs	r2, #0
 800110c:	701a      	strb	r2, [r3, #0]

	}

	if (GPIO_Pin == C1_PIN){
 800110e:	88fb      	ldrh	r3, [r7, #6]
 8001110:	2b08      	cmp	r3, #8
 8001112:	d105      	bne.n	8001120 <HAL_GPIO_EXTI_Callback+0x60>
		HAL_TIM_Base_Start_IT(&htim1);
 8001114:	4805      	ldr	r0, [pc, #20]	; (800112c <HAL_GPIO_EXTI_Callback+0x6c>)
 8001116:	f002 fdbe 	bl	8003c96 <HAL_TIM_Base_Start_IT>
		state = false;
 800111a:	4b05      	ldr	r3, [pc, #20]	; (8001130 <HAL_GPIO_EXTI_Callback+0x70>)
 800111c:	2200      	movs	r2, #0
 800111e:	701a      	strb	r2, [r3, #0]
	}
}
 8001120:	bf00      	nop
 8001122:	3708      	adds	r7, #8
 8001124:	46bd      	mov	sp, r7
 8001126:	bd80      	pop	{r7, pc}
 8001128:	20000001 	.word	0x20000001
 800112c:	20000168 	.word	0x20000168
 8001130:	20000002 	.word	0x20000002

08001134 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001134:	b580      	push	{r7, lr}
 8001136:	b082      	sub	sp, #8
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]

	UNUSED(htim);
	if(HAL_GPIO_ReadPin(C4_PORT, C4_PIN) == GPIO_PIN_RESET){
 800113c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001140:	489a      	ldr	r0, [pc, #616]	; (80013ac <HAL_TIM_PeriodElapsedCallback+0x278>)
 8001142:	f000 feef 	bl	8001f24 <HAL_GPIO_ReadPin>
 8001146:	4603      	mov	r3, r0
 8001148:	2b00      	cmp	r3, #0
 800114a:	d16d      	bne.n	8001228 <HAL_TIM_PeriodElapsedCallback+0xf4>
		if (counter == 0 || counter == 1){
 800114c:	4b98      	ldr	r3, [pc, #608]	; (80013b0 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 800114e:	781b      	ldrb	r3, [r3, #0]
 8001150:	2b00      	cmp	r3, #0
 8001152:	d003      	beq.n	800115c <HAL_TIM_PeriodElapsedCallback+0x28>
 8001154:	4b96      	ldr	r3, [pc, #600]	; (80013b0 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8001156:	781b      	ldrb	r3, [r3, #0]
 8001158:	2b01      	cmp	r3, #1
 800115a:	d12a      	bne.n	80011b2 <HAL_TIM_PeriodElapsedCallback+0x7e>
			if (HAL_GPIO_ReadPin(R4_PORT, R4_PIN) == GPIO_PIN_RESET) {
 800115c:	2110      	movs	r1, #16
 800115e:	4895      	ldr	r0, [pc, #596]	; (80013b4 <HAL_TIM_PeriodElapsedCallback+0x280>)
 8001160:	f000 fee0 	bl	8001f24 <HAL_GPIO_ReadPin>
 8001164:	4603      	mov	r3, r0
 8001166:	2b00      	cmp	r3, #0
 8001168:	d10d      	bne.n	8001186 <HAL_TIM_PeriodElapsedCallback+0x52>
				if (clock.hours >= 0 && clock.hours < 23) ++clock.hours;
 800116a:	4b93      	ldr	r3, [pc, #588]	; (80013b8 <HAL_TIM_PeriodElapsedCallback+0x284>)
 800116c:	781b      	ldrb	r3, [r3, #0]
 800116e:	2b16      	cmp	r3, #22
 8001170:	d806      	bhi.n	8001180 <HAL_TIM_PeriodElapsedCallback+0x4c>
 8001172:	4b91      	ldr	r3, [pc, #580]	; (80013b8 <HAL_TIM_PeriodElapsedCallback+0x284>)
 8001174:	781b      	ldrb	r3, [r3, #0]
 8001176:	3301      	adds	r3, #1
 8001178:	b2da      	uxtb	r2, r3
 800117a:	4b8f      	ldr	r3, [pc, #572]	; (80013b8 <HAL_TIM_PeriodElapsedCallback+0x284>)
 800117c:	701a      	strb	r2, [r3, #0]
 800117e:	e002      	b.n	8001186 <HAL_TIM_PeriodElapsedCallback+0x52>
				else clock.hours = 0;
 8001180:	4b8d      	ldr	r3, [pc, #564]	; (80013b8 <HAL_TIM_PeriodElapsedCallback+0x284>)
 8001182:	2200      	movs	r2, #0
 8001184:	701a      	strb	r2, [r3, #0]
			}
			if (HAL_GPIO_ReadPin(R3_PORT, R3_PIN) == GPIO_PIN_RESET) {
 8001186:	2120      	movs	r1, #32
 8001188:	488a      	ldr	r0, [pc, #552]	; (80013b4 <HAL_TIM_PeriodElapsedCallback+0x280>)
 800118a:	f000 fecb 	bl	8001f24 <HAL_GPIO_ReadPin>
 800118e:	4603      	mov	r3, r0
 8001190:	2b00      	cmp	r3, #0
 8001192:	d140      	bne.n	8001216 <HAL_TIM_PeriodElapsedCallback+0xe2>
				if (clock.days >= 0 && clock.days < 31) ++clock.days;
 8001194:	4b88      	ldr	r3, [pc, #544]	; (80013b8 <HAL_TIM_PeriodElapsedCallback+0x284>)
 8001196:	78db      	ldrb	r3, [r3, #3]
 8001198:	2b1e      	cmp	r3, #30
 800119a:	d806      	bhi.n	80011aa <HAL_TIM_PeriodElapsedCallback+0x76>
 800119c:	4b86      	ldr	r3, [pc, #536]	; (80013b8 <HAL_TIM_PeriodElapsedCallback+0x284>)
 800119e:	78db      	ldrb	r3, [r3, #3]
 80011a0:	3301      	adds	r3, #1
 80011a2:	b2da      	uxtb	r2, r3
 80011a4:	4b84      	ldr	r3, [pc, #528]	; (80013b8 <HAL_TIM_PeriodElapsedCallback+0x284>)
 80011a6:	70da      	strb	r2, [r3, #3]
			if (HAL_GPIO_ReadPin(R3_PORT, R3_PIN) == GPIO_PIN_RESET) {
 80011a8:	e035      	b.n	8001216 <HAL_TIM_PeriodElapsedCallback+0xe2>
				else clock.days = 0;
 80011aa:	4b83      	ldr	r3, [pc, #524]	; (80013b8 <HAL_TIM_PeriodElapsedCallback+0x284>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	70da      	strb	r2, [r3, #3]
			if (HAL_GPIO_ReadPin(R3_PORT, R3_PIN) == GPIO_PIN_RESET) {
 80011b0:	e031      	b.n	8001216 <HAL_TIM_PeriodElapsedCallback+0xe2>
			}
		}
		else if (counter == 2 || counter == 3){
 80011b2:	4b7f      	ldr	r3, [pc, #508]	; (80013b0 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 80011b4:	781b      	ldrb	r3, [r3, #0]
 80011b6:	2b02      	cmp	r3, #2
 80011b8:	d003      	beq.n	80011c2 <HAL_TIM_PeriodElapsedCallback+0x8e>
 80011ba:	4b7d      	ldr	r3, [pc, #500]	; (80013b0 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 80011bc:	781b      	ldrb	r3, [r3, #0]
 80011be:	2b03      	cmp	r3, #3
 80011c0:	d129      	bne.n	8001216 <HAL_TIM_PeriodElapsedCallback+0xe2>
			if (HAL_GPIO_ReadPin(R4_PORT, R4_PIN) == GPIO_PIN_RESET){
 80011c2:	2110      	movs	r1, #16
 80011c4:	487b      	ldr	r0, [pc, #492]	; (80013b4 <HAL_TIM_PeriodElapsedCallback+0x280>)
 80011c6:	f000 fead 	bl	8001f24 <HAL_GPIO_ReadPin>
 80011ca:	4603      	mov	r3, r0
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d10d      	bne.n	80011ec <HAL_TIM_PeriodElapsedCallback+0xb8>
				if (alarm.hours >= 0 && alarm.hours < 23) ++d.hours;
 80011d0:	4b7a      	ldr	r3, [pc, #488]	; (80013bc <HAL_TIM_PeriodElapsedCallback+0x288>)
 80011d2:	781b      	ldrb	r3, [r3, #0]
 80011d4:	2b16      	cmp	r3, #22
 80011d6:	d806      	bhi.n	80011e6 <HAL_TIM_PeriodElapsedCallback+0xb2>
 80011d8:	4b79      	ldr	r3, [pc, #484]	; (80013c0 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 80011da:	781b      	ldrb	r3, [r3, #0]
 80011dc:	3301      	adds	r3, #1
 80011de:	b2da      	uxtb	r2, r3
 80011e0:	4b77      	ldr	r3, [pc, #476]	; (80013c0 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 80011e2:	701a      	strb	r2, [r3, #0]
 80011e4:	e002      	b.n	80011ec <HAL_TIM_PeriodElapsedCallback+0xb8>
				else d.hours = 0;
 80011e6:	4b76      	ldr	r3, [pc, #472]	; (80013c0 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	701a      	strb	r2, [r3, #0]
			}
			if (HAL_GPIO_ReadPin(R3_PORT, R3_PIN) == GPIO_PIN_RESET){
 80011ec:	2120      	movs	r1, #32
 80011ee:	4871      	ldr	r0, [pc, #452]	; (80013b4 <HAL_TIM_PeriodElapsedCallback+0x280>)
 80011f0:	f000 fe98 	bl	8001f24 <HAL_GPIO_ReadPin>
 80011f4:	4603      	mov	r3, r0
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d10d      	bne.n	8001216 <HAL_TIM_PeriodElapsedCallback+0xe2>
				if (alarm.days >= 0 && alarm.days < 31) ++d.days;
 80011fa:	4b70      	ldr	r3, [pc, #448]	; (80013bc <HAL_TIM_PeriodElapsedCallback+0x288>)
 80011fc:	78db      	ldrb	r3, [r3, #3]
 80011fe:	2b1e      	cmp	r3, #30
 8001200:	d806      	bhi.n	8001210 <HAL_TIM_PeriodElapsedCallback+0xdc>
 8001202:	4b6f      	ldr	r3, [pc, #444]	; (80013c0 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8001204:	78db      	ldrb	r3, [r3, #3]
 8001206:	3301      	adds	r3, #1
 8001208:	b2da      	uxtb	r2, r3
 800120a:	4b6d      	ldr	r3, [pc, #436]	; (80013c0 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 800120c:	70da      	strb	r2, [r3, #3]
 800120e:	e002      	b.n	8001216 <HAL_TIM_PeriodElapsedCallback+0xe2>
				else d.days = 0;
 8001210:	4b6b      	ldr	r3, [pc, #428]	; (80013c0 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8001212:	2200      	movs	r2, #0
 8001214:	70da      	strb	r2, [r3, #3]
			}
		}
		refresh_lcd = 1;
 8001216:	4b6b      	ldr	r3, [pc, #428]	; (80013c4 <HAL_TIM_PeriodElapsedCallback+0x290>)
 8001218:	2201      	movs	r2, #1
 800121a:	701a      	strb	r2, [r3, #0]
		state = true;
 800121c:	4b6a      	ldr	r3, [pc, #424]	; (80013c8 <HAL_TIM_PeriodElapsedCallback+0x294>)
 800121e:	2201      	movs	r2, #1
 8001220:	701a      	strb	r2, [r3, #0]
		HAL_TIM_Base_Stop_IT(&htim1);
 8001222:	486a      	ldr	r0, [pc, #424]	; (80013cc <HAL_TIM_PeriodElapsedCallback+0x298>)
 8001224:	f002 fd5b 	bl	8003cde <HAL_TIM_Base_Stop_IT>
	}

	if(HAL_GPIO_ReadPin(C3_PORT, C3_PIN) == GPIO_PIN_RESET){
 8001228:	2102      	movs	r1, #2
 800122a:	4862      	ldr	r0, [pc, #392]	; (80013b4 <HAL_TIM_PeriodElapsedCallback+0x280>)
 800122c:	f000 fe7a 	bl	8001f24 <HAL_GPIO_ReadPin>
 8001230:	4603      	mov	r3, r0
 8001232:	2b00      	cmp	r3, #0
 8001234:	d16d      	bne.n	8001312 <HAL_TIM_PeriodElapsedCallback+0x1de>
		if (counter == 0 || counter == 1){
 8001236:	4b5e      	ldr	r3, [pc, #376]	; (80013b0 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8001238:	781b      	ldrb	r3, [r3, #0]
 800123a:	2b00      	cmp	r3, #0
 800123c:	d003      	beq.n	8001246 <HAL_TIM_PeriodElapsedCallback+0x112>
 800123e:	4b5c      	ldr	r3, [pc, #368]	; (80013b0 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8001240:	781b      	ldrb	r3, [r3, #0]
 8001242:	2b01      	cmp	r3, #1
 8001244:	d12a      	bne.n	800129c <HAL_TIM_PeriodElapsedCallback+0x168>
			if (HAL_GPIO_ReadPin(R4_PORT, R4_PIN) == GPIO_PIN_RESET){
 8001246:	2110      	movs	r1, #16
 8001248:	485a      	ldr	r0, [pc, #360]	; (80013b4 <HAL_TIM_PeriodElapsedCallback+0x280>)
 800124a:	f000 fe6b 	bl	8001f24 <HAL_GPIO_ReadPin>
 800124e:	4603      	mov	r3, r0
 8001250:	2b00      	cmp	r3, #0
 8001252:	d10d      	bne.n	8001270 <HAL_TIM_PeriodElapsedCallback+0x13c>
				if (clock.minutes >= 0 && clock.minutes < 59) ++clock.minutes;
 8001254:	4b58      	ldr	r3, [pc, #352]	; (80013b8 <HAL_TIM_PeriodElapsedCallback+0x284>)
 8001256:	785b      	ldrb	r3, [r3, #1]
 8001258:	2b3a      	cmp	r3, #58	; 0x3a
 800125a:	d806      	bhi.n	800126a <HAL_TIM_PeriodElapsedCallback+0x136>
 800125c:	4b56      	ldr	r3, [pc, #344]	; (80013b8 <HAL_TIM_PeriodElapsedCallback+0x284>)
 800125e:	785b      	ldrb	r3, [r3, #1]
 8001260:	3301      	adds	r3, #1
 8001262:	b2da      	uxtb	r2, r3
 8001264:	4b54      	ldr	r3, [pc, #336]	; (80013b8 <HAL_TIM_PeriodElapsedCallback+0x284>)
 8001266:	705a      	strb	r2, [r3, #1]
 8001268:	e002      	b.n	8001270 <HAL_TIM_PeriodElapsedCallback+0x13c>
				else clock.minutes = 0;
 800126a:	4b53      	ldr	r3, [pc, #332]	; (80013b8 <HAL_TIM_PeriodElapsedCallback+0x284>)
 800126c:	2200      	movs	r2, #0
 800126e:	705a      	strb	r2, [r3, #1]
			}
			if (HAL_GPIO_ReadPin(R3_PORT, R3_PIN) == GPIO_PIN_RESET){
 8001270:	2120      	movs	r1, #32
 8001272:	4850      	ldr	r0, [pc, #320]	; (80013b4 <HAL_TIM_PeriodElapsedCallback+0x280>)
 8001274:	f000 fe56 	bl	8001f24 <HAL_GPIO_ReadPin>
 8001278:	4603      	mov	r3, r0
 800127a:	2b00      	cmp	r3, #0
 800127c:	d140      	bne.n	8001300 <HAL_TIM_PeriodElapsedCallback+0x1cc>
				if (clock.months >= 0 && clock.months < 12) ++clock.months;
 800127e:	4b4e      	ldr	r3, [pc, #312]	; (80013b8 <HAL_TIM_PeriodElapsedCallback+0x284>)
 8001280:	791b      	ldrb	r3, [r3, #4]
 8001282:	2b0b      	cmp	r3, #11
 8001284:	d806      	bhi.n	8001294 <HAL_TIM_PeriodElapsedCallback+0x160>
 8001286:	4b4c      	ldr	r3, [pc, #304]	; (80013b8 <HAL_TIM_PeriodElapsedCallback+0x284>)
 8001288:	791b      	ldrb	r3, [r3, #4]
 800128a:	3301      	adds	r3, #1
 800128c:	b2da      	uxtb	r2, r3
 800128e:	4b4a      	ldr	r3, [pc, #296]	; (80013b8 <HAL_TIM_PeriodElapsedCallback+0x284>)
 8001290:	711a      	strb	r2, [r3, #4]
			if (HAL_GPIO_ReadPin(R3_PORT, R3_PIN) == GPIO_PIN_RESET){
 8001292:	e035      	b.n	8001300 <HAL_TIM_PeriodElapsedCallback+0x1cc>
				else clock.months = 0;			}
 8001294:	4b48      	ldr	r3, [pc, #288]	; (80013b8 <HAL_TIM_PeriodElapsedCallback+0x284>)
 8001296:	2200      	movs	r2, #0
 8001298:	711a      	strb	r2, [r3, #4]
			if (HAL_GPIO_ReadPin(R3_PORT, R3_PIN) == GPIO_PIN_RESET){
 800129a:	e031      	b.n	8001300 <HAL_TIM_PeriodElapsedCallback+0x1cc>
		}
		else if (counter == 2 || counter == 3){
 800129c:	4b44      	ldr	r3, [pc, #272]	; (80013b0 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 800129e:	781b      	ldrb	r3, [r3, #0]
 80012a0:	2b02      	cmp	r3, #2
 80012a2:	d003      	beq.n	80012ac <HAL_TIM_PeriodElapsedCallback+0x178>
 80012a4:	4b42      	ldr	r3, [pc, #264]	; (80013b0 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 80012a6:	781b      	ldrb	r3, [r3, #0]
 80012a8:	2b03      	cmp	r3, #3
 80012aa:	d129      	bne.n	8001300 <HAL_TIM_PeriodElapsedCallback+0x1cc>
			if (HAL_GPIO_ReadPin(R4_PORT, R4_PIN) == GPIO_PIN_RESET){
 80012ac:	2110      	movs	r1, #16
 80012ae:	4841      	ldr	r0, [pc, #260]	; (80013b4 <HAL_TIM_PeriodElapsedCallback+0x280>)
 80012b0:	f000 fe38 	bl	8001f24 <HAL_GPIO_ReadPin>
 80012b4:	4603      	mov	r3, r0
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d10d      	bne.n	80012d6 <HAL_TIM_PeriodElapsedCallback+0x1a2>
				if (alarm.minutes >= 0 && alarm.minutes < 59) ++d.minutes;
 80012ba:	4b40      	ldr	r3, [pc, #256]	; (80013bc <HAL_TIM_PeriodElapsedCallback+0x288>)
 80012bc:	785b      	ldrb	r3, [r3, #1]
 80012be:	2b3a      	cmp	r3, #58	; 0x3a
 80012c0:	d806      	bhi.n	80012d0 <HAL_TIM_PeriodElapsedCallback+0x19c>
 80012c2:	4b3f      	ldr	r3, [pc, #252]	; (80013c0 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 80012c4:	785b      	ldrb	r3, [r3, #1]
 80012c6:	3301      	adds	r3, #1
 80012c8:	b2da      	uxtb	r2, r3
 80012ca:	4b3d      	ldr	r3, [pc, #244]	; (80013c0 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 80012cc:	705a      	strb	r2, [r3, #1]
 80012ce:	e002      	b.n	80012d6 <HAL_TIM_PeriodElapsedCallback+0x1a2>
				else d.minutes = 0;
 80012d0:	4b3b      	ldr	r3, [pc, #236]	; (80013c0 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	705a      	strb	r2, [r3, #1]
			}
			if (HAL_GPIO_ReadPin(R3_PORT, R3_PIN) == GPIO_PIN_RESET){
 80012d6:	2120      	movs	r1, #32
 80012d8:	4836      	ldr	r0, [pc, #216]	; (80013b4 <HAL_TIM_PeriodElapsedCallback+0x280>)
 80012da:	f000 fe23 	bl	8001f24 <HAL_GPIO_ReadPin>
 80012de:	4603      	mov	r3, r0
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d10d      	bne.n	8001300 <HAL_TIM_PeriodElapsedCallback+0x1cc>
				if (alarm.months >= 0 && alarm.months < 12) ++d.months;
 80012e4:	4b35      	ldr	r3, [pc, #212]	; (80013bc <HAL_TIM_PeriodElapsedCallback+0x288>)
 80012e6:	791b      	ldrb	r3, [r3, #4]
 80012e8:	2b0b      	cmp	r3, #11
 80012ea:	d806      	bhi.n	80012fa <HAL_TIM_PeriodElapsedCallback+0x1c6>
 80012ec:	4b34      	ldr	r3, [pc, #208]	; (80013c0 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 80012ee:	791b      	ldrb	r3, [r3, #4]
 80012f0:	3301      	adds	r3, #1
 80012f2:	b2da      	uxtb	r2, r3
 80012f4:	4b32      	ldr	r3, [pc, #200]	; (80013c0 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 80012f6:	711a      	strb	r2, [r3, #4]
 80012f8:	e002      	b.n	8001300 <HAL_TIM_PeriodElapsedCallback+0x1cc>
				else d.months = 0;
 80012fa:	4b31      	ldr	r3, [pc, #196]	; (80013c0 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	711a      	strb	r2, [r3, #4]
			}
		}
		refresh_lcd = 1;
 8001300:	4b30      	ldr	r3, [pc, #192]	; (80013c4 <HAL_TIM_PeriodElapsedCallback+0x290>)
 8001302:	2201      	movs	r2, #1
 8001304:	701a      	strb	r2, [r3, #0]
		state = true;
 8001306:	4b30      	ldr	r3, [pc, #192]	; (80013c8 <HAL_TIM_PeriodElapsedCallback+0x294>)
 8001308:	2201      	movs	r2, #1
 800130a:	701a      	strb	r2, [r3, #0]
		HAL_TIM_Base_Stop_IT(&htim1);
 800130c:	482f      	ldr	r0, [pc, #188]	; (80013cc <HAL_TIM_PeriodElapsedCallback+0x298>)
 800130e:	f002 fce6 	bl	8003cde <HAL_TIM_Base_Stop_IT>
	}

	if (HAL_GPIO_ReadPin(C2_PORT, C2_PIN) == GPIO_PIN_RESET){
 8001312:	2104      	movs	r1, #4
 8001314:	4827      	ldr	r0, [pc, #156]	; (80013b4 <HAL_TIM_PeriodElapsedCallback+0x280>)
 8001316:	f000 fe05 	bl	8001f24 <HAL_GPIO_ReadPin>
 800131a:	4603      	mov	r3, r0
 800131c:	2b00      	cmp	r3, #0
 800131e:	d170      	bne.n	8001402 <HAL_TIM_PeriodElapsedCallback+0x2ce>
		if (counter == 0 || counter == 1){
 8001320:	4b23      	ldr	r3, [pc, #140]	; (80013b0 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8001322:	781b      	ldrb	r3, [r3, #0]
 8001324:	2b00      	cmp	r3, #0
 8001326:	d003      	beq.n	8001330 <HAL_TIM_PeriodElapsedCallback+0x1fc>
 8001328:	4b21      	ldr	r3, [pc, #132]	; (80013b0 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 800132a:	781b      	ldrb	r3, [r3, #0]
 800132c:	2b01      	cmp	r3, #1
 800132e:	d122      	bne.n	8001376 <HAL_TIM_PeriodElapsedCallback+0x242>
			if (HAL_GPIO_ReadPin(R4_PORT, R4_PIN) == GPIO_PIN_RESET){
 8001330:	2110      	movs	r1, #16
 8001332:	4820      	ldr	r0, [pc, #128]	; (80013b4 <HAL_TIM_PeriodElapsedCallback+0x280>)
 8001334:	f000 fdf6 	bl	8001f24 <HAL_GPIO_ReadPin>
 8001338:	4603      	mov	r3, r0
 800133a:	2b00      	cmp	r3, #0
 800133c:	d10d      	bne.n	800135a <HAL_TIM_PeriodElapsedCallback+0x226>
				if (clock.seconds >= 0 && clock.seconds < 59) ++clock.seconds;
 800133e:	4b1e      	ldr	r3, [pc, #120]	; (80013b8 <HAL_TIM_PeriodElapsedCallback+0x284>)
 8001340:	789b      	ldrb	r3, [r3, #2]
 8001342:	2b3a      	cmp	r3, #58	; 0x3a
 8001344:	d806      	bhi.n	8001354 <HAL_TIM_PeriodElapsedCallback+0x220>
 8001346:	4b1c      	ldr	r3, [pc, #112]	; (80013b8 <HAL_TIM_PeriodElapsedCallback+0x284>)
 8001348:	789b      	ldrb	r3, [r3, #2]
 800134a:	3301      	adds	r3, #1
 800134c:	b2da      	uxtb	r2, r3
 800134e:	4b1a      	ldr	r3, [pc, #104]	; (80013b8 <HAL_TIM_PeriodElapsedCallback+0x284>)
 8001350:	709a      	strb	r2, [r3, #2]
 8001352:	e002      	b.n	800135a <HAL_TIM_PeriodElapsedCallback+0x226>
				else clock.seconds = 0;
 8001354:	4b18      	ldr	r3, [pc, #96]	; (80013b8 <HAL_TIM_PeriodElapsedCallback+0x284>)
 8001356:	2200      	movs	r2, #0
 8001358:	709a      	strb	r2, [r3, #2]
			}
			if (HAL_GPIO_ReadPin(R3_PORT, R3_PIN) == GPIO_PIN_RESET){
 800135a:	2120      	movs	r1, #32
 800135c:	4815      	ldr	r0, [pc, #84]	; (80013b4 <HAL_TIM_PeriodElapsedCallback+0x280>)
 800135e:	f000 fde1 	bl	8001f24 <HAL_GPIO_ReadPin>
 8001362:	4603      	mov	r3, r0
 8001364:	2b00      	cmp	r3, #0
 8001366:	d143      	bne.n	80013f0 <HAL_TIM_PeriodElapsedCallback+0x2bc>
				++clock.years;
 8001368:	4b13      	ldr	r3, [pc, #76]	; (80013b8 <HAL_TIM_PeriodElapsedCallback+0x284>)
 800136a:	795b      	ldrb	r3, [r3, #5]
 800136c:	3301      	adds	r3, #1
 800136e:	b2da      	uxtb	r2, r3
 8001370:	4b11      	ldr	r3, [pc, #68]	; (80013b8 <HAL_TIM_PeriodElapsedCallback+0x284>)
 8001372:	715a      	strb	r2, [r3, #5]
			if (HAL_GPIO_ReadPin(R3_PORT, R3_PIN) == GPIO_PIN_RESET){
 8001374:	e03c      	b.n	80013f0 <HAL_TIM_PeriodElapsedCallback+0x2bc>
			}
		}
		else if (counter == 2 || counter == 3){
 8001376:	4b0e      	ldr	r3, [pc, #56]	; (80013b0 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8001378:	781b      	ldrb	r3, [r3, #0]
 800137a:	2b02      	cmp	r3, #2
 800137c:	d003      	beq.n	8001386 <HAL_TIM_PeriodElapsedCallback+0x252>
 800137e:	4b0c      	ldr	r3, [pc, #48]	; (80013b0 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8001380:	781b      	ldrb	r3, [r3, #0]
 8001382:	2b03      	cmp	r3, #3
 8001384:	d134      	bne.n	80013f0 <HAL_TIM_PeriodElapsedCallback+0x2bc>
			if (HAL_GPIO_ReadPin(R4_PORT, R4_PIN) == GPIO_PIN_RESET){
 8001386:	2110      	movs	r1, #16
 8001388:	480a      	ldr	r0, [pc, #40]	; (80013b4 <HAL_TIM_PeriodElapsedCallback+0x280>)
 800138a:	f000 fdcb 	bl	8001f24 <HAL_GPIO_ReadPin>
 800138e:	4603      	mov	r3, r0
 8001390:	2b00      	cmp	r3, #0
 8001392:	d120      	bne.n	80013d6 <HAL_TIM_PeriodElapsedCallback+0x2a2>
				if (alarm.seconds >= 0 && alarm.seconds < 59) ++d.seconds;
 8001394:	4b09      	ldr	r3, [pc, #36]	; (80013bc <HAL_TIM_PeriodElapsedCallback+0x288>)
 8001396:	789b      	ldrb	r3, [r3, #2]
 8001398:	2b3a      	cmp	r3, #58	; 0x3a
 800139a:	d819      	bhi.n	80013d0 <HAL_TIM_PeriodElapsedCallback+0x29c>
 800139c:	4b08      	ldr	r3, [pc, #32]	; (80013c0 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 800139e:	789b      	ldrb	r3, [r3, #2]
 80013a0:	3301      	adds	r3, #1
 80013a2:	b2da      	uxtb	r2, r3
 80013a4:	4b06      	ldr	r3, [pc, #24]	; (80013c0 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 80013a6:	709a      	strb	r2, [r3, #2]
 80013a8:	e015      	b.n	80013d6 <HAL_TIM_PeriodElapsedCallback+0x2a2>
 80013aa:	bf00      	nop
 80013ac:	40020800 	.word	0x40020800
 80013b0:	20000090 	.word	0x20000090
 80013b4:	40020c00 	.word	0x40020c00
 80013b8:	2000011c 	.word	0x2000011c
 80013bc:	20000108 	.word	0x20000108
 80013c0:	20000114 	.word	0x20000114
 80013c4:	20000000 	.word	0x20000000
 80013c8:	20000002 	.word	0x20000002
 80013cc:	20000168 	.word	0x20000168
				else d.seconds = 0;
 80013d0:	4b1b      	ldr	r3, [pc, #108]	; (8001440 <HAL_TIM_PeriodElapsedCallback+0x30c>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	709a      	strb	r2, [r3, #2]
			}
			if (HAL_GPIO_ReadPin(R3_PORT, R3_PIN) == GPIO_PIN_RESET) {
 80013d6:	2120      	movs	r1, #32
 80013d8:	481a      	ldr	r0, [pc, #104]	; (8001444 <HAL_TIM_PeriodElapsedCallback+0x310>)
 80013da:	f000 fda3 	bl	8001f24 <HAL_GPIO_ReadPin>
 80013de:	4603      	mov	r3, r0
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d105      	bne.n	80013f0 <HAL_TIM_PeriodElapsedCallback+0x2bc>
				++d.years;
 80013e4:	4b16      	ldr	r3, [pc, #88]	; (8001440 <HAL_TIM_PeriodElapsedCallback+0x30c>)
 80013e6:	795b      	ldrb	r3, [r3, #5]
 80013e8:	3301      	adds	r3, #1
 80013ea:	b2da      	uxtb	r2, r3
 80013ec:	4b14      	ldr	r3, [pc, #80]	; (8001440 <HAL_TIM_PeriodElapsedCallback+0x30c>)
 80013ee:	715a      	strb	r2, [r3, #5]
			}
		}
		refresh_lcd = 1;
 80013f0:	4b15      	ldr	r3, [pc, #84]	; (8001448 <HAL_TIM_PeriodElapsedCallback+0x314>)
 80013f2:	2201      	movs	r2, #1
 80013f4:	701a      	strb	r2, [r3, #0]
		state = true;
 80013f6:	4b15      	ldr	r3, [pc, #84]	; (800144c <HAL_TIM_PeriodElapsedCallback+0x318>)
 80013f8:	2201      	movs	r2, #1
 80013fa:	701a      	strb	r2, [r3, #0]
		HAL_TIM_Base_Stop_IT(&htim1);
 80013fc:	4814      	ldr	r0, [pc, #80]	; (8001450 <HAL_TIM_PeriodElapsedCallback+0x31c>)
 80013fe:	f002 fc6e 	bl	8003cde <HAL_TIM_Base_Stop_IT>
	}
	if (HAL_GPIO_ReadPin(C1_PORT, C1_PIN) == GPIO_PIN_RESET){
 8001402:	2108      	movs	r1, #8
 8001404:	480f      	ldr	r0, [pc, #60]	; (8001444 <HAL_TIM_PeriodElapsedCallback+0x310>)
 8001406:	f000 fd8d 	bl	8001f24 <HAL_GPIO_ReadPin>
 800140a:	4603      	mov	r3, r0
 800140c:	2b00      	cmp	r3, #0
 800140e:	d113      	bne.n	8001438 <HAL_TIM_PeriodElapsedCallback+0x304>
		HAL_GPIO_TogglePin(R4_PORT, R4_PIN);
 8001410:	2110      	movs	r1, #16
 8001412:	480c      	ldr	r0, [pc, #48]	; (8001444 <HAL_TIM_PeriodElapsedCallback+0x310>)
 8001414:	f000 fdb7 	bl	8001f86 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(R3_PORT, R3_PIN);
 8001418:	2120      	movs	r1, #32
 800141a:	480a      	ldr	r0, [pc, #40]	; (8001444 <HAL_TIM_PeriodElapsedCallback+0x310>)
 800141c:	f000 fdb3 	bl	8001f86 <HAL_GPIO_TogglePin>
		counter++;
 8001420:	4b0c      	ldr	r3, [pc, #48]	; (8001454 <HAL_TIM_PeriodElapsedCallback+0x320>)
 8001422:	781b      	ldrb	r3, [r3, #0]
 8001424:	3301      	adds	r3, #1
 8001426:	b2da      	uxtb	r2, r3
 8001428:	4b0a      	ldr	r3, [pc, #40]	; (8001454 <HAL_TIM_PeriodElapsedCallback+0x320>)
 800142a:	701a      	strb	r2, [r3, #0]
		state = true;
 800142c:	4b07      	ldr	r3, [pc, #28]	; (800144c <HAL_TIM_PeriodElapsedCallback+0x318>)
 800142e:	2201      	movs	r2, #1
 8001430:	701a      	strb	r2, [r3, #0]
		HAL_TIM_Base_Stop_IT(&htim1);
 8001432:	4807      	ldr	r0, [pc, #28]	; (8001450 <HAL_TIM_PeriodElapsedCallback+0x31c>)
 8001434:	f002 fc53 	bl	8003cde <HAL_TIM_Base_Stop_IT>
	}
}
 8001438:	bf00      	nop
 800143a:	3708      	adds	r7, #8
 800143c:	46bd      	mov	sp, r7
 800143e:	bd80      	pop	{r7, pc}
 8001440:	20000114 	.word	0x20000114
 8001444:	40020c00 	.word	0x40020c00
 8001448:	20000000 	.word	0x20000000
 800144c:	20000002 	.word	0x20000002
 8001450:	20000168 	.word	0x20000168
 8001454:	20000090 	.word	0x20000090

08001458 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001458:	b480      	push	{r7}
 800145a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800145c:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800145e:	e7fe      	b.n	800145e <Error_Handler+0x6>

08001460 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b090      	sub	sp, #64	; 0x40
 8001464:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef sTime = {0};
 8001466:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800146a:	2200      	movs	r2, #0
 800146c:	601a      	str	r2, [r3, #0]
 800146e:	605a      	str	r2, [r3, #4]
 8001470:	609a      	str	r2, [r3, #8]
 8001472:	60da      	str	r2, [r3, #12]
 8001474:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001476:	2300      	movs	r3, #0
 8001478:	62bb      	str	r3, [r7, #40]	; 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 800147a:	463b      	mov	r3, r7
 800147c:	2228      	movs	r2, #40	; 0x28
 800147e:	2100      	movs	r1, #0
 8001480:	4618      	mov	r0, r3
 8001482:	f003 f833 	bl	80044ec <memset>

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001486:	4b3a      	ldr	r3, [pc, #232]	; (8001570 <MX_RTC_Init+0x110>)
 8001488:	4a3a      	ldr	r2, [pc, #232]	; (8001574 <MX_RTC_Init+0x114>)
 800148a:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800148c:	4b38      	ldr	r3, [pc, #224]	; (8001570 <MX_RTC_Init+0x110>)
 800148e:	2200      	movs	r2, #0
 8001490:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001492:	4b37      	ldr	r3, [pc, #220]	; (8001570 <MX_RTC_Init+0x110>)
 8001494:	227f      	movs	r2, #127	; 0x7f
 8001496:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001498:	4b35      	ldr	r3, [pc, #212]	; (8001570 <MX_RTC_Init+0x110>)
 800149a:	22ff      	movs	r2, #255	; 0xff
 800149c:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800149e:	4b34      	ldr	r3, [pc, #208]	; (8001570 <MX_RTC_Init+0x110>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80014a4:	4b32      	ldr	r3, [pc, #200]	; (8001570 <MX_RTC_Init+0x110>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80014aa:	4b31      	ldr	r3, [pc, #196]	; (8001570 <MX_RTC_Init+0x110>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80014b0:	482f      	ldr	r0, [pc, #188]	; (8001570 <MX_RTC_Init+0x110>)
 80014b2:	f001 ff0b 	bl	80032cc <HAL_RTC_Init>
 80014b6:	4603      	mov	r3, r0
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d001      	beq.n	80014c0 <MX_RTC_Init+0x60>
  {
    Error_Handler();
 80014bc:	f7ff ffcc 	bl	8001458 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0;
 80014c0:	2300      	movs	r3, #0
 80014c2:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sTime.Minutes = 50;
 80014c6:	2332      	movs	r3, #50	; 0x32
 80014c8:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sTime.Seconds = 0;
 80014cc:	2300      	movs	r3, #0
 80014ce:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80014d2:	2300      	movs	r3, #0
 80014d4:	63bb      	str	r3, [r7, #56]	; 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80014d6:	2300      	movs	r3, #0
 80014d8:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 80014da:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80014de:	2200      	movs	r2, #0
 80014e0:	4619      	mov	r1, r3
 80014e2:	4823      	ldr	r0, [pc, #140]	; (8001570 <MX_RTC_Init+0x110>)
 80014e4:	f001 ff83 	bl	80033ee <HAL_RTC_SetTime>
 80014e8:	4603      	mov	r3, r0
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d001      	beq.n	80014f2 <MX_RTC_Init+0x92>
  {
    Error_Handler();
 80014ee:	f7ff ffb3 	bl	8001458 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80014f2:	2301      	movs	r3, #1
 80014f4:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sDate.Month = RTC_MONTH_JANUARY;
 80014f8:	2301      	movs	r3, #1
 80014fa:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  sDate.Date = 1;
 80014fe:	2301      	movs	r3, #1
 8001500:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  sDate.Year = 0;
 8001504:	2300      	movs	r3, #0
 8001506:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 800150a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800150e:	2200      	movs	r2, #0
 8001510:	4619      	mov	r1, r3
 8001512:	4817      	ldr	r0, [pc, #92]	; (8001570 <MX_RTC_Init+0x110>)
 8001514:	f002 f886 	bl	8003624 <HAL_RTC_SetDate>
 8001518:	4603      	mov	r3, r0
 800151a:	2b00      	cmp	r3, #0
 800151c:	d001      	beq.n	8001522 <MX_RTC_Init+0xc2>
  {
    Error_Handler();
 800151e:	f7ff ff9b 	bl	8001458 <Error_Handler>
  }
  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0;
 8001522:	2300      	movs	r3, #0
 8001524:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0;
 8001526:	2300      	movs	r3, #0
 8001528:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0;
 800152a:	2300      	movs	r3, #0
 800152c:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0;
 800152e:	2300      	movs	r3, #0
 8001530:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001532:	2300      	movs	r3, #0
 8001534:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001536:	2300      	movs	r3, #0
 8001538:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 800153a:	2300      	movs	r3, #0
 800153c:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 800153e:	2300      	movs	r3, #0
 8001540:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8001542:	2300      	movs	r3, #0
 8001544:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 1;
 8001546:	2301      	movs	r3, #1
 8001548:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 800154c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001550:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 8001552:	463b      	mov	r3, r7
 8001554:	2200      	movs	r2, #0
 8001556:	4619      	mov	r1, r3
 8001558:	4805      	ldr	r0, [pc, #20]	; (8001570 <MX_RTC_Init+0x110>)
 800155a:	f002 f959 	bl	8003810 <HAL_RTC_SetAlarm_IT>
 800155e:	4603      	mov	r3, r0
 8001560:	2b00      	cmp	r3, #0
 8001562:	d001      	beq.n	8001568 <MX_RTC_Init+0x108>
  {
    Error_Handler();
 8001564:	f7ff ff78 	bl	8001458 <Error_Handler>
  }

}
 8001568:	bf00      	nop
 800156a:	3740      	adds	r7, #64	; 0x40
 800156c:	46bd      	mov	sp, r7
 800156e:	bd80      	pop	{r7, pc}
 8001570:	20000148 	.word	0x20000148
 8001574:	40002800 	.word	0x40002800

08001578 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b082      	sub	sp, #8
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	4a08      	ldr	r2, [pc, #32]	; (80015a8 <HAL_RTC_MspInit+0x30>)
 8001586:	4293      	cmp	r3, r2
 8001588:	d10a      	bne.n	80015a0 <HAL_RTC_MspInit+0x28>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 800158a:	4b08      	ldr	r3, [pc, #32]	; (80015ac <HAL_RTC_MspInit+0x34>)
 800158c:	2201      	movs	r2, #1
 800158e:	601a      	str	r2, [r3, #0]

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8001590:	2200      	movs	r2, #0
 8001592:	2100      	movs	r1, #0
 8001594:	2029      	movs	r0, #41	; 0x29
 8001596:	f000 faf4 	bl	8001b82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 800159a:	2029      	movs	r0, #41	; 0x29
 800159c:	f000 fb0d 	bl	8001bba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80015a0:	bf00      	nop
 80015a2:	3708      	adds	r7, #8
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bd80      	pop	{r7, pc}
 80015a8:	40002800 	.word	0x40002800
 80015ac:	42470e3c 	.word	0x42470e3c

080015b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015b0:	b480      	push	{r7}
 80015b2:	b083      	sub	sp, #12
 80015b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015b6:	2300      	movs	r3, #0
 80015b8:	607b      	str	r3, [r7, #4]
 80015ba:	4b10      	ldr	r3, [pc, #64]	; (80015fc <HAL_MspInit+0x4c>)
 80015bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015be:	4a0f      	ldr	r2, [pc, #60]	; (80015fc <HAL_MspInit+0x4c>)
 80015c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015c4:	6453      	str	r3, [r2, #68]	; 0x44
 80015c6:	4b0d      	ldr	r3, [pc, #52]	; (80015fc <HAL_MspInit+0x4c>)
 80015c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015ce:	607b      	str	r3, [r7, #4]
 80015d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015d2:	2300      	movs	r3, #0
 80015d4:	603b      	str	r3, [r7, #0]
 80015d6:	4b09      	ldr	r3, [pc, #36]	; (80015fc <HAL_MspInit+0x4c>)
 80015d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015da:	4a08      	ldr	r2, [pc, #32]	; (80015fc <HAL_MspInit+0x4c>)
 80015dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015e0:	6413      	str	r3, [r2, #64]	; 0x40
 80015e2:	4b06      	ldr	r3, [pc, #24]	; (80015fc <HAL_MspInit+0x4c>)
 80015e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015ea:	603b      	str	r3, [r7, #0]
 80015ec:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015ee:	bf00      	nop
 80015f0:	370c      	adds	r7, #12
 80015f2:	46bd      	mov	sp, r7
 80015f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f8:	4770      	bx	lr
 80015fa:	bf00      	nop
 80015fc:	40023800 	.word	0x40023800

08001600 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001600:	b480      	push	{r7}
 8001602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001604:	e7fe      	b.n	8001604 <NMI_Handler+0x4>

08001606 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001606:	b480      	push	{r7}
 8001608:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800160a:	e7fe      	b.n	800160a <HardFault_Handler+0x4>

0800160c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800160c:	b480      	push	{r7}
 800160e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001610:	e7fe      	b.n	8001610 <MemManage_Handler+0x4>

08001612 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001612:	b480      	push	{r7}
 8001614:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001616:	e7fe      	b.n	8001616 <BusFault_Handler+0x4>

08001618 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001618:	b480      	push	{r7}
 800161a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800161c:	e7fe      	b.n	800161c <UsageFault_Handler+0x4>

0800161e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800161e:	b480      	push	{r7}
 8001620:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001622:	bf00      	nop
 8001624:	46bd      	mov	sp, r7
 8001626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162a:	4770      	bx	lr

0800162c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800162c:	b480      	push	{r7}
 800162e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001630:	bf00      	nop
 8001632:	46bd      	mov	sp, r7
 8001634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001638:	4770      	bx	lr

0800163a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800163a:	b480      	push	{r7}
 800163c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800163e:	bf00      	nop
 8001640:	46bd      	mov	sp, r7
 8001642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001646:	4770      	bx	lr

08001648 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800164c:	f000 f97c 	bl	8001948 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001650:	bf00      	nop
 8001652:	bd80      	pop	{r7, pc}

08001654 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8001658:	2001      	movs	r0, #1
 800165a:	f000 fcaf 	bl	8001fbc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800165e:	bf00      	nop
 8001660:	bd80      	pop	{r7, pc}

08001662 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001662:	b580      	push	{r7, lr}
 8001664:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8001666:	2002      	movs	r0, #2
 8001668:	f000 fca8 	bl	8001fbc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 800166c:	bf00      	nop
 800166e:	bd80      	pop	{r7, pc}

08001670 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8001674:	2004      	movs	r0, #4
 8001676:	f000 fca1 	bl	8001fbc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 800167a:	bf00      	nop
 800167c:	bd80      	pop	{r7, pc}

0800167e <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 800167e:	b580      	push	{r7, lr}
 8001680:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8001682:	2008      	movs	r0, #8
 8001684:	f000 fc9a 	bl	8001fbc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8001688:	bf00      	nop
 800168a:	bd80      	pop	{r7, pc}

0800168c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001690:	4802      	ldr	r0, [pc, #8]	; (800169c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001692:	f002 fb4f 	bl	8003d34 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001696:	bf00      	nop
 8001698:	bd80      	pop	{r7, pc}
 800169a:	bf00      	nop
 800169c:	20000168 	.word	0x20000168

080016a0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 80016a4:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80016a8:	f000 fc88 	bl	8001fbc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80016ac:	bf00      	nop
 80016ae:	bd80      	pop	{r7, pc}

080016b0 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarms A and B interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 80016b4:	4802      	ldr	r0, [pc, #8]	; (80016c0 <RTC_Alarm_IRQHandler+0x10>)
 80016b6:	f002 f9e3 	bl	8003a80 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 80016ba:	bf00      	nop
 80016bc:	bd80      	pop	{r7, pc}
 80016be:	bf00      	nop
 80016c0:	20000148 	.word	0x20000148

080016c4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b086      	sub	sp, #24
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80016cc:	4a14      	ldr	r2, [pc, #80]	; (8001720 <_sbrk+0x5c>)
 80016ce:	4b15      	ldr	r3, [pc, #84]	; (8001724 <_sbrk+0x60>)
 80016d0:	1ad3      	subs	r3, r2, r3
 80016d2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80016d4:	697b      	ldr	r3, [r7, #20]
 80016d6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80016d8:	4b13      	ldr	r3, [pc, #76]	; (8001728 <_sbrk+0x64>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d102      	bne.n	80016e6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80016e0:	4b11      	ldr	r3, [pc, #68]	; (8001728 <_sbrk+0x64>)
 80016e2:	4a12      	ldr	r2, [pc, #72]	; (800172c <_sbrk+0x68>)
 80016e4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80016e6:	4b10      	ldr	r3, [pc, #64]	; (8001728 <_sbrk+0x64>)
 80016e8:	681a      	ldr	r2, [r3, #0]
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	4413      	add	r3, r2
 80016ee:	693a      	ldr	r2, [r7, #16]
 80016f0:	429a      	cmp	r2, r3
 80016f2:	d207      	bcs.n	8001704 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80016f4:	f002 fed0 	bl	8004498 <__errno>
 80016f8:	4602      	mov	r2, r0
 80016fa:	230c      	movs	r3, #12
 80016fc:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80016fe:	f04f 33ff 	mov.w	r3, #4294967295
 8001702:	e009      	b.n	8001718 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001704:	4b08      	ldr	r3, [pc, #32]	; (8001728 <_sbrk+0x64>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800170a:	4b07      	ldr	r3, [pc, #28]	; (8001728 <_sbrk+0x64>)
 800170c:	681a      	ldr	r2, [r3, #0]
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	4413      	add	r3, r2
 8001712:	4a05      	ldr	r2, [pc, #20]	; (8001728 <_sbrk+0x64>)
 8001714:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001716:	68fb      	ldr	r3, [r7, #12]
}
 8001718:	4618      	mov	r0, r3
 800171a:	3718      	adds	r7, #24
 800171c:	46bd      	mov	sp, r7
 800171e:	bd80      	pop	{r7, pc}
 8001720:	20020000 	.word	0x20020000
 8001724:	00000400 	.word	0x00000400
 8001728:	20000094 	.word	0x20000094
 800172c:	200001b0 	.word	0x200001b0

08001730 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001730:	b480      	push	{r7}
 8001732:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001734:	4b08      	ldr	r3, [pc, #32]	; (8001758 <SystemInit+0x28>)
 8001736:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800173a:	4a07      	ldr	r2, [pc, #28]	; (8001758 <SystemInit+0x28>)
 800173c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001740:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001744:	4b04      	ldr	r3, [pc, #16]	; (8001758 <SystemInit+0x28>)
 8001746:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800174a:	609a      	str	r2, [r3, #8]
#endif
}
 800174c:	bf00      	nop
 800174e:	46bd      	mov	sp, r7
 8001750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001754:	4770      	bx	lr
 8001756:	bf00      	nop
 8001758:	e000ed00 	.word	0xe000ed00

0800175c <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b086      	sub	sp, #24
 8001760:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001762:	f107 0308 	add.w	r3, r7, #8
 8001766:	2200      	movs	r2, #0
 8001768:	601a      	str	r2, [r3, #0]
 800176a:	605a      	str	r2, [r3, #4]
 800176c:	609a      	str	r2, [r3, #8]
 800176e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001770:	463b      	mov	r3, r7
 8001772:	2200      	movs	r2, #0
 8001774:	601a      	str	r2, [r3, #0]
 8001776:	605a      	str	r2, [r3, #4]

  htim1.Instance = TIM1;
 8001778:	4b1f      	ldr	r3, [pc, #124]	; (80017f8 <MX_TIM1_Init+0x9c>)
 800177a:	4a20      	ldr	r2, [pc, #128]	; (80017fc <MX_TIM1_Init+0xa0>)
 800177c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 3359;
 800177e:	4b1e      	ldr	r3, [pc, #120]	; (80017f8 <MX_TIM1_Init+0x9c>)
 8001780:	f640 521f 	movw	r2, #3359	; 0xd1f
 8001784:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001786:	4b1c      	ldr	r3, [pc, #112]	; (80017f8 <MX_TIM1_Init+0x9c>)
 8001788:	2200      	movs	r2, #0
 800178a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 800178c:	4b1a      	ldr	r3, [pc, #104]	; (80017f8 <MX_TIM1_Init+0x9c>)
 800178e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001792:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001794:	4b18      	ldr	r3, [pc, #96]	; (80017f8 <MX_TIM1_Init+0x9c>)
 8001796:	2200      	movs	r2, #0
 8001798:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 1;
 800179a:	4b17      	ldr	r3, [pc, #92]	; (80017f8 <MX_TIM1_Init+0x9c>)
 800179c:	2201      	movs	r2, #1
 800179e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80017a0:	4b15      	ldr	r3, [pc, #84]	; (80017f8 <MX_TIM1_Init+0x9c>)
 80017a2:	2280      	movs	r2, #128	; 0x80
 80017a4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80017a6:	4814      	ldr	r0, [pc, #80]	; (80017f8 <MX_TIM1_Init+0x9c>)
 80017a8:	f002 fa4a 	bl	8003c40 <HAL_TIM_Base_Init>
 80017ac:	4603      	mov	r3, r0
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d001      	beq.n	80017b6 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 80017b2:	f7ff fe51 	bl	8001458 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017ba:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80017bc:	f107 0308 	add.w	r3, r7, #8
 80017c0:	4619      	mov	r1, r3
 80017c2:	480d      	ldr	r0, [pc, #52]	; (80017f8 <MX_TIM1_Init+0x9c>)
 80017c4:	f002 fbbe 	bl	8003f44 <HAL_TIM_ConfigClockSource>
 80017c8:	4603      	mov	r3, r0
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d001      	beq.n	80017d2 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 80017ce:	f7ff fe43 	bl	8001458 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017d2:	2300      	movs	r3, #0
 80017d4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017d6:	2300      	movs	r3, #0
 80017d8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80017da:	463b      	mov	r3, r7
 80017dc:	4619      	mov	r1, r3
 80017de:	4806      	ldr	r0, [pc, #24]	; (80017f8 <MX_TIM1_Init+0x9c>)
 80017e0:	f002 fdca 	bl	8004378 <HAL_TIMEx_MasterConfigSynchronization>
 80017e4:	4603      	mov	r3, r0
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d001      	beq.n	80017ee <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 80017ea:	f7ff fe35 	bl	8001458 <Error_Handler>
  }

}
 80017ee:	bf00      	nop
 80017f0:	3718      	adds	r7, #24
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bd80      	pop	{r7, pc}
 80017f6:	bf00      	nop
 80017f8:	20000168 	.word	0x20000168
 80017fc:	40010000 	.word	0x40010000

08001800 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b084      	sub	sp, #16
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	4a0e      	ldr	r2, [pc, #56]	; (8001848 <HAL_TIM_Base_MspInit+0x48>)
 800180e:	4293      	cmp	r3, r2
 8001810:	d115      	bne.n	800183e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001812:	2300      	movs	r3, #0
 8001814:	60fb      	str	r3, [r7, #12]
 8001816:	4b0d      	ldr	r3, [pc, #52]	; (800184c <HAL_TIM_Base_MspInit+0x4c>)
 8001818:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800181a:	4a0c      	ldr	r2, [pc, #48]	; (800184c <HAL_TIM_Base_MspInit+0x4c>)
 800181c:	f043 0301 	orr.w	r3, r3, #1
 8001820:	6453      	str	r3, [r2, #68]	; 0x44
 8001822:	4b0a      	ldr	r3, [pc, #40]	; (800184c <HAL_TIM_Base_MspInit+0x4c>)
 8001824:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001826:	f003 0301 	and.w	r3, r3, #1
 800182a:	60fb      	str	r3, [r7, #12]
 800182c:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 800182e:	2200      	movs	r2, #0
 8001830:	2100      	movs	r1, #0
 8001832:	2019      	movs	r0, #25
 8001834:	f000 f9a5 	bl	8001b82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001838:	2019      	movs	r0, #25
 800183a:	f000 f9be 	bl	8001bba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 800183e:	bf00      	nop
 8001840:	3710      	adds	r7, #16
 8001842:	46bd      	mov	sp, r7
 8001844:	bd80      	pop	{r7, pc}
 8001846:	bf00      	nop
 8001848:	40010000 	.word	0x40010000
 800184c:	40023800 	.word	0x40023800

08001850 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001850:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001888 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001854:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001856:	e003      	b.n	8001860 <LoopCopyDataInit>

08001858 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001858:	4b0c      	ldr	r3, [pc, #48]	; (800188c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800185a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800185c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800185e:	3104      	adds	r1, #4

08001860 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001860:	480b      	ldr	r0, [pc, #44]	; (8001890 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001862:	4b0c      	ldr	r3, [pc, #48]	; (8001894 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001864:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001866:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001868:	d3f6      	bcc.n	8001858 <CopyDataInit>
  ldr  r2, =_sbss
 800186a:	4a0b      	ldr	r2, [pc, #44]	; (8001898 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800186c:	e002      	b.n	8001874 <LoopFillZerobss>

0800186e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800186e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001870:	f842 3b04 	str.w	r3, [r2], #4

08001874 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001874:	4b09      	ldr	r3, [pc, #36]	; (800189c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001876:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001878:	d3f9      	bcc.n	800186e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800187a:	f7ff ff59 	bl	8001730 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800187e:	f002 fe11 	bl	80044a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001882:	f7ff fa27 	bl	8000cd4 <main>
  bx  lr    
 8001886:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001888:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800188c:	08004e18 	.word	0x08004e18
  ldr  r0, =_sdata
 8001890:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001894:	20000074 	.word	0x20000074
  ldr  r2, =_sbss
 8001898:	20000074 	.word	0x20000074
  ldr  r3, = _ebss
 800189c:	200001b0 	.word	0x200001b0

080018a0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80018a0:	e7fe      	b.n	80018a0 <ADC_IRQHandler>
	...

080018a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80018a8:	4b0e      	ldr	r3, [pc, #56]	; (80018e4 <HAL_Init+0x40>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	4a0d      	ldr	r2, [pc, #52]	; (80018e4 <HAL_Init+0x40>)
 80018ae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80018b2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80018b4:	4b0b      	ldr	r3, [pc, #44]	; (80018e4 <HAL_Init+0x40>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	4a0a      	ldr	r2, [pc, #40]	; (80018e4 <HAL_Init+0x40>)
 80018ba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80018be:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80018c0:	4b08      	ldr	r3, [pc, #32]	; (80018e4 <HAL_Init+0x40>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	4a07      	ldr	r2, [pc, #28]	; (80018e4 <HAL_Init+0x40>)
 80018c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018ca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018cc:	2003      	movs	r0, #3
 80018ce:	f000 f94d 	bl	8001b6c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80018d2:	2000      	movs	r0, #0
 80018d4:	f000 f808 	bl	80018e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80018d8:	f7ff fe6a 	bl	80015b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80018dc:	2300      	movs	r3, #0
}
 80018de:	4618      	mov	r0, r3
 80018e0:	bd80      	pop	{r7, pc}
 80018e2:	bf00      	nop
 80018e4:	40023c00 	.word	0x40023c00

080018e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b082      	sub	sp, #8
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80018f0:	4b12      	ldr	r3, [pc, #72]	; (800193c <HAL_InitTick+0x54>)
 80018f2:	681a      	ldr	r2, [r3, #0]
 80018f4:	4b12      	ldr	r3, [pc, #72]	; (8001940 <HAL_InitTick+0x58>)
 80018f6:	781b      	ldrb	r3, [r3, #0]
 80018f8:	4619      	mov	r1, r3
 80018fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8001902:	fbb2 f3f3 	udiv	r3, r2, r3
 8001906:	4618      	mov	r0, r3
 8001908:	f000 f965 	bl	8001bd6 <HAL_SYSTICK_Config>
 800190c:	4603      	mov	r3, r0
 800190e:	2b00      	cmp	r3, #0
 8001910:	d001      	beq.n	8001916 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001912:	2301      	movs	r3, #1
 8001914:	e00e      	b.n	8001934 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	2b0f      	cmp	r3, #15
 800191a:	d80a      	bhi.n	8001932 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800191c:	2200      	movs	r2, #0
 800191e:	6879      	ldr	r1, [r7, #4]
 8001920:	f04f 30ff 	mov.w	r0, #4294967295
 8001924:	f000 f92d 	bl	8001b82 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001928:	4a06      	ldr	r2, [pc, #24]	; (8001944 <HAL_InitTick+0x5c>)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800192e:	2300      	movs	r3, #0
 8001930:	e000      	b.n	8001934 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001932:	2301      	movs	r3, #1
}
 8001934:	4618      	mov	r0, r3
 8001936:	3708      	adds	r7, #8
 8001938:	46bd      	mov	sp, r7
 800193a:	bd80      	pop	{r7, pc}
 800193c:	20000004 	.word	0x20000004
 8001940:	2000000c 	.word	0x2000000c
 8001944:	20000008 	.word	0x20000008

08001948 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001948:	b480      	push	{r7}
 800194a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800194c:	4b06      	ldr	r3, [pc, #24]	; (8001968 <HAL_IncTick+0x20>)
 800194e:	781b      	ldrb	r3, [r3, #0]
 8001950:	461a      	mov	r2, r3
 8001952:	4b06      	ldr	r3, [pc, #24]	; (800196c <HAL_IncTick+0x24>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	4413      	add	r3, r2
 8001958:	4a04      	ldr	r2, [pc, #16]	; (800196c <HAL_IncTick+0x24>)
 800195a:	6013      	str	r3, [r2, #0]
}
 800195c:	bf00      	nop
 800195e:	46bd      	mov	sp, r7
 8001960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001964:	4770      	bx	lr
 8001966:	bf00      	nop
 8001968:	2000000c 	.word	0x2000000c
 800196c:	200001a8 	.word	0x200001a8

08001970 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001970:	b480      	push	{r7}
 8001972:	af00      	add	r7, sp, #0
  return uwTick;
 8001974:	4b03      	ldr	r3, [pc, #12]	; (8001984 <HAL_GetTick+0x14>)
 8001976:	681b      	ldr	r3, [r3, #0]
}
 8001978:	4618      	mov	r0, r3
 800197a:	46bd      	mov	sp, r7
 800197c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001980:	4770      	bx	lr
 8001982:	bf00      	nop
 8001984:	200001a8 	.word	0x200001a8

08001988 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b084      	sub	sp, #16
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001990:	f7ff ffee 	bl	8001970 <HAL_GetTick>
 8001994:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019a0:	d005      	beq.n	80019ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80019a2:	4b09      	ldr	r3, [pc, #36]	; (80019c8 <HAL_Delay+0x40>)
 80019a4:	781b      	ldrb	r3, [r3, #0]
 80019a6:	461a      	mov	r2, r3
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	4413      	add	r3, r2
 80019ac:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80019ae:	bf00      	nop
 80019b0:	f7ff ffde 	bl	8001970 <HAL_GetTick>
 80019b4:	4602      	mov	r2, r0
 80019b6:	68bb      	ldr	r3, [r7, #8]
 80019b8:	1ad3      	subs	r3, r2, r3
 80019ba:	68fa      	ldr	r2, [r7, #12]
 80019bc:	429a      	cmp	r2, r3
 80019be:	d8f7      	bhi.n	80019b0 <HAL_Delay+0x28>
  {
  }
}
 80019c0:	bf00      	nop
 80019c2:	3710      	adds	r7, #16
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bd80      	pop	{r7, pc}
 80019c8:	2000000c 	.word	0x2000000c

080019cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019cc:	b480      	push	{r7}
 80019ce:	b085      	sub	sp, #20
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	f003 0307 	and.w	r3, r3, #7
 80019da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019dc:	4b0c      	ldr	r3, [pc, #48]	; (8001a10 <__NVIC_SetPriorityGrouping+0x44>)
 80019de:	68db      	ldr	r3, [r3, #12]
 80019e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019e2:	68ba      	ldr	r2, [r7, #8]
 80019e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80019e8:	4013      	ands	r3, r2
 80019ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019f0:	68bb      	ldr	r3, [r7, #8]
 80019f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019f4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80019f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019fe:	4a04      	ldr	r2, [pc, #16]	; (8001a10 <__NVIC_SetPriorityGrouping+0x44>)
 8001a00:	68bb      	ldr	r3, [r7, #8]
 8001a02:	60d3      	str	r3, [r2, #12]
}
 8001a04:	bf00      	nop
 8001a06:	3714      	adds	r7, #20
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0e:	4770      	bx	lr
 8001a10:	e000ed00 	.word	0xe000ed00

08001a14 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a14:	b480      	push	{r7}
 8001a16:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a18:	4b04      	ldr	r3, [pc, #16]	; (8001a2c <__NVIC_GetPriorityGrouping+0x18>)
 8001a1a:	68db      	ldr	r3, [r3, #12]
 8001a1c:	0a1b      	lsrs	r3, r3, #8
 8001a1e:	f003 0307 	and.w	r3, r3, #7
}
 8001a22:	4618      	mov	r0, r3
 8001a24:	46bd      	mov	sp, r7
 8001a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2a:	4770      	bx	lr
 8001a2c:	e000ed00 	.word	0xe000ed00

08001a30 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a30:	b480      	push	{r7}
 8001a32:	b083      	sub	sp, #12
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	4603      	mov	r3, r0
 8001a38:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	db0b      	blt.n	8001a5a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a42:	79fb      	ldrb	r3, [r7, #7]
 8001a44:	f003 021f 	and.w	r2, r3, #31
 8001a48:	4907      	ldr	r1, [pc, #28]	; (8001a68 <__NVIC_EnableIRQ+0x38>)
 8001a4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a4e:	095b      	lsrs	r3, r3, #5
 8001a50:	2001      	movs	r0, #1
 8001a52:	fa00 f202 	lsl.w	r2, r0, r2
 8001a56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001a5a:	bf00      	nop
 8001a5c:	370c      	adds	r7, #12
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a64:	4770      	bx	lr
 8001a66:	bf00      	nop
 8001a68:	e000e100 	.word	0xe000e100

08001a6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	b083      	sub	sp, #12
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	4603      	mov	r3, r0
 8001a74:	6039      	str	r1, [r7, #0]
 8001a76:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	db0a      	blt.n	8001a96 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	b2da      	uxtb	r2, r3
 8001a84:	490c      	ldr	r1, [pc, #48]	; (8001ab8 <__NVIC_SetPriority+0x4c>)
 8001a86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a8a:	0112      	lsls	r2, r2, #4
 8001a8c:	b2d2      	uxtb	r2, r2
 8001a8e:	440b      	add	r3, r1
 8001a90:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a94:	e00a      	b.n	8001aac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	b2da      	uxtb	r2, r3
 8001a9a:	4908      	ldr	r1, [pc, #32]	; (8001abc <__NVIC_SetPriority+0x50>)
 8001a9c:	79fb      	ldrb	r3, [r7, #7]
 8001a9e:	f003 030f 	and.w	r3, r3, #15
 8001aa2:	3b04      	subs	r3, #4
 8001aa4:	0112      	lsls	r2, r2, #4
 8001aa6:	b2d2      	uxtb	r2, r2
 8001aa8:	440b      	add	r3, r1
 8001aaa:	761a      	strb	r2, [r3, #24]
}
 8001aac:	bf00      	nop
 8001aae:	370c      	adds	r7, #12
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab6:	4770      	bx	lr
 8001ab8:	e000e100 	.word	0xe000e100
 8001abc:	e000ed00 	.word	0xe000ed00

08001ac0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	b089      	sub	sp, #36	; 0x24
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	60f8      	str	r0, [r7, #12]
 8001ac8:	60b9      	str	r1, [r7, #8]
 8001aca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	f003 0307 	and.w	r3, r3, #7
 8001ad2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ad4:	69fb      	ldr	r3, [r7, #28]
 8001ad6:	f1c3 0307 	rsb	r3, r3, #7
 8001ada:	2b04      	cmp	r3, #4
 8001adc:	bf28      	it	cs
 8001ade:	2304      	movcs	r3, #4
 8001ae0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ae2:	69fb      	ldr	r3, [r7, #28]
 8001ae4:	3304      	adds	r3, #4
 8001ae6:	2b06      	cmp	r3, #6
 8001ae8:	d902      	bls.n	8001af0 <NVIC_EncodePriority+0x30>
 8001aea:	69fb      	ldr	r3, [r7, #28]
 8001aec:	3b03      	subs	r3, #3
 8001aee:	e000      	b.n	8001af2 <NVIC_EncodePriority+0x32>
 8001af0:	2300      	movs	r3, #0
 8001af2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001af4:	f04f 32ff 	mov.w	r2, #4294967295
 8001af8:	69bb      	ldr	r3, [r7, #24]
 8001afa:	fa02 f303 	lsl.w	r3, r2, r3
 8001afe:	43da      	mvns	r2, r3
 8001b00:	68bb      	ldr	r3, [r7, #8]
 8001b02:	401a      	ands	r2, r3
 8001b04:	697b      	ldr	r3, [r7, #20]
 8001b06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b08:	f04f 31ff 	mov.w	r1, #4294967295
 8001b0c:	697b      	ldr	r3, [r7, #20]
 8001b0e:	fa01 f303 	lsl.w	r3, r1, r3
 8001b12:	43d9      	mvns	r1, r3
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b18:	4313      	orrs	r3, r2
         );
}
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	3724      	adds	r7, #36	; 0x24
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b24:	4770      	bx	lr
	...

08001b28 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b082      	sub	sp, #8
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	3b01      	subs	r3, #1
 8001b34:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b38:	d301      	bcc.n	8001b3e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b3a:	2301      	movs	r3, #1
 8001b3c:	e00f      	b.n	8001b5e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b3e:	4a0a      	ldr	r2, [pc, #40]	; (8001b68 <SysTick_Config+0x40>)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	3b01      	subs	r3, #1
 8001b44:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b46:	210f      	movs	r1, #15
 8001b48:	f04f 30ff 	mov.w	r0, #4294967295
 8001b4c:	f7ff ff8e 	bl	8001a6c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b50:	4b05      	ldr	r3, [pc, #20]	; (8001b68 <SysTick_Config+0x40>)
 8001b52:	2200      	movs	r2, #0
 8001b54:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b56:	4b04      	ldr	r3, [pc, #16]	; (8001b68 <SysTick_Config+0x40>)
 8001b58:	2207      	movs	r2, #7
 8001b5a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b5c:	2300      	movs	r3, #0
}
 8001b5e:	4618      	mov	r0, r3
 8001b60:	3708      	adds	r7, #8
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bd80      	pop	{r7, pc}
 8001b66:	bf00      	nop
 8001b68:	e000e010 	.word	0xe000e010

08001b6c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b082      	sub	sp, #8
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b74:	6878      	ldr	r0, [r7, #4]
 8001b76:	f7ff ff29 	bl	80019cc <__NVIC_SetPriorityGrouping>
}
 8001b7a:	bf00      	nop
 8001b7c:	3708      	adds	r7, #8
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bd80      	pop	{r7, pc}

08001b82 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b82:	b580      	push	{r7, lr}
 8001b84:	b086      	sub	sp, #24
 8001b86:	af00      	add	r7, sp, #0
 8001b88:	4603      	mov	r3, r0
 8001b8a:	60b9      	str	r1, [r7, #8]
 8001b8c:	607a      	str	r2, [r7, #4]
 8001b8e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b90:	2300      	movs	r3, #0
 8001b92:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b94:	f7ff ff3e 	bl	8001a14 <__NVIC_GetPriorityGrouping>
 8001b98:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b9a:	687a      	ldr	r2, [r7, #4]
 8001b9c:	68b9      	ldr	r1, [r7, #8]
 8001b9e:	6978      	ldr	r0, [r7, #20]
 8001ba0:	f7ff ff8e 	bl	8001ac0 <NVIC_EncodePriority>
 8001ba4:	4602      	mov	r2, r0
 8001ba6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001baa:	4611      	mov	r1, r2
 8001bac:	4618      	mov	r0, r3
 8001bae:	f7ff ff5d 	bl	8001a6c <__NVIC_SetPriority>
}
 8001bb2:	bf00      	nop
 8001bb4:	3718      	adds	r7, #24
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}

08001bba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bba:	b580      	push	{r7, lr}
 8001bbc:	b082      	sub	sp, #8
 8001bbe:	af00      	add	r7, sp, #0
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001bc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bc8:	4618      	mov	r0, r3
 8001bca:	f7ff ff31 	bl	8001a30 <__NVIC_EnableIRQ>
}
 8001bce:	bf00      	nop
 8001bd0:	3708      	adds	r7, #8
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bd80      	pop	{r7, pc}

08001bd6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001bd6:	b580      	push	{r7, lr}
 8001bd8:	b082      	sub	sp, #8
 8001bda:	af00      	add	r7, sp, #0
 8001bdc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001bde:	6878      	ldr	r0, [r7, #4]
 8001be0:	f7ff ffa2 	bl	8001b28 <SysTick_Config>
 8001be4:	4603      	mov	r3, r0
}
 8001be6:	4618      	mov	r0, r3
 8001be8:	3708      	adds	r7, #8
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bd80      	pop	{r7, pc}
	...

08001bf0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	b089      	sub	sp, #36	; 0x24
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
 8001bf8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001bfe:	2300      	movs	r3, #0
 8001c00:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001c02:	2300      	movs	r3, #0
 8001c04:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c06:	2300      	movs	r3, #0
 8001c08:	61fb      	str	r3, [r7, #28]
 8001c0a:	e16b      	b.n	8001ee4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001c0c:	2201      	movs	r2, #1
 8001c0e:	69fb      	ldr	r3, [r7, #28]
 8001c10:	fa02 f303 	lsl.w	r3, r2, r3
 8001c14:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	697a      	ldr	r2, [r7, #20]
 8001c1c:	4013      	ands	r3, r2
 8001c1e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001c20:	693a      	ldr	r2, [r7, #16]
 8001c22:	697b      	ldr	r3, [r7, #20]
 8001c24:	429a      	cmp	r2, r3
 8001c26:	f040 815a 	bne.w	8001ede <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	685b      	ldr	r3, [r3, #4]
 8001c2e:	2b01      	cmp	r3, #1
 8001c30:	d00b      	beq.n	8001c4a <HAL_GPIO_Init+0x5a>
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	685b      	ldr	r3, [r3, #4]
 8001c36:	2b02      	cmp	r3, #2
 8001c38:	d007      	beq.n	8001c4a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001c3e:	2b11      	cmp	r3, #17
 8001c40:	d003      	beq.n	8001c4a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	685b      	ldr	r3, [r3, #4]
 8001c46:	2b12      	cmp	r3, #18
 8001c48:	d130      	bne.n	8001cac <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	689b      	ldr	r3, [r3, #8]
 8001c4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001c50:	69fb      	ldr	r3, [r7, #28]
 8001c52:	005b      	lsls	r3, r3, #1
 8001c54:	2203      	movs	r2, #3
 8001c56:	fa02 f303 	lsl.w	r3, r2, r3
 8001c5a:	43db      	mvns	r3, r3
 8001c5c:	69ba      	ldr	r2, [r7, #24]
 8001c5e:	4013      	ands	r3, r2
 8001c60:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	68da      	ldr	r2, [r3, #12]
 8001c66:	69fb      	ldr	r3, [r7, #28]
 8001c68:	005b      	lsls	r3, r3, #1
 8001c6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c6e:	69ba      	ldr	r2, [r7, #24]
 8001c70:	4313      	orrs	r3, r2
 8001c72:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	69ba      	ldr	r2, [r7, #24]
 8001c78:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	685b      	ldr	r3, [r3, #4]
 8001c7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001c80:	2201      	movs	r2, #1
 8001c82:	69fb      	ldr	r3, [r7, #28]
 8001c84:	fa02 f303 	lsl.w	r3, r2, r3
 8001c88:	43db      	mvns	r3, r3
 8001c8a:	69ba      	ldr	r2, [r7, #24]
 8001c8c:	4013      	ands	r3, r2
 8001c8e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	091b      	lsrs	r3, r3, #4
 8001c96:	f003 0201 	and.w	r2, r3, #1
 8001c9a:	69fb      	ldr	r3, [r7, #28]
 8001c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca0:	69ba      	ldr	r2, [r7, #24]
 8001ca2:	4313      	orrs	r3, r2
 8001ca4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	69ba      	ldr	r2, [r7, #24]
 8001caa:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	68db      	ldr	r3, [r3, #12]
 8001cb0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001cb2:	69fb      	ldr	r3, [r7, #28]
 8001cb4:	005b      	lsls	r3, r3, #1
 8001cb6:	2203      	movs	r2, #3
 8001cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cbc:	43db      	mvns	r3, r3
 8001cbe:	69ba      	ldr	r2, [r7, #24]
 8001cc0:	4013      	ands	r3, r2
 8001cc2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	689a      	ldr	r2, [r3, #8]
 8001cc8:	69fb      	ldr	r3, [r7, #28]
 8001cca:	005b      	lsls	r3, r3, #1
 8001ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd0:	69ba      	ldr	r2, [r7, #24]
 8001cd2:	4313      	orrs	r3, r2
 8001cd4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	69ba      	ldr	r2, [r7, #24]
 8001cda:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	685b      	ldr	r3, [r3, #4]
 8001ce0:	2b02      	cmp	r3, #2
 8001ce2:	d003      	beq.n	8001cec <HAL_GPIO_Init+0xfc>
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	685b      	ldr	r3, [r3, #4]
 8001ce8:	2b12      	cmp	r3, #18
 8001cea:	d123      	bne.n	8001d34 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001cec:	69fb      	ldr	r3, [r7, #28]
 8001cee:	08da      	lsrs	r2, r3, #3
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	3208      	adds	r2, #8
 8001cf4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001cf8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001cfa:	69fb      	ldr	r3, [r7, #28]
 8001cfc:	f003 0307 	and.w	r3, r3, #7
 8001d00:	009b      	lsls	r3, r3, #2
 8001d02:	220f      	movs	r2, #15
 8001d04:	fa02 f303 	lsl.w	r3, r2, r3
 8001d08:	43db      	mvns	r3, r3
 8001d0a:	69ba      	ldr	r2, [r7, #24]
 8001d0c:	4013      	ands	r3, r2
 8001d0e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	691a      	ldr	r2, [r3, #16]
 8001d14:	69fb      	ldr	r3, [r7, #28]
 8001d16:	f003 0307 	and.w	r3, r3, #7
 8001d1a:	009b      	lsls	r3, r3, #2
 8001d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d20:	69ba      	ldr	r2, [r7, #24]
 8001d22:	4313      	orrs	r3, r2
 8001d24:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001d26:	69fb      	ldr	r3, [r7, #28]
 8001d28:	08da      	lsrs	r2, r3, #3
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	3208      	adds	r2, #8
 8001d2e:	69b9      	ldr	r1, [r7, #24]
 8001d30:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001d3a:	69fb      	ldr	r3, [r7, #28]
 8001d3c:	005b      	lsls	r3, r3, #1
 8001d3e:	2203      	movs	r2, #3
 8001d40:	fa02 f303 	lsl.w	r3, r2, r3
 8001d44:	43db      	mvns	r3, r3
 8001d46:	69ba      	ldr	r2, [r7, #24]
 8001d48:	4013      	ands	r3, r2
 8001d4a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	685b      	ldr	r3, [r3, #4]
 8001d50:	f003 0203 	and.w	r2, r3, #3
 8001d54:	69fb      	ldr	r3, [r7, #28]
 8001d56:	005b      	lsls	r3, r3, #1
 8001d58:	fa02 f303 	lsl.w	r3, r2, r3
 8001d5c:	69ba      	ldr	r2, [r7, #24]
 8001d5e:	4313      	orrs	r3, r2
 8001d60:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	69ba      	ldr	r2, [r7, #24]
 8001d66:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	685b      	ldr	r3, [r3, #4]
 8001d6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	f000 80b4 	beq.w	8001ede <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d76:	2300      	movs	r3, #0
 8001d78:	60fb      	str	r3, [r7, #12]
 8001d7a:	4b5f      	ldr	r3, [pc, #380]	; (8001ef8 <HAL_GPIO_Init+0x308>)
 8001d7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d7e:	4a5e      	ldr	r2, [pc, #376]	; (8001ef8 <HAL_GPIO_Init+0x308>)
 8001d80:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d84:	6453      	str	r3, [r2, #68]	; 0x44
 8001d86:	4b5c      	ldr	r3, [pc, #368]	; (8001ef8 <HAL_GPIO_Init+0x308>)
 8001d88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d8e:	60fb      	str	r3, [r7, #12]
 8001d90:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001d92:	4a5a      	ldr	r2, [pc, #360]	; (8001efc <HAL_GPIO_Init+0x30c>)
 8001d94:	69fb      	ldr	r3, [r7, #28]
 8001d96:	089b      	lsrs	r3, r3, #2
 8001d98:	3302      	adds	r3, #2
 8001d9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001da0:	69fb      	ldr	r3, [r7, #28]
 8001da2:	f003 0303 	and.w	r3, r3, #3
 8001da6:	009b      	lsls	r3, r3, #2
 8001da8:	220f      	movs	r2, #15
 8001daa:	fa02 f303 	lsl.w	r3, r2, r3
 8001dae:	43db      	mvns	r3, r3
 8001db0:	69ba      	ldr	r2, [r7, #24]
 8001db2:	4013      	ands	r3, r2
 8001db4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	4a51      	ldr	r2, [pc, #324]	; (8001f00 <HAL_GPIO_Init+0x310>)
 8001dba:	4293      	cmp	r3, r2
 8001dbc:	d02b      	beq.n	8001e16 <HAL_GPIO_Init+0x226>
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	4a50      	ldr	r2, [pc, #320]	; (8001f04 <HAL_GPIO_Init+0x314>)
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	d025      	beq.n	8001e12 <HAL_GPIO_Init+0x222>
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	4a4f      	ldr	r2, [pc, #316]	; (8001f08 <HAL_GPIO_Init+0x318>)
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	d01f      	beq.n	8001e0e <HAL_GPIO_Init+0x21e>
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	4a4e      	ldr	r2, [pc, #312]	; (8001f0c <HAL_GPIO_Init+0x31c>)
 8001dd2:	4293      	cmp	r3, r2
 8001dd4:	d019      	beq.n	8001e0a <HAL_GPIO_Init+0x21a>
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	4a4d      	ldr	r2, [pc, #308]	; (8001f10 <HAL_GPIO_Init+0x320>)
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	d013      	beq.n	8001e06 <HAL_GPIO_Init+0x216>
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	4a4c      	ldr	r2, [pc, #304]	; (8001f14 <HAL_GPIO_Init+0x324>)
 8001de2:	4293      	cmp	r3, r2
 8001de4:	d00d      	beq.n	8001e02 <HAL_GPIO_Init+0x212>
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	4a4b      	ldr	r2, [pc, #300]	; (8001f18 <HAL_GPIO_Init+0x328>)
 8001dea:	4293      	cmp	r3, r2
 8001dec:	d007      	beq.n	8001dfe <HAL_GPIO_Init+0x20e>
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	4a4a      	ldr	r2, [pc, #296]	; (8001f1c <HAL_GPIO_Init+0x32c>)
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d101      	bne.n	8001dfa <HAL_GPIO_Init+0x20a>
 8001df6:	2307      	movs	r3, #7
 8001df8:	e00e      	b.n	8001e18 <HAL_GPIO_Init+0x228>
 8001dfa:	2308      	movs	r3, #8
 8001dfc:	e00c      	b.n	8001e18 <HAL_GPIO_Init+0x228>
 8001dfe:	2306      	movs	r3, #6
 8001e00:	e00a      	b.n	8001e18 <HAL_GPIO_Init+0x228>
 8001e02:	2305      	movs	r3, #5
 8001e04:	e008      	b.n	8001e18 <HAL_GPIO_Init+0x228>
 8001e06:	2304      	movs	r3, #4
 8001e08:	e006      	b.n	8001e18 <HAL_GPIO_Init+0x228>
 8001e0a:	2303      	movs	r3, #3
 8001e0c:	e004      	b.n	8001e18 <HAL_GPIO_Init+0x228>
 8001e0e:	2302      	movs	r3, #2
 8001e10:	e002      	b.n	8001e18 <HAL_GPIO_Init+0x228>
 8001e12:	2301      	movs	r3, #1
 8001e14:	e000      	b.n	8001e18 <HAL_GPIO_Init+0x228>
 8001e16:	2300      	movs	r3, #0
 8001e18:	69fa      	ldr	r2, [r7, #28]
 8001e1a:	f002 0203 	and.w	r2, r2, #3
 8001e1e:	0092      	lsls	r2, r2, #2
 8001e20:	4093      	lsls	r3, r2
 8001e22:	69ba      	ldr	r2, [r7, #24]
 8001e24:	4313      	orrs	r3, r2
 8001e26:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001e28:	4934      	ldr	r1, [pc, #208]	; (8001efc <HAL_GPIO_Init+0x30c>)
 8001e2a:	69fb      	ldr	r3, [r7, #28]
 8001e2c:	089b      	lsrs	r3, r3, #2
 8001e2e:	3302      	adds	r3, #2
 8001e30:	69ba      	ldr	r2, [r7, #24]
 8001e32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e36:	4b3a      	ldr	r3, [pc, #232]	; (8001f20 <HAL_GPIO_Init+0x330>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e3c:	693b      	ldr	r3, [r7, #16]
 8001e3e:	43db      	mvns	r3, r3
 8001e40:	69ba      	ldr	r2, [r7, #24]
 8001e42:	4013      	ands	r3, r2
 8001e44:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	685b      	ldr	r3, [r3, #4]
 8001e4a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d003      	beq.n	8001e5a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001e52:	69ba      	ldr	r2, [r7, #24]
 8001e54:	693b      	ldr	r3, [r7, #16]
 8001e56:	4313      	orrs	r3, r2
 8001e58:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001e5a:	4a31      	ldr	r2, [pc, #196]	; (8001f20 <HAL_GPIO_Init+0x330>)
 8001e5c:	69bb      	ldr	r3, [r7, #24]
 8001e5e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001e60:	4b2f      	ldr	r3, [pc, #188]	; (8001f20 <HAL_GPIO_Init+0x330>)
 8001e62:	685b      	ldr	r3, [r3, #4]
 8001e64:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e66:	693b      	ldr	r3, [r7, #16]
 8001e68:	43db      	mvns	r3, r3
 8001e6a:	69ba      	ldr	r2, [r7, #24]
 8001e6c:	4013      	ands	r3, r2
 8001e6e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	685b      	ldr	r3, [r3, #4]
 8001e74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d003      	beq.n	8001e84 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001e7c:	69ba      	ldr	r2, [r7, #24]
 8001e7e:	693b      	ldr	r3, [r7, #16]
 8001e80:	4313      	orrs	r3, r2
 8001e82:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001e84:	4a26      	ldr	r2, [pc, #152]	; (8001f20 <HAL_GPIO_Init+0x330>)
 8001e86:	69bb      	ldr	r3, [r7, #24]
 8001e88:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001e8a:	4b25      	ldr	r3, [pc, #148]	; (8001f20 <HAL_GPIO_Init+0x330>)
 8001e8c:	689b      	ldr	r3, [r3, #8]
 8001e8e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e90:	693b      	ldr	r3, [r7, #16]
 8001e92:	43db      	mvns	r3, r3
 8001e94:	69ba      	ldr	r2, [r7, #24]
 8001e96:	4013      	ands	r3, r2
 8001e98:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	685b      	ldr	r3, [r3, #4]
 8001e9e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d003      	beq.n	8001eae <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001ea6:	69ba      	ldr	r2, [r7, #24]
 8001ea8:	693b      	ldr	r3, [r7, #16]
 8001eaa:	4313      	orrs	r3, r2
 8001eac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001eae:	4a1c      	ldr	r2, [pc, #112]	; (8001f20 <HAL_GPIO_Init+0x330>)
 8001eb0:	69bb      	ldr	r3, [r7, #24]
 8001eb2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001eb4:	4b1a      	ldr	r3, [pc, #104]	; (8001f20 <HAL_GPIO_Init+0x330>)
 8001eb6:	68db      	ldr	r3, [r3, #12]
 8001eb8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001eba:	693b      	ldr	r3, [r7, #16]
 8001ebc:	43db      	mvns	r3, r3
 8001ebe:	69ba      	ldr	r2, [r7, #24]
 8001ec0:	4013      	ands	r3, r2
 8001ec2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	685b      	ldr	r3, [r3, #4]
 8001ec8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d003      	beq.n	8001ed8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001ed0:	69ba      	ldr	r2, [r7, #24]
 8001ed2:	693b      	ldr	r3, [r7, #16]
 8001ed4:	4313      	orrs	r3, r2
 8001ed6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001ed8:	4a11      	ldr	r2, [pc, #68]	; (8001f20 <HAL_GPIO_Init+0x330>)
 8001eda:	69bb      	ldr	r3, [r7, #24]
 8001edc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ede:	69fb      	ldr	r3, [r7, #28]
 8001ee0:	3301      	adds	r3, #1
 8001ee2:	61fb      	str	r3, [r7, #28]
 8001ee4:	69fb      	ldr	r3, [r7, #28]
 8001ee6:	2b0f      	cmp	r3, #15
 8001ee8:	f67f ae90 	bls.w	8001c0c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001eec:	bf00      	nop
 8001eee:	3724      	adds	r7, #36	; 0x24
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef6:	4770      	bx	lr
 8001ef8:	40023800 	.word	0x40023800
 8001efc:	40013800 	.word	0x40013800
 8001f00:	40020000 	.word	0x40020000
 8001f04:	40020400 	.word	0x40020400
 8001f08:	40020800 	.word	0x40020800
 8001f0c:	40020c00 	.word	0x40020c00
 8001f10:	40021000 	.word	0x40021000
 8001f14:	40021400 	.word	0x40021400
 8001f18:	40021800 	.word	0x40021800
 8001f1c:	40021c00 	.word	0x40021c00
 8001f20:	40013c00 	.word	0x40013c00

08001f24 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001f24:	b480      	push	{r7}
 8001f26:	b085      	sub	sp, #20
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
 8001f2c:	460b      	mov	r3, r1
 8001f2e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	691a      	ldr	r2, [r3, #16]
 8001f34:	887b      	ldrh	r3, [r7, #2]
 8001f36:	4013      	ands	r3, r2
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d002      	beq.n	8001f42 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001f3c:	2301      	movs	r3, #1
 8001f3e:	73fb      	strb	r3, [r7, #15]
 8001f40:	e001      	b.n	8001f46 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001f42:	2300      	movs	r3, #0
 8001f44:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001f46:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f48:	4618      	mov	r0, r3
 8001f4a:	3714      	adds	r7, #20
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f52:	4770      	bx	lr

08001f54 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f54:	b480      	push	{r7}
 8001f56:	b083      	sub	sp, #12
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
 8001f5c:	460b      	mov	r3, r1
 8001f5e:	807b      	strh	r3, [r7, #2]
 8001f60:	4613      	mov	r3, r2
 8001f62:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f64:	787b      	ldrb	r3, [r7, #1]
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d003      	beq.n	8001f72 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f6a:	887a      	ldrh	r2, [r7, #2]
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001f70:	e003      	b.n	8001f7a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001f72:	887b      	ldrh	r3, [r7, #2]
 8001f74:	041a      	lsls	r2, r3, #16
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	619a      	str	r2, [r3, #24]
}
 8001f7a:	bf00      	nop
 8001f7c:	370c      	adds	r7, #12
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f84:	4770      	bx	lr

08001f86 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001f86:	b480      	push	{r7}
 8001f88:	b083      	sub	sp, #12
 8001f8a:	af00      	add	r7, sp, #0
 8001f8c:	6078      	str	r0, [r7, #4]
 8001f8e:	460b      	mov	r3, r1
 8001f90:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	695a      	ldr	r2, [r3, #20]
 8001f96:	887b      	ldrh	r3, [r7, #2]
 8001f98:	401a      	ands	r2, r3
 8001f9a:	887b      	ldrh	r3, [r7, #2]
 8001f9c:	429a      	cmp	r2, r3
 8001f9e:	d104      	bne.n	8001faa <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001fa0:	887b      	ldrh	r3, [r7, #2]
 8001fa2:	041a      	lsls	r2, r3, #16
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8001fa8:	e002      	b.n	8001fb0 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8001faa:	887a      	ldrh	r2, [r7, #2]
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	619a      	str	r2, [r3, #24]
}
 8001fb0:	bf00      	nop
 8001fb2:	370c      	adds	r7, #12
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fba:	4770      	bx	lr

08001fbc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b082      	sub	sp, #8
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001fc6:	4b08      	ldr	r3, [pc, #32]	; (8001fe8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001fc8:	695a      	ldr	r2, [r3, #20]
 8001fca:	88fb      	ldrh	r3, [r7, #6]
 8001fcc:	4013      	ands	r3, r2
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d006      	beq.n	8001fe0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001fd2:	4a05      	ldr	r2, [pc, #20]	; (8001fe8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001fd4:	88fb      	ldrh	r3, [r7, #6]
 8001fd6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001fd8:	88fb      	ldrh	r3, [r7, #6]
 8001fda:	4618      	mov	r0, r3
 8001fdc:	f7ff f870 	bl	80010c0 <HAL_GPIO_EXTI_Callback>
  }
}
 8001fe0:	bf00      	nop
 8001fe2:	3708      	adds	r7, #8
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	bd80      	pop	{r7, pc}
 8001fe8:	40013c00 	.word	0x40013c00

08001fec <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b084      	sub	sp, #16
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d101      	bne.n	8001ffe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	e11f      	b.n	800223e <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002004:	b2db      	uxtb	r3, r3
 8002006:	2b00      	cmp	r3, #0
 8002008:	d106      	bne.n	8002018 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	2200      	movs	r2, #0
 800200e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002012:	6878      	ldr	r0, [r7, #4]
 8002014:	f7fe fb9c 	bl	8000750 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	2224      	movs	r2, #36	; 0x24
 800201c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	681a      	ldr	r2, [r3, #0]
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f022 0201 	bic.w	r2, r2, #1
 800202e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	681a      	ldr	r2, [r3, #0]
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800203e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	681a      	ldr	r2, [r3, #0]
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800204e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002050:	f001 f846 	bl	80030e0 <HAL_RCC_GetPCLK1Freq>
 8002054:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	685b      	ldr	r3, [r3, #4]
 800205a:	4a7b      	ldr	r2, [pc, #492]	; (8002248 <HAL_I2C_Init+0x25c>)
 800205c:	4293      	cmp	r3, r2
 800205e:	d807      	bhi.n	8002070 <HAL_I2C_Init+0x84>
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	4a7a      	ldr	r2, [pc, #488]	; (800224c <HAL_I2C_Init+0x260>)
 8002064:	4293      	cmp	r3, r2
 8002066:	bf94      	ite	ls
 8002068:	2301      	movls	r3, #1
 800206a:	2300      	movhi	r3, #0
 800206c:	b2db      	uxtb	r3, r3
 800206e:	e006      	b.n	800207e <HAL_I2C_Init+0x92>
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	4a77      	ldr	r2, [pc, #476]	; (8002250 <HAL_I2C_Init+0x264>)
 8002074:	4293      	cmp	r3, r2
 8002076:	bf94      	ite	ls
 8002078:	2301      	movls	r3, #1
 800207a:	2300      	movhi	r3, #0
 800207c:	b2db      	uxtb	r3, r3
 800207e:	2b00      	cmp	r3, #0
 8002080:	d001      	beq.n	8002086 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002082:	2301      	movs	r3, #1
 8002084:	e0db      	b.n	800223e <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	4a72      	ldr	r2, [pc, #456]	; (8002254 <HAL_I2C_Init+0x268>)
 800208a:	fba2 2303 	umull	r2, r3, r2, r3
 800208e:	0c9b      	lsrs	r3, r3, #18
 8002090:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	685b      	ldr	r3, [r3, #4]
 8002098:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	68ba      	ldr	r2, [r7, #8]
 80020a2:	430a      	orrs	r2, r1
 80020a4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	6a1b      	ldr	r3, [r3, #32]
 80020ac:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	4a64      	ldr	r2, [pc, #400]	; (8002248 <HAL_I2C_Init+0x25c>)
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d802      	bhi.n	80020c0 <HAL_I2C_Init+0xd4>
 80020ba:	68bb      	ldr	r3, [r7, #8]
 80020bc:	3301      	adds	r3, #1
 80020be:	e009      	b.n	80020d4 <HAL_I2C_Init+0xe8>
 80020c0:	68bb      	ldr	r3, [r7, #8]
 80020c2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80020c6:	fb02 f303 	mul.w	r3, r2, r3
 80020ca:	4a63      	ldr	r2, [pc, #396]	; (8002258 <HAL_I2C_Init+0x26c>)
 80020cc:	fba2 2303 	umull	r2, r3, r2, r3
 80020d0:	099b      	lsrs	r3, r3, #6
 80020d2:	3301      	adds	r3, #1
 80020d4:	687a      	ldr	r2, [r7, #4]
 80020d6:	6812      	ldr	r2, [r2, #0]
 80020d8:	430b      	orrs	r3, r1
 80020da:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	69db      	ldr	r3, [r3, #28]
 80020e2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80020e6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	685b      	ldr	r3, [r3, #4]
 80020ee:	4956      	ldr	r1, [pc, #344]	; (8002248 <HAL_I2C_Init+0x25c>)
 80020f0:	428b      	cmp	r3, r1
 80020f2:	d80d      	bhi.n	8002110 <HAL_I2C_Init+0x124>
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	1e59      	subs	r1, r3, #1
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	685b      	ldr	r3, [r3, #4]
 80020fc:	005b      	lsls	r3, r3, #1
 80020fe:	fbb1 f3f3 	udiv	r3, r1, r3
 8002102:	3301      	adds	r3, #1
 8002104:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002108:	2b04      	cmp	r3, #4
 800210a:	bf38      	it	cc
 800210c:	2304      	movcc	r3, #4
 800210e:	e04f      	b.n	80021b0 <HAL_I2C_Init+0x1c4>
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	689b      	ldr	r3, [r3, #8]
 8002114:	2b00      	cmp	r3, #0
 8002116:	d111      	bne.n	800213c <HAL_I2C_Init+0x150>
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	1e58      	subs	r0, r3, #1
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6859      	ldr	r1, [r3, #4]
 8002120:	460b      	mov	r3, r1
 8002122:	005b      	lsls	r3, r3, #1
 8002124:	440b      	add	r3, r1
 8002126:	fbb0 f3f3 	udiv	r3, r0, r3
 800212a:	3301      	adds	r3, #1
 800212c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002130:	2b00      	cmp	r3, #0
 8002132:	bf0c      	ite	eq
 8002134:	2301      	moveq	r3, #1
 8002136:	2300      	movne	r3, #0
 8002138:	b2db      	uxtb	r3, r3
 800213a:	e012      	b.n	8002162 <HAL_I2C_Init+0x176>
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	1e58      	subs	r0, r3, #1
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6859      	ldr	r1, [r3, #4]
 8002144:	460b      	mov	r3, r1
 8002146:	009b      	lsls	r3, r3, #2
 8002148:	440b      	add	r3, r1
 800214a:	0099      	lsls	r1, r3, #2
 800214c:	440b      	add	r3, r1
 800214e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002152:	3301      	adds	r3, #1
 8002154:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002158:	2b00      	cmp	r3, #0
 800215a:	bf0c      	ite	eq
 800215c:	2301      	moveq	r3, #1
 800215e:	2300      	movne	r3, #0
 8002160:	b2db      	uxtb	r3, r3
 8002162:	2b00      	cmp	r3, #0
 8002164:	d001      	beq.n	800216a <HAL_I2C_Init+0x17e>
 8002166:	2301      	movs	r3, #1
 8002168:	e022      	b.n	80021b0 <HAL_I2C_Init+0x1c4>
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	689b      	ldr	r3, [r3, #8]
 800216e:	2b00      	cmp	r3, #0
 8002170:	d10e      	bne.n	8002190 <HAL_I2C_Init+0x1a4>
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	1e58      	subs	r0, r3, #1
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6859      	ldr	r1, [r3, #4]
 800217a:	460b      	mov	r3, r1
 800217c:	005b      	lsls	r3, r3, #1
 800217e:	440b      	add	r3, r1
 8002180:	fbb0 f3f3 	udiv	r3, r0, r3
 8002184:	3301      	adds	r3, #1
 8002186:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800218a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800218e:	e00f      	b.n	80021b0 <HAL_I2C_Init+0x1c4>
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	1e58      	subs	r0, r3, #1
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	6859      	ldr	r1, [r3, #4]
 8002198:	460b      	mov	r3, r1
 800219a:	009b      	lsls	r3, r3, #2
 800219c:	440b      	add	r3, r1
 800219e:	0099      	lsls	r1, r3, #2
 80021a0:	440b      	add	r3, r1
 80021a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80021a6:	3301      	adds	r3, #1
 80021a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021ac:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80021b0:	6879      	ldr	r1, [r7, #4]
 80021b2:	6809      	ldr	r1, [r1, #0]
 80021b4:	4313      	orrs	r3, r2
 80021b6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	69da      	ldr	r2, [r3, #28]
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6a1b      	ldr	r3, [r3, #32]
 80021ca:	431a      	orrs	r2, r3
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	430a      	orrs	r2, r1
 80021d2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	689b      	ldr	r3, [r3, #8]
 80021da:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80021de:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80021e2:	687a      	ldr	r2, [r7, #4]
 80021e4:	6911      	ldr	r1, [r2, #16]
 80021e6:	687a      	ldr	r2, [r7, #4]
 80021e8:	68d2      	ldr	r2, [r2, #12]
 80021ea:	4311      	orrs	r1, r2
 80021ec:	687a      	ldr	r2, [r7, #4]
 80021ee:	6812      	ldr	r2, [r2, #0]
 80021f0:	430b      	orrs	r3, r1
 80021f2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	68db      	ldr	r3, [r3, #12]
 80021fa:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	695a      	ldr	r2, [r3, #20]
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	699b      	ldr	r3, [r3, #24]
 8002206:	431a      	orrs	r2, r3
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	430a      	orrs	r2, r1
 800220e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	681a      	ldr	r2, [r3, #0]
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f042 0201 	orr.w	r2, r2, #1
 800221e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	2200      	movs	r2, #0
 8002224:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	2220      	movs	r2, #32
 800222a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	2200      	movs	r2, #0
 8002232:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2200      	movs	r2, #0
 8002238:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800223c:	2300      	movs	r3, #0
}
 800223e:	4618      	mov	r0, r3
 8002240:	3710      	adds	r7, #16
 8002242:	46bd      	mov	sp, r7
 8002244:	bd80      	pop	{r7, pc}
 8002246:	bf00      	nop
 8002248:	000186a0 	.word	0x000186a0
 800224c:	001e847f 	.word	0x001e847f
 8002250:	003d08ff 	.word	0x003d08ff
 8002254:	431bde83 	.word	0x431bde83
 8002258:	10624dd3 	.word	0x10624dd3

0800225c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b088      	sub	sp, #32
 8002260:	af02      	add	r7, sp, #8
 8002262:	60f8      	str	r0, [r7, #12]
 8002264:	607a      	str	r2, [r7, #4]
 8002266:	461a      	mov	r2, r3
 8002268:	460b      	mov	r3, r1
 800226a:	817b      	strh	r3, [r7, #10]
 800226c:	4613      	mov	r3, r2
 800226e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002270:	f7ff fb7e 	bl	8001970 <HAL_GetTick>
 8002274:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800227c:	b2db      	uxtb	r3, r3
 800227e:	2b20      	cmp	r3, #32
 8002280:	f040 80e0 	bne.w	8002444 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002284:	697b      	ldr	r3, [r7, #20]
 8002286:	9300      	str	r3, [sp, #0]
 8002288:	2319      	movs	r3, #25
 800228a:	2201      	movs	r2, #1
 800228c:	4970      	ldr	r1, [pc, #448]	; (8002450 <HAL_I2C_Master_Transmit+0x1f4>)
 800228e:	68f8      	ldr	r0, [r7, #12]
 8002290:	f000 f964 	bl	800255c <I2C_WaitOnFlagUntilTimeout>
 8002294:	4603      	mov	r3, r0
 8002296:	2b00      	cmp	r3, #0
 8002298:	d001      	beq.n	800229e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800229a:	2302      	movs	r3, #2
 800229c:	e0d3      	b.n	8002446 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80022a4:	2b01      	cmp	r3, #1
 80022a6:	d101      	bne.n	80022ac <HAL_I2C_Master_Transmit+0x50>
 80022a8:	2302      	movs	r3, #2
 80022aa:	e0cc      	b.n	8002446 <HAL_I2C_Master_Transmit+0x1ea>
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	2201      	movs	r2, #1
 80022b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f003 0301 	and.w	r3, r3, #1
 80022be:	2b01      	cmp	r3, #1
 80022c0:	d007      	beq.n	80022d2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	681a      	ldr	r2, [r3, #0]
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f042 0201 	orr.w	r2, r2, #1
 80022d0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	681a      	ldr	r2, [r3, #0]
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80022e0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	2221      	movs	r2, #33	; 0x21
 80022e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	2210      	movs	r2, #16
 80022ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	2200      	movs	r2, #0
 80022f6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	687a      	ldr	r2, [r7, #4]
 80022fc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	893a      	ldrh	r2, [r7, #8]
 8002302:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002308:	b29a      	uxth	r2, r3
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	4a50      	ldr	r2, [pc, #320]	; (8002454 <HAL_I2C_Master_Transmit+0x1f8>)
 8002312:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002314:	8979      	ldrh	r1, [r7, #10]
 8002316:	697b      	ldr	r3, [r7, #20]
 8002318:	6a3a      	ldr	r2, [r7, #32]
 800231a:	68f8      	ldr	r0, [r7, #12]
 800231c:	f000 f89c 	bl	8002458 <I2C_MasterRequestWrite>
 8002320:	4603      	mov	r3, r0
 8002322:	2b00      	cmp	r3, #0
 8002324:	d001      	beq.n	800232a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002326:	2301      	movs	r3, #1
 8002328:	e08d      	b.n	8002446 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800232a:	2300      	movs	r3, #0
 800232c:	613b      	str	r3, [r7, #16]
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	695b      	ldr	r3, [r3, #20]
 8002334:	613b      	str	r3, [r7, #16]
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	699b      	ldr	r3, [r3, #24]
 800233c:	613b      	str	r3, [r7, #16]
 800233e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002340:	e066      	b.n	8002410 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002342:	697a      	ldr	r2, [r7, #20]
 8002344:	6a39      	ldr	r1, [r7, #32]
 8002346:	68f8      	ldr	r0, [r7, #12]
 8002348:	f000 f9de 	bl	8002708 <I2C_WaitOnTXEFlagUntilTimeout>
 800234c:	4603      	mov	r3, r0
 800234e:	2b00      	cmp	r3, #0
 8002350:	d00d      	beq.n	800236e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002356:	2b04      	cmp	r3, #4
 8002358:	d107      	bne.n	800236a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	681a      	ldr	r2, [r3, #0]
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002368:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800236a:	2301      	movs	r3, #1
 800236c:	e06b      	b.n	8002446 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002372:	781a      	ldrb	r2, [r3, #0]
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800237e:	1c5a      	adds	r2, r3, #1
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002388:	b29b      	uxth	r3, r3
 800238a:	3b01      	subs	r3, #1
 800238c:	b29a      	uxth	r2, r3
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002396:	3b01      	subs	r3, #1
 8002398:	b29a      	uxth	r2, r3
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	695b      	ldr	r3, [r3, #20]
 80023a4:	f003 0304 	and.w	r3, r3, #4
 80023a8:	2b04      	cmp	r3, #4
 80023aa:	d11b      	bne.n	80023e4 <HAL_I2C_Master_Transmit+0x188>
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d017      	beq.n	80023e4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023b8:	781a      	ldrb	r2, [r3, #0]
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023c4:	1c5a      	adds	r2, r3, #1
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023ce:	b29b      	uxth	r3, r3
 80023d0:	3b01      	subs	r3, #1
 80023d2:	b29a      	uxth	r2, r3
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023dc:	3b01      	subs	r3, #1
 80023de:	b29a      	uxth	r2, r3
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80023e4:	697a      	ldr	r2, [r7, #20]
 80023e6:	6a39      	ldr	r1, [r7, #32]
 80023e8:	68f8      	ldr	r0, [r7, #12]
 80023ea:	f000 f9ce 	bl	800278a <I2C_WaitOnBTFFlagUntilTimeout>
 80023ee:	4603      	mov	r3, r0
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d00d      	beq.n	8002410 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023f8:	2b04      	cmp	r3, #4
 80023fa:	d107      	bne.n	800240c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	681a      	ldr	r2, [r3, #0]
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800240a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800240c:	2301      	movs	r3, #1
 800240e:	e01a      	b.n	8002446 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002414:	2b00      	cmp	r3, #0
 8002416:	d194      	bne.n	8002342 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	681a      	ldr	r2, [r3, #0]
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002426:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	2220      	movs	r2, #32
 800242c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	2200      	movs	r2, #0
 8002434:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	2200      	movs	r2, #0
 800243c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002440:	2300      	movs	r3, #0
 8002442:	e000      	b.n	8002446 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002444:	2302      	movs	r3, #2
  }
}
 8002446:	4618      	mov	r0, r3
 8002448:	3718      	adds	r7, #24
 800244a:	46bd      	mov	sp, r7
 800244c:	bd80      	pop	{r7, pc}
 800244e:	bf00      	nop
 8002450:	00100002 	.word	0x00100002
 8002454:	ffff0000 	.word	0xffff0000

08002458 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b088      	sub	sp, #32
 800245c:	af02      	add	r7, sp, #8
 800245e:	60f8      	str	r0, [r7, #12]
 8002460:	607a      	str	r2, [r7, #4]
 8002462:	603b      	str	r3, [r7, #0]
 8002464:	460b      	mov	r3, r1
 8002466:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800246c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800246e:	697b      	ldr	r3, [r7, #20]
 8002470:	2b08      	cmp	r3, #8
 8002472:	d006      	beq.n	8002482 <I2C_MasterRequestWrite+0x2a>
 8002474:	697b      	ldr	r3, [r7, #20]
 8002476:	2b01      	cmp	r3, #1
 8002478:	d003      	beq.n	8002482 <I2C_MasterRequestWrite+0x2a>
 800247a:	697b      	ldr	r3, [r7, #20]
 800247c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002480:	d108      	bne.n	8002494 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	681a      	ldr	r2, [r3, #0]
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002490:	601a      	str	r2, [r3, #0]
 8002492:	e00b      	b.n	80024ac <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002498:	2b12      	cmp	r3, #18
 800249a:	d107      	bne.n	80024ac <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	681a      	ldr	r2, [r3, #0]
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80024aa:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	9300      	str	r3, [sp, #0]
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2200      	movs	r2, #0
 80024b4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80024b8:	68f8      	ldr	r0, [r7, #12]
 80024ba:	f000 f84f 	bl	800255c <I2C_WaitOnFlagUntilTimeout>
 80024be:	4603      	mov	r3, r0
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d00d      	beq.n	80024e0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80024d2:	d103      	bne.n	80024dc <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80024da:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80024dc:	2303      	movs	r3, #3
 80024de:	e035      	b.n	800254c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	691b      	ldr	r3, [r3, #16]
 80024e4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80024e8:	d108      	bne.n	80024fc <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80024ea:	897b      	ldrh	r3, [r7, #10]
 80024ec:	b2db      	uxtb	r3, r3
 80024ee:	461a      	mov	r2, r3
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80024f8:	611a      	str	r2, [r3, #16]
 80024fa:	e01b      	b.n	8002534 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80024fc:	897b      	ldrh	r3, [r7, #10]
 80024fe:	11db      	asrs	r3, r3, #7
 8002500:	b2db      	uxtb	r3, r3
 8002502:	f003 0306 	and.w	r3, r3, #6
 8002506:	b2db      	uxtb	r3, r3
 8002508:	f063 030f 	orn	r3, r3, #15
 800250c:	b2da      	uxtb	r2, r3
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	687a      	ldr	r2, [r7, #4]
 8002518:	490e      	ldr	r1, [pc, #56]	; (8002554 <I2C_MasterRequestWrite+0xfc>)
 800251a:	68f8      	ldr	r0, [r7, #12]
 800251c:	f000 f875 	bl	800260a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002520:	4603      	mov	r3, r0
 8002522:	2b00      	cmp	r3, #0
 8002524:	d001      	beq.n	800252a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002526:	2301      	movs	r3, #1
 8002528:	e010      	b.n	800254c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800252a:	897b      	ldrh	r3, [r7, #10]
 800252c:	b2da      	uxtb	r2, r3
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	687a      	ldr	r2, [r7, #4]
 8002538:	4907      	ldr	r1, [pc, #28]	; (8002558 <I2C_MasterRequestWrite+0x100>)
 800253a:	68f8      	ldr	r0, [r7, #12]
 800253c:	f000 f865 	bl	800260a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002540:	4603      	mov	r3, r0
 8002542:	2b00      	cmp	r3, #0
 8002544:	d001      	beq.n	800254a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002546:	2301      	movs	r3, #1
 8002548:	e000      	b.n	800254c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800254a:	2300      	movs	r3, #0
}
 800254c:	4618      	mov	r0, r3
 800254e:	3718      	adds	r7, #24
 8002550:	46bd      	mov	sp, r7
 8002552:	bd80      	pop	{r7, pc}
 8002554:	00010008 	.word	0x00010008
 8002558:	00010002 	.word	0x00010002

0800255c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b084      	sub	sp, #16
 8002560:	af00      	add	r7, sp, #0
 8002562:	60f8      	str	r0, [r7, #12]
 8002564:	60b9      	str	r1, [r7, #8]
 8002566:	603b      	str	r3, [r7, #0]
 8002568:	4613      	mov	r3, r2
 800256a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800256c:	e025      	b.n	80025ba <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002574:	d021      	beq.n	80025ba <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002576:	f7ff f9fb 	bl	8001970 <HAL_GetTick>
 800257a:	4602      	mov	r2, r0
 800257c:	69bb      	ldr	r3, [r7, #24]
 800257e:	1ad3      	subs	r3, r2, r3
 8002580:	683a      	ldr	r2, [r7, #0]
 8002582:	429a      	cmp	r2, r3
 8002584:	d302      	bcc.n	800258c <I2C_WaitOnFlagUntilTimeout+0x30>
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	2b00      	cmp	r3, #0
 800258a:	d116      	bne.n	80025ba <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	2200      	movs	r2, #0
 8002590:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	2220      	movs	r2, #32
 8002596:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	2200      	movs	r2, #0
 800259e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025a6:	f043 0220 	orr.w	r2, r3, #32
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	2200      	movs	r2, #0
 80025b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80025b6:	2301      	movs	r3, #1
 80025b8:	e023      	b.n	8002602 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80025ba:	68bb      	ldr	r3, [r7, #8]
 80025bc:	0c1b      	lsrs	r3, r3, #16
 80025be:	b2db      	uxtb	r3, r3
 80025c0:	2b01      	cmp	r3, #1
 80025c2:	d10d      	bne.n	80025e0 <I2C_WaitOnFlagUntilTimeout+0x84>
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	695b      	ldr	r3, [r3, #20]
 80025ca:	43da      	mvns	r2, r3
 80025cc:	68bb      	ldr	r3, [r7, #8]
 80025ce:	4013      	ands	r3, r2
 80025d0:	b29b      	uxth	r3, r3
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	bf0c      	ite	eq
 80025d6:	2301      	moveq	r3, #1
 80025d8:	2300      	movne	r3, #0
 80025da:	b2db      	uxtb	r3, r3
 80025dc:	461a      	mov	r2, r3
 80025de:	e00c      	b.n	80025fa <I2C_WaitOnFlagUntilTimeout+0x9e>
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	699b      	ldr	r3, [r3, #24]
 80025e6:	43da      	mvns	r2, r3
 80025e8:	68bb      	ldr	r3, [r7, #8]
 80025ea:	4013      	ands	r3, r2
 80025ec:	b29b      	uxth	r3, r3
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	bf0c      	ite	eq
 80025f2:	2301      	moveq	r3, #1
 80025f4:	2300      	movne	r3, #0
 80025f6:	b2db      	uxtb	r3, r3
 80025f8:	461a      	mov	r2, r3
 80025fa:	79fb      	ldrb	r3, [r7, #7]
 80025fc:	429a      	cmp	r2, r3
 80025fe:	d0b6      	beq.n	800256e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002600:	2300      	movs	r3, #0
}
 8002602:	4618      	mov	r0, r3
 8002604:	3710      	adds	r7, #16
 8002606:	46bd      	mov	sp, r7
 8002608:	bd80      	pop	{r7, pc}

0800260a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800260a:	b580      	push	{r7, lr}
 800260c:	b084      	sub	sp, #16
 800260e:	af00      	add	r7, sp, #0
 8002610:	60f8      	str	r0, [r7, #12]
 8002612:	60b9      	str	r1, [r7, #8]
 8002614:	607a      	str	r2, [r7, #4]
 8002616:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002618:	e051      	b.n	80026be <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	695b      	ldr	r3, [r3, #20]
 8002620:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002624:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002628:	d123      	bne.n	8002672 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	681a      	ldr	r2, [r3, #0]
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002638:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002642:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	2200      	movs	r2, #0
 8002648:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	2220      	movs	r2, #32
 800264e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	2200      	movs	r2, #0
 8002656:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800265e:	f043 0204 	orr.w	r2, r3, #4
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	2200      	movs	r2, #0
 800266a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800266e:	2301      	movs	r3, #1
 8002670:	e046      	b.n	8002700 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002678:	d021      	beq.n	80026be <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800267a:	f7ff f979 	bl	8001970 <HAL_GetTick>
 800267e:	4602      	mov	r2, r0
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	1ad3      	subs	r3, r2, r3
 8002684:	687a      	ldr	r2, [r7, #4]
 8002686:	429a      	cmp	r2, r3
 8002688:	d302      	bcc.n	8002690 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	2b00      	cmp	r3, #0
 800268e:	d116      	bne.n	80026be <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	2200      	movs	r2, #0
 8002694:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	2220      	movs	r2, #32
 800269a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	2200      	movs	r2, #0
 80026a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026aa:	f043 0220 	orr.w	r2, r3, #32
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	2200      	movs	r2, #0
 80026b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80026ba:	2301      	movs	r3, #1
 80026bc:	e020      	b.n	8002700 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80026be:	68bb      	ldr	r3, [r7, #8]
 80026c0:	0c1b      	lsrs	r3, r3, #16
 80026c2:	b2db      	uxtb	r3, r3
 80026c4:	2b01      	cmp	r3, #1
 80026c6:	d10c      	bne.n	80026e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	695b      	ldr	r3, [r3, #20]
 80026ce:	43da      	mvns	r2, r3
 80026d0:	68bb      	ldr	r3, [r7, #8]
 80026d2:	4013      	ands	r3, r2
 80026d4:	b29b      	uxth	r3, r3
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	bf14      	ite	ne
 80026da:	2301      	movne	r3, #1
 80026dc:	2300      	moveq	r3, #0
 80026de:	b2db      	uxtb	r3, r3
 80026e0:	e00b      	b.n	80026fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	699b      	ldr	r3, [r3, #24]
 80026e8:	43da      	mvns	r2, r3
 80026ea:	68bb      	ldr	r3, [r7, #8]
 80026ec:	4013      	ands	r3, r2
 80026ee:	b29b      	uxth	r3, r3
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	bf14      	ite	ne
 80026f4:	2301      	movne	r3, #1
 80026f6:	2300      	moveq	r3, #0
 80026f8:	b2db      	uxtb	r3, r3
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d18d      	bne.n	800261a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80026fe:	2300      	movs	r3, #0
}
 8002700:	4618      	mov	r0, r3
 8002702:	3710      	adds	r7, #16
 8002704:	46bd      	mov	sp, r7
 8002706:	bd80      	pop	{r7, pc}

08002708 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b084      	sub	sp, #16
 800270c:	af00      	add	r7, sp, #0
 800270e:	60f8      	str	r0, [r7, #12]
 8002710:	60b9      	str	r1, [r7, #8]
 8002712:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002714:	e02d      	b.n	8002772 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002716:	68f8      	ldr	r0, [r7, #12]
 8002718:	f000 f878 	bl	800280c <I2C_IsAcknowledgeFailed>
 800271c:	4603      	mov	r3, r0
 800271e:	2b00      	cmp	r3, #0
 8002720:	d001      	beq.n	8002726 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002722:	2301      	movs	r3, #1
 8002724:	e02d      	b.n	8002782 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002726:	68bb      	ldr	r3, [r7, #8]
 8002728:	f1b3 3fff 	cmp.w	r3, #4294967295
 800272c:	d021      	beq.n	8002772 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800272e:	f7ff f91f 	bl	8001970 <HAL_GetTick>
 8002732:	4602      	mov	r2, r0
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	1ad3      	subs	r3, r2, r3
 8002738:	68ba      	ldr	r2, [r7, #8]
 800273a:	429a      	cmp	r2, r3
 800273c:	d302      	bcc.n	8002744 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800273e:	68bb      	ldr	r3, [r7, #8]
 8002740:	2b00      	cmp	r3, #0
 8002742:	d116      	bne.n	8002772 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	2200      	movs	r2, #0
 8002748:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	2220      	movs	r2, #32
 800274e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	2200      	movs	r2, #0
 8002756:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800275e:	f043 0220 	orr.w	r2, r3, #32
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	2200      	movs	r2, #0
 800276a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800276e:	2301      	movs	r3, #1
 8002770:	e007      	b.n	8002782 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	695b      	ldr	r3, [r3, #20]
 8002778:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800277c:	2b80      	cmp	r3, #128	; 0x80
 800277e:	d1ca      	bne.n	8002716 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002780:	2300      	movs	r3, #0
}
 8002782:	4618      	mov	r0, r3
 8002784:	3710      	adds	r7, #16
 8002786:	46bd      	mov	sp, r7
 8002788:	bd80      	pop	{r7, pc}

0800278a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800278a:	b580      	push	{r7, lr}
 800278c:	b084      	sub	sp, #16
 800278e:	af00      	add	r7, sp, #0
 8002790:	60f8      	str	r0, [r7, #12]
 8002792:	60b9      	str	r1, [r7, #8]
 8002794:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002796:	e02d      	b.n	80027f4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002798:	68f8      	ldr	r0, [r7, #12]
 800279a:	f000 f837 	bl	800280c <I2C_IsAcknowledgeFailed>
 800279e:	4603      	mov	r3, r0
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d001      	beq.n	80027a8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80027a4:	2301      	movs	r3, #1
 80027a6:	e02d      	b.n	8002804 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80027a8:	68bb      	ldr	r3, [r7, #8]
 80027aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027ae:	d021      	beq.n	80027f4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80027b0:	f7ff f8de 	bl	8001970 <HAL_GetTick>
 80027b4:	4602      	mov	r2, r0
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	1ad3      	subs	r3, r2, r3
 80027ba:	68ba      	ldr	r2, [r7, #8]
 80027bc:	429a      	cmp	r2, r3
 80027be:	d302      	bcc.n	80027c6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80027c0:	68bb      	ldr	r3, [r7, #8]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d116      	bne.n	80027f4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	2200      	movs	r2, #0
 80027ca:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	2220      	movs	r2, #32
 80027d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	2200      	movs	r2, #0
 80027d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027e0:	f043 0220 	orr.w	r2, r3, #32
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	2200      	movs	r2, #0
 80027ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80027f0:	2301      	movs	r3, #1
 80027f2:	e007      	b.n	8002804 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	695b      	ldr	r3, [r3, #20]
 80027fa:	f003 0304 	and.w	r3, r3, #4
 80027fe:	2b04      	cmp	r3, #4
 8002800:	d1ca      	bne.n	8002798 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002802:	2300      	movs	r3, #0
}
 8002804:	4618      	mov	r0, r3
 8002806:	3710      	adds	r7, #16
 8002808:	46bd      	mov	sp, r7
 800280a:	bd80      	pop	{r7, pc}

0800280c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800280c:	b480      	push	{r7}
 800280e:	b083      	sub	sp, #12
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	695b      	ldr	r3, [r3, #20]
 800281a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800281e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002822:	d11b      	bne.n	800285c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800282c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	2200      	movs	r2, #0
 8002832:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2220      	movs	r2, #32
 8002838:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2200      	movs	r2, #0
 8002840:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002848:	f043 0204 	orr.w	r2, r3, #4
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2200      	movs	r2, #0
 8002854:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002858:	2301      	movs	r3, #1
 800285a:	e000      	b.n	800285e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800285c:	2300      	movs	r3, #0
}
 800285e:	4618      	mov	r0, r3
 8002860:	370c      	adds	r7, #12
 8002862:	46bd      	mov	sp, r7
 8002864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002868:	4770      	bx	lr
	...

0800286c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	b086      	sub	sp, #24
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2b00      	cmp	r3, #0
 8002878:	d101      	bne.n	800287e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800287a:	2301      	movs	r3, #1
 800287c:	e25b      	b.n	8002d36 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f003 0301 	and.w	r3, r3, #1
 8002886:	2b00      	cmp	r3, #0
 8002888:	d075      	beq.n	8002976 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800288a:	4ba3      	ldr	r3, [pc, #652]	; (8002b18 <HAL_RCC_OscConfig+0x2ac>)
 800288c:	689b      	ldr	r3, [r3, #8]
 800288e:	f003 030c 	and.w	r3, r3, #12
 8002892:	2b04      	cmp	r3, #4
 8002894:	d00c      	beq.n	80028b0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002896:	4ba0      	ldr	r3, [pc, #640]	; (8002b18 <HAL_RCC_OscConfig+0x2ac>)
 8002898:	689b      	ldr	r3, [r3, #8]
 800289a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800289e:	2b08      	cmp	r3, #8
 80028a0:	d112      	bne.n	80028c8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80028a2:	4b9d      	ldr	r3, [pc, #628]	; (8002b18 <HAL_RCC_OscConfig+0x2ac>)
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028aa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80028ae:	d10b      	bne.n	80028c8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028b0:	4b99      	ldr	r3, [pc, #612]	; (8002b18 <HAL_RCC_OscConfig+0x2ac>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d05b      	beq.n	8002974 <HAL_RCC_OscConfig+0x108>
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	685b      	ldr	r3, [r3, #4]
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d157      	bne.n	8002974 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80028c4:	2301      	movs	r3, #1
 80028c6:	e236      	b.n	8002d36 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	685b      	ldr	r3, [r3, #4]
 80028cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028d0:	d106      	bne.n	80028e0 <HAL_RCC_OscConfig+0x74>
 80028d2:	4b91      	ldr	r3, [pc, #580]	; (8002b18 <HAL_RCC_OscConfig+0x2ac>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	4a90      	ldr	r2, [pc, #576]	; (8002b18 <HAL_RCC_OscConfig+0x2ac>)
 80028d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028dc:	6013      	str	r3, [r2, #0]
 80028de:	e01d      	b.n	800291c <HAL_RCC_OscConfig+0xb0>
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	685b      	ldr	r3, [r3, #4]
 80028e4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80028e8:	d10c      	bne.n	8002904 <HAL_RCC_OscConfig+0x98>
 80028ea:	4b8b      	ldr	r3, [pc, #556]	; (8002b18 <HAL_RCC_OscConfig+0x2ac>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	4a8a      	ldr	r2, [pc, #552]	; (8002b18 <HAL_RCC_OscConfig+0x2ac>)
 80028f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80028f4:	6013      	str	r3, [r2, #0]
 80028f6:	4b88      	ldr	r3, [pc, #544]	; (8002b18 <HAL_RCC_OscConfig+0x2ac>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	4a87      	ldr	r2, [pc, #540]	; (8002b18 <HAL_RCC_OscConfig+0x2ac>)
 80028fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002900:	6013      	str	r3, [r2, #0]
 8002902:	e00b      	b.n	800291c <HAL_RCC_OscConfig+0xb0>
 8002904:	4b84      	ldr	r3, [pc, #528]	; (8002b18 <HAL_RCC_OscConfig+0x2ac>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	4a83      	ldr	r2, [pc, #524]	; (8002b18 <HAL_RCC_OscConfig+0x2ac>)
 800290a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800290e:	6013      	str	r3, [r2, #0]
 8002910:	4b81      	ldr	r3, [pc, #516]	; (8002b18 <HAL_RCC_OscConfig+0x2ac>)
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4a80      	ldr	r2, [pc, #512]	; (8002b18 <HAL_RCC_OscConfig+0x2ac>)
 8002916:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800291a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	685b      	ldr	r3, [r3, #4]
 8002920:	2b00      	cmp	r3, #0
 8002922:	d013      	beq.n	800294c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002924:	f7ff f824 	bl	8001970 <HAL_GetTick>
 8002928:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800292a:	e008      	b.n	800293e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800292c:	f7ff f820 	bl	8001970 <HAL_GetTick>
 8002930:	4602      	mov	r2, r0
 8002932:	693b      	ldr	r3, [r7, #16]
 8002934:	1ad3      	subs	r3, r2, r3
 8002936:	2b64      	cmp	r3, #100	; 0x64
 8002938:	d901      	bls.n	800293e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800293a:	2303      	movs	r3, #3
 800293c:	e1fb      	b.n	8002d36 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800293e:	4b76      	ldr	r3, [pc, #472]	; (8002b18 <HAL_RCC_OscConfig+0x2ac>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002946:	2b00      	cmp	r3, #0
 8002948:	d0f0      	beq.n	800292c <HAL_RCC_OscConfig+0xc0>
 800294a:	e014      	b.n	8002976 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800294c:	f7ff f810 	bl	8001970 <HAL_GetTick>
 8002950:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002952:	e008      	b.n	8002966 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002954:	f7ff f80c 	bl	8001970 <HAL_GetTick>
 8002958:	4602      	mov	r2, r0
 800295a:	693b      	ldr	r3, [r7, #16]
 800295c:	1ad3      	subs	r3, r2, r3
 800295e:	2b64      	cmp	r3, #100	; 0x64
 8002960:	d901      	bls.n	8002966 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002962:	2303      	movs	r3, #3
 8002964:	e1e7      	b.n	8002d36 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002966:	4b6c      	ldr	r3, [pc, #432]	; (8002b18 <HAL_RCC_OscConfig+0x2ac>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800296e:	2b00      	cmp	r3, #0
 8002970:	d1f0      	bne.n	8002954 <HAL_RCC_OscConfig+0xe8>
 8002972:	e000      	b.n	8002976 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002974:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f003 0302 	and.w	r3, r3, #2
 800297e:	2b00      	cmp	r3, #0
 8002980:	d063      	beq.n	8002a4a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002982:	4b65      	ldr	r3, [pc, #404]	; (8002b18 <HAL_RCC_OscConfig+0x2ac>)
 8002984:	689b      	ldr	r3, [r3, #8]
 8002986:	f003 030c 	and.w	r3, r3, #12
 800298a:	2b00      	cmp	r3, #0
 800298c:	d00b      	beq.n	80029a6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800298e:	4b62      	ldr	r3, [pc, #392]	; (8002b18 <HAL_RCC_OscConfig+0x2ac>)
 8002990:	689b      	ldr	r3, [r3, #8]
 8002992:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002996:	2b08      	cmp	r3, #8
 8002998:	d11c      	bne.n	80029d4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800299a:	4b5f      	ldr	r3, [pc, #380]	; (8002b18 <HAL_RCC_OscConfig+0x2ac>)
 800299c:	685b      	ldr	r3, [r3, #4]
 800299e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d116      	bne.n	80029d4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029a6:	4b5c      	ldr	r3, [pc, #368]	; (8002b18 <HAL_RCC_OscConfig+0x2ac>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f003 0302 	and.w	r3, r3, #2
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d005      	beq.n	80029be <HAL_RCC_OscConfig+0x152>
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	68db      	ldr	r3, [r3, #12]
 80029b6:	2b01      	cmp	r3, #1
 80029b8:	d001      	beq.n	80029be <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80029ba:	2301      	movs	r3, #1
 80029bc:	e1bb      	b.n	8002d36 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029be:	4b56      	ldr	r3, [pc, #344]	; (8002b18 <HAL_RCC_OscConfig+0x2ac>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	691b      	ldr	r3, [r3, #16]
 80029ca:	00db      	lsls	r3, r3, #3
 80029cc:	4952      	ldr	r1, [pc, #328]	; (8002b18 <HAL_RCC_OscConfig+0x2ac>)
 80029ce:	4313      	orrs	r3, r2
 80029d0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029d2:	e03a      	b.n	8002a4a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	68db      	ldr	r3, [r3, #12]
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d020      	beq.n	8002a1e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80029dc:	4b4f      	ldr	r3, [pc, #316]	; (8002b1c <HAL_RCC_OscConfig+0x2b0>)
 80029de:	2201      	movs	r2, #1
 80029e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029e2:	f7fe ffc5 	bl	8001970 <HAL_GetTick>
 80029e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029e8:	e008      	b.n	80029fc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80029ea:	f7fe ffc1 	bl	8001970 <HAL_GetTick>
 80029ee:	4602      	mov	r2, r0
 80029f0:	693b      	ldr	r3, [r7, #16]
 80029f2:	1ad3      	subs	r3, r2, r3
 80029f4:	2b02      	cmp	r3, #2
 80029f6:	d901      	bls.n	80029fc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80029f8:	2303      	movs	r3, #3
 80029fa:	e19c      	b.n	8002d36 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029fc:	4b46      	ldr	r3, [pc, #280]	; (8002b18 <HAL_RCC_OscConfig+0x2ac>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f003 0302 	and.w	r3, r3, #2
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d0f0      	beq.n	80029ea <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a08:	4b43      	ldr	r3, [pc, #268]	; (8002b18 <HAL_RCC_OscConfig+0x2ac>)
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	691b      	ldr	r3, [r3, #16]
 8002a14:	00db      	lsls	r3, r3, #3
 8002a16:	4940      	ldr	r1, [pc, #256]	; (8002b18 <HAL_RCC_OscConfig+0x2ac>)
 8002a18:	4313      	orrs	r3, r2
 8002a1a:	600b      	str	r3, [r1, #0]
 8002a1c:	e015      	b.n	8002a4a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a1e:	4b3f      	ldr	r3, [pc, #252]	; (8002b1c <HAL_RCC_OscConfig+0x2b0>)
 8002a20:	2200      	movs	r2, #0
 8002a22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a24:	f7fe ffa4 	bl	8001970 <HAL_GetTick>
 8002a28:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a2a:	e008      	b.n	8002a3e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a2c:	f7fe ffa0 	bl	8001970 <HAL_GetTick>
 8002a30:	4602      	mov	r2, r0
 8002a32:	693b      	ldr	r3, [r7, #16]
 8002a34:	1ad3      	subs	r3, r2, r3
 8002a36:	2b02      	cmp	r3, #2
 8002a38:	d901      	bls.n	8002a3e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002a3a:	2303      	movs	r3, #3
 8002a3c:	e17b      	b.n	8002d36 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a3e:	4b36      	ldr	r3, [pc, #216]	; (8002b18 <HAL_RCC_OscConfig+0x2ac>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f003 0302 	and.w	r3, r3, #2
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d1f0      	bne.n	8002a2c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f003 0308 	and.w	r3, r3, #8
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d030      	beq.n	8002ab8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	695b      	ldr	r3, [r3, #20]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d016      	beq.n	8002a8c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a5e:	4b30      	ldr	r3, [pc, #192]	; (8002b20 <HAL_RCC_OscConfig+0x2b4>)
 8002a60:	2201      	movs	r2, #1
 8002a62:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a64:	f7fe ff84 	bl	8001970 <HAL_GetTick>
 8002a68:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a6a:	e008      	b.n	8002a7e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a6c:	f7fe ff80 	bl	8001970 <HAL_GetTick>
 8002a70:	4602      	mov	r2, r0
 8002a72:	693b      	ldr	r3, [r7, #16]
 8002a74:	1ad3      	subs	r3, r2, r3
 8002a76:	2b02      	cmp	r3, #2
 8002a78:	d901      	bls.n	8002a7e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002a7a:	2303      	movs	r3, #3
 8002a7c:	e15b      	b.n	8002d36 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a7e:	4b26      	ldr	r3, [pc, #152]	; (8002b18 <HAL_RCC_OscConfig+0x2ac>)
 8002a80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a82:	f003 0302 	and.w	r3, r3, #2
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d0f0      	beq.n	8002a6c <HAL_RCC_OscConfig+0x200>
 8002a8a:	e015      	b.n	8002ab8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a8c:	4b24      	ldr	r3, [pc, #144]	; (8002b20 <HAL_RCC_OscConfig+0x2b4>)
 8002a8e:	2200      	movs	r2, #0
 8002a90:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a92:	f7fe ff6d 	bl	8001970 <HAL_GetTick>
 8002a96:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a98:	e008      	b.n	8002aac <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a9a:	f7fe ff69 	bl	8001970 <HAL_GetTick>
 8002a9e:	4602      	mov	r2, r0
 8002aa0:	693b      	ldr	r3, [r7, #16]
 8002aa2:	1ad3      	subs	r3, r2, r3
 8002aa4:	2b02      	cmp	r3, #2
 8002aa6:	d901      	bls.n	8002aac <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002aa8:	2303      	movs	r3, #3
 8002aaa:	e144      	b.n	8002d36 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002aac:	4b1a      	ldr	r3, [pc, #104]	; (8002b18 <HAL_RCC_OscConfig+0x2ac>)
 8002aae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ab0:	f003 0302 	and.w	r3, r3, #2
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d1f0      	bne.n	8002a9a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f003 0304 	and.w	r3, r3, #4
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	f000 80a0 	beq.w	8002c06 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002aca:	4b13      	ldr	r3, [pc, #76]	; (8002b18 <HAL_RCC_OscConfig+0x2ac>)
 8002acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ace:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d10f      	bne.n	8002af6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	60bb      	str	r3, [r7, #8]
 8002ada:	4b0f      	ldr	r3, [pc, #60]	; (8002b18 <HAL_RCC_OscConfig+0x2ac>)
 8002adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ade:	4a0e      	ldr	r2, [pc, #56]	; (8002b18 <HAL_RCC_OscConfig+0x2ac>)
 8002ae0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ae4:	6413      	str	r3, [r2, #64]	; 0x40
 8002ae6:	4b0c      	ldr	r3, [pc, #48]	; (8002b18 <HAL_RCC_OscConfig+0x2ac>)
 8002ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002aee:	60bb      	str	r3, [r7, #8]
 8002af0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002af2:	2301      	movs	r3, #1
 8002af4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002af6:	4b0b      	ldr	r3, [pc, #44]	; (8002b24 <HAL_RCC_OscConfig+0x2b8>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d121      	bne.n	8002b46 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b02:	4b08      	ldr	r3, [pc, #32]	; (8002b24 <HAL_RCC_OscConfig+0x2b8>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	4a07      	ldr	r2, [pc, #28]	; (8002b24 <HAL_RCC_OscConfig+0x2b8>)
 8002b08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b0c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b0e:	f7fe ff2f 	bl	8001970 <HAL_GetTick>
 8002b12:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b14:	e011      	b.n	8002b3a <HAL_RCC_OscConfig+0x2ce>
 8002b16:	bf00      	nop
 8002b18:	40023800 	.word	0x40023800
 8002b1c:	42470000 	.word	0x42470000
 8002b20:	42470e80 	.word	0x42470e80
 8002b24:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b28:	f7fe ff22 	bl	8001970 <HAL_GetTick>
 8002b2c:	4602      	mov	r2, r0
 8002b2e:	693b      	ldr	r3, [r7, #16]
 8002b30:	1ad3      	subs	r3, r2, r3
 8002b32:	2b02      	cmp	r3, #2
 8002b34:	d901      	bls.n	8002b3a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002b36:	2303      	movs	r3, #3
 8002b38:	e0fd      	b.n	8002d36 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b3a:	4b81      	ldr	r3, [pc, #516]	; (8002d40 <HAL_RCC_OscConfig+0x4d4>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d0f0      	beq.n	8002b28 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	689b      	ldr	r3, [r3, #8]
 8002b4a:	2b01      	cmp	r3, #1
 8002b4c:	d106      	bne.n	8002b5c <HAL_RCC_OscConfig+0x2f0>
 8002b4e:	4b7d      	ldr	r3, [pc, #500]	; (8002d44 <HAL_RCC_OscConfig+0x4d8>)
 8002b50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b52:	4a7c      	ldr	r2, [pc, #496]	; (8002d44 <HAL_RCC_OscConfig+0x4d8>)
 8002b54:	f043 0301 	orr.w	r3, r3, #1
 8002b58:	6713      	str	r3, [r2, #112]	; 0x70
 8002b5a:	e01c      	b.n	8002b96 <HAL_RCC_OscConfig+0x32a>
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	689b      	ldr	r3, [r3, #8]
 8002b60:	2b05      	cmp	r3, #5
 8002b62:	d10c      	bne.n	8002b7e <HAL_RCC_OscConfig+0x312>
 8002b64:	4b77      	ldr	r3, [pc, #476]	; (8002d44 <HAL_RCC_OscConfig+0x4d8>)
 8002b66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b68:	4a76      	ldr	r2, [pc, #472]	; (8002d44 <HAL_RCC_OscConfig+0x4d8>)
 8002b6a:	f043 0304 	orr.w	r3, r3, #4
 8002b6e:	6713      	str	r3, [r2, #112]	; 0x70
 8002b70:	4b74      	ldr	r3, [pc, #464]	; (8002d44 <HAL_RCC_OscConfig+0x4d8>)
 8002b72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b74:	4a73      	ldr	r2, [pc, #460]	; (8002d44 <HAL_RCC_OscConfig+0x4d8>)
 8002b76:	f043 0301 	orr.w	r3, r3, #1
 8002b7a:	6713      	str	r3, [r2, #112]	; 0x70
 8002b7c:	e00b      	b.n	8002b96 <HAL_RCC_OscConfig+0x32a>
 8002b7e:	4b71      	ldr	r3, [pc, #452]	; (8002d44 <HAL_RCC_OscConfig+0x4d8>)
 8002b80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b82:	4a70      	ldr	r2, [pc, #448]	; (8002d44 <HAL_RCC_OscConfig+0x4d8>)
 8002b84:	f023 0301 	bic.w	r3, r3, #1
 8002b88:	6713      	str	r3, [r2, #112]	; 0x70
 8002b8a:	4b6e      	ldr	r3, [pc, #440]	; (8002d44 <HAL_RCC_OscConfig+0x4d8>)
 8002b8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b8e:	4a6d      	ldr	r2, [pc, #436]	; (8002d44 <HAL_RCC_OscConfig+0x4d8>)
 8002b90:	f023 0304 	bic.w	r3, r3, #4
 8002b94:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	689b      	ldr	r3, [r3, #8]
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d015      	beq.n	8002bca <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b9e:	f7fe fee7 	bl	8001970 <HAL_GetTick>
 8002ba2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ba4:	e00a      	b.n	8002bbc <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ba6:	f7fe fee3 	bl	8001970 <HAL_GetTick>
 8002baa:	4602      	mov	r2, r0
 8002bac:	693b      	ldr	r3, [r7, #16]
 8002bae:	1ad3      	subs	r3, r2, r3
 8002bb0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bb4:	4293      	cmp	r3, r2
 8002bb6:	d901      	bls.n	8002bbc <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002bb8:	2303      	movs	r3, #3
 8002bba:	e0bc      	b.n	8002d36 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bbc:	4b61      	ldr	r3, [pc, #388]	; (8002d44 <HAL_RCC_OscConfig+0x4d8>)
 8002bbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bc0:	f003 0302 	and.w	r3, r3, #2
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d0ee      	beq.n	8002ba6 <HAL_RCC_OscConfig+0x33a>
 8002bc8:	e014      	b.n	8002bf4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bca:	f7fe fed1 	bl	8001970 <HAL_GetTick>
 8002bce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002bd0:	e00a      	b.n	8002be8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002bd2:	f7fe fecd 	bl	8001970 <HAL_GetTick>
 8002bd6:	4602      	mov	r2, r0
 8002bd8:	693b      	ldr	r3, [r7, #16]
 8002bda:	1ad3      	subs	r3, r2, r3
 8002bdc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002be0:	4293      	cmp	r3, r2
 8002be2:	d901      	bls.n	8002be8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002be4:	2303      	movs	r3, #3
 8002be6:	e0a6      	b.n	8002d36 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002be8:	4b56      	ldr	r3, [pc, #344]	; (8002d44 <HAL_RCC_OscConfig+0x4d8>)
 8002bea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bec:	f003 0302 	and.w	r3, r3, #2
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d1ee      	bne.n	8002bd2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002bf4:	7dfb      	ldrb	r3, [r7, #23]
 8002bf6:	2b01      	cmp	r3, #1
 8002bf8:	d105      	bne.n	8002c06 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002bfa:	4b52      	ldr	r3, [pc, #328]	; (8002d44 <HAL_RCC_OscConfig+0x4d8>)
 8002bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bfe:	4a51      	ldr	r2, [pc, #324]	; (8002d44 <HAL_RCC_OscConfig+0x4d8>)
 8002c00:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c04:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	699b      	ldr	r3, [r3, #24]
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	f000 8092 	beq.w	8002d34 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002c10:	4b4c      	ldr	r3, [pc, #304]	; (8002d44 <HAL_RCC_OscConfig+0x4d8>)
 8002c12:	689b      	ldr	r3, [r3, #8]
 8002c14:	f003 030c 	and.w	r3, r3, #12
 8002c18:	2b08      	cmp	r3, #8
 8002c1a:	d05c      	beq.n	8002cd6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	699b      	ldr	r3, [r3, #24]
 8002c20:	2b02      	cmp	r3, #2
 8002c22:	d141      	bne.n	8002ca8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c24:	4b48      	ldr	r3, [pc, #288]	; (8002d48 <HAL_RCC_OscConfig+0x4dc>)
 8002c26:	2200      	movs	r2, #0
 8002c28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c2a:	f7fe fea1 	bl	8001970 <HAL_GetTick>
 8002c2e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c30:	e008      	b.n	8002c44 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c32:	f7fe fe9d 	bl	8001970 <HAL_GetTick>
 8002c36:	4602      	mov	r2, r0
 8002c38:	693b      	ldr	r3, [r7, #16]
 8002c3a:	1ad3      	subs	r3, r2, r3
 8002c3c:	2b02      	cmp	r3, #2
 8002c3e:	d901      	bls.n	8002c44 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002c40:	2303      	movs	r3, #3
 8002c42:	e078      	b.n	8002d36 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c44:	4b3f      	ldr	r3, [pc, #252]	; (8002d44 <HAL_RCC_OscConfig+0x4d8>)
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d1f0      	bne.n	8002c32 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	69da      	ldr	r2, [r3, #28]
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6a1b      	ldr	r3, [r3, #32]
 8002c58:	431a      	orrs	r2, r3
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c5e:	019b      	lsls	r3, r3, #6
 8002c60:	431a      	orrs	r2, r3
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c66:	085b      	lsrs	r3, r3, #1
 8002c68:	3b01      	subs	r3, #1
 8002c6a:	041b      	lsls	r3, r3, #16
 8002c6c:	431a      	orrs	r2, r3
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c72:	061b      	lsls	r3, r3, #24
 8002c74:	4933      	ldr	r1, [pc, #204]	; (8002d44 <HAL_RCC_OscConfig+0x4d8>)
 8002c76:	4313      	orrs	r3, r2
 8002c78:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c7a:	4b33      	ldr	r3, [pc, #204]	; (8002d48 <HAL_RCC_OscConfig+0x4dc>)
 8002c7c:	2201      	movs	r2, #1
 8002c7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c80:	f7fe fe76 	bl	8001970 <HAL_GetTick>
 8002c84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c86:	e008      	b.n	8002c9a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c88:	f7fe fe72 	bl	8001970 <HAL_GetTick>
 8002c8c:	4602      	mov	r2, r0
 8002c8e:	693b      	ldr	r3, [r7, #16]
 8002c90:	1ad3      	subs	r3, r2, r3
 8002c92:	2b02      	cmp	r3, #2
 8002c94:	d901      	bls.n	8002c9a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002c96:	2303      	movs	r3, #3
 8002c98:	e04d      	b.n	8002d36 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c9a:	4b2a      	ldr	r3, [pc, #168]	; (8002d44 <HAL_RCC_OscConfig+0x4d8>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d0f0      	beq.n	8002c88 <HAL_RCC_OscConfig+0x41c>
 8002ca6:	e045      	b.n	8002d34 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ca8:	4b27      	ldr	r3, [pc, #156]	; (8002d48 <HAL_RCC_OscConfig+0x4dc>)
 8002caa:	2200      	movs	r2, #0
 8002cac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cae:	f7fe fe5f 	bl	8001970 <HAL_GetTick>
 8002cb2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cb4:	e008      	b.n	8002cc8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002cb6:	f7fe fe5b 	bl	8001970 <HAL_GetTick>
 8002cba:	4602      	mov	r2, r0
 8002cbc:	693b      	ldr	r3, [r7, #16]
 8002cbe:	1ad3      	subs	r3, r2, r3
 8002cc0:	2b02      	cmp	r3, #2
 8002cc2:	d901      	bls.n	8002cc8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002cc4:	2303      	movs	r3, #3
 8002cc6:	e036      	b.n	8002d36 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cc8:	4b1e      	ldr	r3, [pc, #120]	; (8002d44 <HAL_RCC_OscConfig+0x4d8>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d1f0      	bne.n	8002cb6 <HAL_RCC_OscConfig+0x44a>
 8002cd4:	e02e      	b.n	8002d34 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	699b      	ldr	r3, [r3, #24]
 8002cda:	2b01      	cmp	r3, #1
 8002cdc:	d101      	bne.n	8002ce2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002cde:	2301      	movs	r3, #1
 8002ce0:	e029      	b.n	8002d36 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002ce2:	4b18      	ldr	r3, [pc, #96]	; (8002d44 <HAL_RCC_OscConfig+0x4d8>)
 8002ce4:	685b      	ldr	r3, [r3, #4]
 8002ce6:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	69db      	ldr	r3, [r3, #28]
 8002cf2:	429a      	cmp	r2, r3
 8002cf4:	d11c      	bne.n	8002d30 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d00:	429a      	cmp	r2, r3
 8002d02:	d115      	bne.n	8002d30 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002d04:	68fa      	ldr	r2, [r7, #12]
 8002d06:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002d0a:	4013      	ands	r3, r2
 8002d0c:	687a      	ldr	r2, [r7, #4]
 8002d0e:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002d10:	4293      	cmp	r3, r2
 8002d12:	d10d      	bne.n	8002d30 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002d1e:	429a      	cmp	r2, r3
 8002d20:	d106      	bne.n	8002d30 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002d2c:	429a      	cmp	r2, r3
 8002d2e:	d001      	beq.n	8002d34 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8002d30:	2301      	movs	r3, #1
 8002d32:	e000      	b.n	8002d36 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8002d34:	2300      	movs	r3, #0
}
 8002d36:	4618      	mov	r0, r3
 8002d38:	3718      	adds	r7, #24
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	bd80      	pop	{r7, pc}
 8002d3e:	bf00      	nop
 8002d40:	40007000 	.word	0x40007000
 8002d44:	40023800 	.word	0x40023800
 8002d48:	42470060 	.word	0x42470060

08002d4c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b084      	sub	sp, #16
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
 8002d54:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d101      	bne.n	8002d60 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d5c:	2301      	movs	r3, #1
 8002d5e:	e0cc      	b.n	8002efa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002d60:	4b68      	ldr	r3, [pc, #416]	; (8002f04 <HAL_RCC_ClockConfig+0x1b8>)
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f003 030f 	and.w	r3, r3, #15
 8002d68:	683a      	ldr	r2, [r7, #0]
 8002d6a:	429a      	cmp	r2, r3
 8002d6c:	d90c      	bls.n	8002d88 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d6e:	4b65      	ldr	r3, [pc, #404]	; (8002f04 <HAL_RCC_ClockConfig+0x1b8>)
 8002d70:	683a      	ldr	r2, [r7, #0]
 8002d72:	b2d2      	uxtb	r2, r2
 8002d74:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d76:	4b63      	ldr	r3, [pc, #396]	; (8002f04 <HAL_RCC_ClockConfig+0x1b8>)
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f003 030f 	and.w	r3, r3, #15
 8002d7e:	683a      	ldr	r2, [r7, #0]
 8002d80:	429a      	cmp	r2, r3
 8002d82:	d001      	beq.n	8002d88 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002d84:	2301      	movs	r3, #1
 8002d86:	e0b8      	b.n	8002efa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f003 0302 	and.w	r3, r3, #2
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d020      	beq.n	8002dd6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f003 0304 	and.w	r3, r3, #4
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d005      	beq.n	8002dac <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002da0:	4b59      	ldr	r3, [pc, #356]	; (8002f08 <HAL_RCC_ClockConfig+0x1bc>)
 8002da2:	689b      	ldr	r3, [r3, #8]
 8002da4:	4a58      	ldr	r2, [pc, #352]	; (8002f08 <HAL_RCC_ClockConfig+0x1bc>)
 8002da6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002daa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f003 0308 	and.w	r3, r3, #8
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d005      	beq.n	8002dc4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002db8:	4b53      	ldr	r3, [pc, #332]	; (8002f08 <HAL_RCC_ClockConfig+0x1bc>)
 8002dba:	689b      	ldr	r3, [r3, #8]
 8002dbc:	4a52      	ldr	r2, [pc, #328]	; (8002f08 <HAL_RCC_ClockConfig+0x1bc>)
 8002dbe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002dc2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002dc4:	4b50      	ldr	r3, [pc, #320]	; (8002f08 <HAL_RCC_ClockConfig+0x1bc>)
 8002dc6:	689b      	ldr	r3, [r3, #8]
 8002dc8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	689b      	ldr	r3, [r3, #8]
 8002dd0:	494d      	ldr	r1, [pc, #308]	; (8002f08 <HAL_RCC_ClockConfig+0x1bc>)
 8002dd2:	4313      	orrs	r3, r2
 8002dd4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f003 0301 	and.w	r3, r3, #1
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d044      	beq.n	8002e6c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	685b      	ldr	r3, [r3, #4]
 8002de6:	2b01      	cmp	r3, #1
 8002de8:	d107      	bne.n	8002dfa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dea:	4b47      	ldr	r3, [pc, #284]	; (8002f08 <HAL_RCC_ClockConfig+0x1bc>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d119      	bne.n	8002e2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002df6:	2301      	movs	r3, #1
 8002df8:	e07f      	b.n	8002efa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	685b      	ldr	r3, [r3, #4]
 8002dfe:	2b02      	cmp	r3, #2
 8002e00:	d003      	beq.n	8002e0a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002e06:	2b03      	cmp	r3, #3
 8002e08:	d107      	bne.n	8002e1a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e0a:	4b3f      	ldr	r3, [pc, #252]	; (8002f08 <HAL_RCC_ClockConfig+0x1bc>)
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d109      	bne.n	8002e2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e16:	2301      	movs	r3, #1
 8002e18:	e06f      	b.n	8002efa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e1a:	4b3b      	ldr	r3, [pc, #236]	; (8002f08 <HAL_RCC_ClockConfig+0x1bc>)
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f003 0302 	and.w	r3, r3, #2
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d101      	bne.n	8002e2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e26:	2301      	movs	r3, #1
 8002e28:	e067      	b.n	8002efa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002e2a:	4b37      	ldr	r3, [pc, #220]	; (8002f08 <HAL_RCC_ClockConfig+0x1bc>)
 8002e2c:	689b      	ldr	r3, [r3, #8]
 8002e2e:	f023 0203 	bic.w	r2, r3, #3
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	685b      	ldr	r3, [r3, #4]
 8002e36:	4934      	ldr	r1, [pc, #208]	; (8002f08 <HAL_RCC_ClockConfig+0x1bc>)
 8002e38:	4313      	orrs	r3, r2
 8002e3a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002e3c:	f7fe fd98 	bl	8001970 <HAL_GetTick>
 8002e40:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e42:	e00a      	b.n	8002e5a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e44:	f7fe fd94 	bl	8001970 <HAL_GetTick>
 8002e48:	4602      	mov	r2, r0
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	1ad3      	subs	r3, r2, r3
 8002e4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e52:	4293      	cmp	r3, r2
 8002e54:	d901      	bls.n	8002e5a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002e56:	2303      	movs	r3, #3
 8002e58:	e04f      	b.n	8002efa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e5a:	4b2b      	ldr	r3, [pc, #172]	; (8002f08 <HAL_RCC_ClockConfig+0x1bc>)
 8002e5c:	689b      	ldr	r3, [r3, #8]
 8002e5e:	f003 020c 	and.w	r2, r3, #12
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	685b      	ldr	r3, [r3, #4]
 8002e66:	009b      	lsls	r3, r3, #2
 8002e68:	429a      	cmp	r2, r3
 8002e6a:	d1eb      	bne.n	8002e44 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002e6c:	4b25      	ldr	r3, [pc, #148]	; (8002f04 <HAL_RCC_ClockConfig+0x1b8>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f003 030f 	and.w	r3, r3, #15
 8002e74:	683a      	ldr	r2, [r7, #0]
 8002e76:	429a      	cmp	r2, r3
 8002e78:	d20c      	bcs.n	8002e94 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e7a:	4b22      	ldr	r3, [pc, #136]	; (8002f04 <HAL_RCC_ClockConfig+0x1b8>)
 8002e7c:	683a      	ldr	r2, [r7, #0]
 8002e7e:	b2d2      	uxtb	r2, r2
 8002e80:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e82:	4b20      	ldr	r3, [pc, #128]	; (8002f04 <HAL_RCC_ClockConfig+0x1b8>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f003 030f 	and.w	r3, r3, #15
 8002e8a:	683a      	ldr	r2, [r7, #0]
 8002e8c:	429a      	cmp	r2, r3
 8002e8e:	d001      	beq.n	8002e94 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002e90:	2301      	movs	r3, #1
 8002e92:	e032      	b.n	8002efa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f003 0304 	and.w	r3, r3, #4
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d008      	beq.n	8002eb2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ea0:	4b19      	ldr	r3, [pc, #100]	; (8002f08 <HAL_RCC_ClockConfig+0x1bc>)
 8002ea2:	689b      	ldr	r3, [r3, #8]
 8002ea4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	68db      	ldr	r3, [r3, #12]
 8002eac:	4916      	ldr	r1, [pc, #88]	; (8002f08 <HAL_RCC_ClockConfig+0x1bc>)
 8002eae:	4313      	orrs	r3, r2
 8002eb0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f003 0308 	and.w	r3, r3, #8
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d009      	beq.n	8002ed2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002ebe:	4b12      	ldr	r3, [pc, #72]	; (8002f08 <HAL_RCC_ClockConfig+0x1bc>)
 8002ec0:	689b      	ldr	r3, [r3, #8]
 8002ec2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	691b      	ldr	r3, [r3, #16]
 8002eca:	00db      	lsls	r3, r3, #3
 8002ecc:	490e      	ldr	r1, [pc, #56]	; (8002f08 <HAL_RCC_ClockConfig+0x1bc>)
 8002ece:	4313      	orrs	r3, r2
 8002ed0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002ed2:	f000 f821 	bl	8002f18 <HAL_RCC_GetSysClockFreq>
 8002ed6:	4601      	mov	r1, r0
 8002ed8:	4b0b      	ldr	r3, [pc, #44]	; (8002f08 <HAL_RCC_ClockConfig+0x1bc>)
 8002eda:	689b      	ldr	r3, [r3, #8]
 8002edc:	091b      	lsrs	r3, r3, #4
 8002ede:	f003 030f 	and.w	r3, r3, #15
 8002ee2:	4a0a      	ldr	r2, [pc, #40]	; (8002f0c <HAL_RCC_ClockConfig+0x1c0>)
 8002ee4:	5cd3      	ldrb	r3, [r2, r3]
 8002ee6:	fa21 f303 	lsr.w	r3, r1, r3
 8002eea:	4a09      	ldr	r2, [pc, #36]	; (8002f10 <HAL_RCC_ClockConfig+0x1c4>)
 8002eec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002eee:	4b09      	ldr	r3, [pc, #36]	; (8002f14 <HAL_RCC_ClockConfig+0x1c8>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	f7fe fcf8 	bl	80018e8 <HAL_InitTick>

  return HAL_OK;
 8002ef8:	2300      	movs	r3, #0
}
 8002efa:	4618      	mov	r0, r3
 8002efc:	3710      	adds	r7, #16
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bd80      	pop	{r7, pc}
 8002f02:	bf00      	nop
 8002f04:	40023c00 	.word	0x40023c00
 8002f08:	40023800 	.word	0x40023800
 8002f0c:	08004dbc 	.word	0x08004dbc
 8002f10:	20000004 	.word	0x20000004
 8002f14:	20000008 	.word	0x20000008

08002f18 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f1a:	b085      	sub	sp, #20
 8002f1c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002f1e:	2300      	movs	r3, #0
 8002f20:	607b      	str	r3, [r7, #4]
 8002f22:	2300      	movs	r3, #0
 8002f24:	60fb      	str	r3, [r7, #12]
 8002f26:	2300      	movs	r3, #0
 8002f28:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002f2e:	4b63      	ldr	r3, [pc, #396]	; (80030bc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002f30:	689b      	ldr	r3, [r3, #8]
 8002f32:	f003 030c 	and.w	r3, r3, #12
 8002f36:	2b04      	cmp	r3, #4
 8002f38:	d007      	beq.n	8002f4a <HAL_RCC_GetSysClockFreq+0x32>
 8002f3a:	2b08      	cmp	r3, #8
 8002f3c:	d008      	beq.n	8002f50 <HAL_RCC_GetSysClockFreq+0x38>
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	f040 80b4 	bne.w	80030ac <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002f44:	4b5e      	ldr	r3, [pc, #376]	; (80030c0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002f46:	60bb      	str	r3, [r7, #8]
       break;
 8002f48:	e0b3      	b.n	80030b2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002f4a:	4b5e      	ldr	r3, [pc, #376]	; (80030c4 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8002f4c:	60bb      	str	r3, [r7, #8]
      break;
 8002f4e:	e0b0      	b.n	80030b2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002f50:	4b5a      	ldr	r3, [pc, #360]	; (80030bc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002f52:	685b      	ldr	r3, [r3, #4]
 8002f54:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002f58:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002f5a:	4b58      	ldr	r3, [pc, #352]	; (80030bc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002f5c:	685b      	ldr	r3, [r3, #4]
 8002f5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d04a      	beq.n	8002ffc <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f66:	4b55      	ldr	r3, [pc, #340]	; (80030bc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002f68:	685b      	ldr	r3, [r3, #4]
 8002f6a:	099b      	lsrs	r3, r3, #6
 8002f6c:	f04f 0400 	mov.w	r4, #0
 8002f70:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002f74:	f04f 0200 	mov.w	r2, #0
 8002f78:	ea03 0501 	and.w	r5, r3, r1
 8002f7c:	ea04 0602 	and.w	r6, r4, r2
 8002f80:	4629      	mov	r1, r5
 8002f82:	4632      	mov	r2, r6
 8002f84:	f04f 0300 	mov.w	r3, #0
 8002f88:	f04f 0400 	mov.w	r4, #0
 8002f8c:	0154      	lsls	r4, r2, #5
 8002f8e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002f92:	014b      	lsls	r3, r1, #5
 8002f94:	4619      	mov	r1, r3
 8002f96:	4622      	mov	r2, r4
 8002f98:	1b49      	subs	r1, r1, r5
 8002f9a:	eb62 0206 	sbc.w	r2, r2, r6
 8002f9e:	f04f 0300 	mov.w	r3, #0
 8002fa2:	f04f 0400 	mov.w	r4, #0
 8002fa6:	0194      	lsls	r4, r2, #6
 8002fa8:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002fac:	018b      	lsls	r3, r1, #6
 8002fae:	1a5b      	subs	r3, r3, r1
 8002fb0:	eb64 0402 	sbc.w	r4, r4, r2
 8002fb4:	f04f 0100 	mov.w	r1, #0
 8002fb8:	f04f 0200 	mov.w	r2, #0
 8002fbc:	00e2      	lsls	r2, r4, #3
 8002fbe:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002fc2:	00d9      	lsls	r1, r3, #3
 8002fc4:	460b      	mov	r3, r1
 8002fc6:	4614      	mov	r4, r2
 8002fc8:	195b      	adds	r3, r3, r5
 8002fca:	eb44 0406 	adc.w	r4, r4, r6
 8002fce:	f04f 0100 	mov.w	r1, #0
 8002fd2:	f04f 0200 	mov.w	r2, #0
 8002fd6:	0262      	lsls	r2, r4, #9
 8002fd8:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8002fdc:	0259      	lsls	r1, r3, #9
 8002fde:	460b      	mov	r3, r1
 8002fe0:	4614      	mov	r4, r2
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	4621      	mov	r1, r4
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	f04f 0400 	mov.w	r4, #0
 8002fec:	461a      	mov	r2, r3
 8002fee:	4623      	mov	r3, r4
 8002ff0:	f7fd f93e 	bl	8000270 <__aeabi_uldivmod>
 8002ff4:	4603      	mov	r3, r0
 8002ff6:	460c      	mov	r4, r1
 8002ff8:	60fb      	str	r3, [r7, #12]
 8002ffa:	e049      	b.n	8003090 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ffc:	4b2f      	ldr	r3, [pc, #188]	; (80030bc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002ffe:	685b      	ldr	r3, [r3, #4]
 8003000:	099b      	lsrs	r3, r3, #6
 8003002:	f04f 0400 	mov.w	r4, #0
 8003006:	f240 11ff 	movw	r1, #511	; 0x1ff
 800300a:	f04f 0200 	mov.w	r2, #0
 800300e:	ea03 0501 	and.w	r5, r3, r1
 8003012:	ea04 0602 	and.w	r6, r4, r2
 8003016:	4629      	mov	r1, r5
 8003018:	4632      	mov	r2, r6
 800301a:	f04f 0300 	mov.w	r3, #0
 800301e:	f04f 0400 	mov.w	r4, #0
 8003022:	0154      	lsls	r4, r2, #5
 8003024:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003028:	014b      	lsls	r3, r1, #5
 800302a:	4619      	mov	r1, r3
 800302c:	4622      	mov	r2, r4
 800302e:	1b49      	subs	r1, r1, r5
 8003030:	eb62 0206 	sbc.w	r2, r2, r6
 8003034:	f04f 0300 	mov.w	r3, #0
 8003038:	f04f 0400 	mov.w	r4, #0
 800303c:	0194      	lsls	r4, r2, #6
 800303e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003042:	018b      	lsls	r3, r1, #6
 8003044:	1a5b      	subs	r3, r3, r1
 8003046:	eb64 0402 	sbc.w	r4, r4, r2
 800304a:	f04f 0100 	mov.w	r1, #0
 800304e:	f04f 0200 	mov.w	r2, #0
 8003052:	00e2      	lsls	r2, r4, #3
 8003054:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003058:	00d9      	lsls	r1, r3, #3
 800305a:	460b      	mov	r3, r1
 800305c:	4614      	mov	r4, r2
 800305e:	195b      	adds	r3, r3, r5
 8003060:	eb44 0406 	adc.w	r4, r4, r6
 8003064:	f04f 0100 	mov.w	r1, #0
 8003068:	f04f 0200 	mov.w	r2, #0
 800306c:	02a2      	lsls	r2, r4, #10
 800306e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003072:	0299      	lsls	r1, r3, #10
 8003074:	460b      	mov	r3, r1
 8003076:	4614      	mov	r4, r2
 8003078:	4618      	mov	r0, r3
 800307a:	4621      	mov	r1, r4
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	f04f 0400 	mov.w	r4, #0
 8003082:	461a      	mov	r2, r3
 8003084:	4623      	mov	r3, r4
 8003086:	f7fd f8f3 	bl	8000270 <__aeabi_uldivmod>
 800308a:	4603      	mov	r3, r0
 800308c:	460c      	mov	r4, r1
 800308e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003090:	4b0a      	ldr	r3, [pc, #40]	; (80030bc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003092:	685b      	ldr	r3, [r3, #4]
 8003094:	0c1b      	lsrs	r3, r3, #16
 8003096:	f003 0303 	and.w	r3, r3, #3
 800309a:	3301      	adds	r3, #1
 800309c:	005b      	lsls	r3, r3, #1
 800309e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80030a0:	68fa      	ldr	r2, [r7, #12]
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80030a8:	60bb      	str	r3, [r7, #8]
      break;
 80030aa:	e002      	b.n	80030b2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80030ac:	4b04      	ldr	r3, [pc, #16]	; (80030c0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80030ae:	60bb      	str	r3, [r7, #8]
      break;
 80030b0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80030b2:	68bb      	ldr	r3, [r7, #8]
}
 80030b4:	4618      	mov	r0, r3
 80030b6:	3714      	adds	r7, #20
 80030b8:	46bd      	mov	sp, r7
 80030ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80030bc:	40023800 	.word	0x40023800
 80030c0:	00f42400 	.word	0x00f42400
 80030c4:	007a1200 	.word	0x007a1200

080030c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80030c8:	b480      	push	{r7}
 80030ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80030cc:	4b03      	ldr	r3, [pc, #12]	; (80030dc <HAL_RCC_GetHCLKFreq+0x14>)
 80030ce:	681b      	ldr	r3, [r3, #0]
}
 80030d0:	4618      	mov	r0, r3
 80030d2:	46bd      	mov	sp, r7
 80030d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d8:	4770      	bx	lr
 80030da:	bf00      	nop
 80030dc:	20000004 	.word	0x20000004

080030e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80030e4:	f7ff fff0 	bl	80030c8 <HAL_RCC_GetHCLKFreq>
 80030e8:	4601      	mov	r1, r0
 80030ea:	4b05      	ldr	r3, [pc, #20]	; (8003100 <HAL_RCC_GetPCLK1Freq+0x20>)
 80030ec:	689b      	ldr	r3, [r3, #8]
 80030ee:	0a9b      	lsrs	r3, r3, #10
 80030f0:	f003 0307 	and.w	r3, r3, #7
 80030f4:	4a03      	ldr	r2, [pc, #12]	; (8003104 <HAL_RCC_GetPCLK1Freq+0x24>)
 80030f6:	5cd3      	ldrb	r3, [r2, r3]
 80030f8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80030fc:	4618      	mov	r0, r3
 80030fe:	bd80      	pop	{r7, pc}
 8003100:	40023800 	.word	0x40023800
 8003104:	08004dcc 	.word	0x08004dcc

08003108 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	b086      	sub	sp, #24
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003110:	2300      	movs	r3, #0
 8003112:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8003114:	2300      	movs	r3, #0
 8003116:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f003 0301 	and.w	r3, r3, #1
 8003120:	2b00      	cmp	r3, #0
 8003122:	d105      	bne.n	8003130 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800312c:	2b00      	cmp	r3, #0
 800312e:	d035      	beq.n	800319c <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003130:	4b62      	ldr	r3, [pc, #392]	; (80032bc <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8003132:	2200      	movs	r2, #0
 8003134:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003136:	f7fe fc1b 	bl	8001970 <HAL_GetTick>
 800313a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800313c:	e008      	b.n	8003150 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800313e:	f7fe fc17 	bl	8001970 <HAL_GetTick>
 8003142:	4602      	mov	r2, r0
 8003144:	697b      	ldr	r3, [r7, #20]
 8003146:	1ad3      	subs	r3, r2, r3
 8003148:	2b02      	cmp	r3, #2
 800314a:	d901      	bls.n	8003150 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800314c:	2303      	movs	r3, #3
 800314e:	e0b0      	b.n	80032b2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003150:	4b5b      	ldr	r3, [pc, #364]	; (80032c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003158:	2b00      	cmp	r3, #0
 800315a:	d1f0      	bne.n	800313e <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	685b      	ldr	r3, [r3, #4]
 8003160:	019a      	lsls	r2, r3, #6
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	689b      	ldr	r3, [r3, #8]
 8003166:	071b      	lsls	r3, r3, #28
 8003168:	4955      	ldr	r1, [pc, #340]	; (80032c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800316a:	4313      	orrs	r3, r2
 800316c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003170:	4b52      	ldr	r3, [pc, #328]	; (80032bc <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8003172:	2201      	movs	r2, #1
 8003174:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003176:	f7fe fbfb 	bl	8001970 <HAL_GetTick>
 800317a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800317c:	e008      	b.n	8003190 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800317e:	f7fe fbf7 	bl	8001970 <HAL_GetTick>
 8003182:	4602      	mov	r2, r0
 8003184:	697b      	ldr	r3, [r7, #20]
 8003186:	1ad3      	subs	r3, r2, r3
 8003188:	2b02      	cmp	r3, #2
 800318a:	d901      	bls.n	8003190 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800318c:	2303      	movs	r3, #3
 800318e:	e090      	b.n	80032b2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003190:	4b4b      	ldr	r3, [pc, #300]	; (80032c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003198:	2b00      	cmp	r3, #0
 800319a:	d0f0      	beq.n	800317e <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f003 0302 	and.w	r3, r3, #2
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	f000 8083 	beq.w	80032b0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80031aa:	2300      	movs	r3, #0
 80031ac:	60fb      	str	r3, [r7, #12]
 80031ae:	4b44      	ldr	r3, [pc, #272]	; (80032c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80031b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031b2:	4a43      	ldr	r2, [pc, #268]	; (80032c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80031b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031b8:	6413      	str	r3, [r2, #64]	; 0x40
 80031ba:	4b41      	ldr	r3, [pc, #260]	; (80032c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80031bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031c2:	60fb      	str	r3, [r7, #12]
 80031c4:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80031c6:	4b3f      	ldr	r3, [pc, #252]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	4a3e      	ldr	r2, [pc, #248]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80031cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031d0:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80031d2:	f7fe fbcd 	bl	8001970 <HAL_GetTick>
 80031d6:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80031d8:	e008      	b.n	80031ec <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80031da:	f7fe fbc9 	bl	8001970 <HAL_GetTick>
 80031de:	4602      	mov	r2, r0
 80031e0:	697b      	ldr	r3, [r7, #20]
 80031e2:	1ad3      	subs	r3, r2, r3
 80031e4:	2b02      	cmp	r3, #2
 80031e6:	d901      	bls.n	80031ec <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80031e8:	2303      	movs	r3, #3
 80031ea:	e062      	b.n	80032b2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80031ec:	4b35      	ldr	r3, [pc, #212]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d0f0      	beq.n	80031da <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80031f8:	4b31      	ldr	r3, [pc, #196]	; (80032c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80031fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031fc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003200:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003202:	693b      	ldr	r3, [r7, #16]
 8003204:	2b00      	cmp	r3, #0
 8003206:	d02f      	beq.n	8003268 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	68db      	ldr	r3, [r3, #12]
 800320c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003210:	693a      	ldr	r2, [r7, #16]
 8003212:	429a      	cmp	r2, r3
 8003214:	d028      	beq.n	8003268 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003216:	4b2a      	ldr	r3, [pc, #168]	; (80032c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003218:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800321a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800321e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003220:	4b29      	ldr	r3, [pc, #164]	; (80032c8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003222:	2201      	movs	r2, #1
 8003224:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003226:	4b28      	ldr	r3, [pc, #160]	; (80032c8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003228:	2200      	movs	r2, #0
 800322a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800322c:	4a24      	ldr	r2, [pc, #144]	; (80032c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800322e:	693b      	ldr	r3, [r7, #16]
 8003230:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003232:	4b23      	ldr	r3, [pc, #140]	; (80032c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003234:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003236:	f003 0301 	and.w	r3, r3, #1
 800323a:	2b01      	cmp	r3, #1
 800323c:	d114      	bne.n	8003268 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800323e:	f7fe fb97 	bl	8001970 <HAL_GetTick>
 8003242:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003244:	e00a      	b.n	800325c <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003246:	f7fe fb93 	bl	8001970 <HAL_GetTick>
 800324a:	4602      	mov	r2, r0
 800324c:	697b      	ldr	r3, [r7, #20]
 800324e:	1ad3      	subs	r3, r2, r3
 8003250:	f241 3288 	movw	r2, #5000	; 0x1388
 8003254:	4293      	cmp	r3, r2
 8003256:	d901      	bls.n	800325c <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8003258:	2303      	movs	r3, #3
 800325a:	e02a      	b.n	80032b2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800325c:	4b18      	ldr	r3, [pc, #96]	; (80032c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800325e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003260:	f003 0302 	and.w	r3, r3, #2
 8003264:	2b00      	cmp	r3, #0
 8003266:	d0ee      	beq.n	8003246 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	68db      	ldr	r3, [r3, #12]
 800326c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003270:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003274:	d10d      	bne.n	8003292 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8003276:	4b12      	ldr	r3, [pc, #72]	; (80032c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003278:	689b      	ldr	r3, [r3, #8]
 800327a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	68db      	ldr	r3, [r3, #12]
 8003282:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8003286:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800328a:	490d      	ldr	r1, [pc, #52]	; (80032c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800328c:	4313      	orrs	r3, r2
 800328e:	608b      	str	r3, [r1, #8]
 8003290:	e005      	b.n	800329e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8003292:	4b0b      	ldr	r3, [pc, #44]	; (80032c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003294:	689b      	ldr	r3, [r3, #8]
 8003296:	4a0a      	ldr	r2, [pc, #40]	; (80032c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003298:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800329c:	6093      	str	r3, [r2, #8]
 800329e:	4b08      	ldr	r3, [pc, #32]	; (80032c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80032a0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	68db      	ldr	r3, [r3, #12]
 80032a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032aa:	4905      	ldr	r1, [pc, #20]	; (80032c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80032ac:	4313      	orrs	r3, r2
 80032ae:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80032b0:	2300      	movs	r3, #0
}
 80032b2:	4618      	mov	r0, r3
 80032b4:	3718      	adds	r7, #24
 80032b6:	46bd      	mov	sp, r7
 80032b8:	bd80      	pop	{r7, pc}
 80032ba:	bf00      	nop
 80032bc:	42470068 	.word	0x42470068
 80032c0:	40023800 	.word	0x40023800
 80032c4:	40007000 	.word	0x40007000
 80032c8:	42470e40 	.word	0x42470e40

080032cc <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b082      	sub	sp, #8
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d101      	bne.n	80032de <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 80032da:	2301      	movs	r3, #1
 80032dc:	e083      	b.n	80033e6 <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	7f5b      	ldrb	r3, [r3, #29]
 80032e2:	b2db      	uxtb	r3, r3
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d105      	bne.n	80032f4 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2200      	movs	r2, #0
 80032ec:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80032ee:	6878      	ldr	r0, [r7, #4]
 80032f0:	f7fe f942 	bl	8001578 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2202      	movs	r2, #2
 80032f8:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	22ca      	movs	r2, #202	; 0xca
 8003300:	625a      	str	r2, [r3, #36]	; 0x24
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	2253      	movs	r2, #83	; 0x53
 8003308:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800330a:	6878      	ldr	r0, [r7, #4]
 800330c:	f000 fc26 	bl	8003b5c <RTC_EnterInitMode>
 8003310:	4603      	mov	r3, r0
 8003312:	2b00      	cmp	r3, #0
 8003314:	d008      	beq.n	8003328 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	22ff      	movs	r2, #255	; 0xff
 800331c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	2204      	movs	r2, #4
 8003322:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8003324:	2301      	movs	r3, #1
 8003326:	e05e      	b.n	80033e6 <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	689b      	ldr	r3, [r3, #8]
 800332e:	687a      	ldr	r2, [r7, #4]
 8003330:	6812      	ldr	r2, [r2, #0]
 8003332:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8003336:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800333a:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	6899      	ldr	r1, [r3, #8]
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	685a      	ldr	r2, [r3, #4]
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	691b      	ldr	r3, [r3, #16]
 800334a:	431a      	orrs	r2, r3
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	695b      	ldr	r3, [r3, #20]
 8003350:	431a      	orrs	r2, r3
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	430a      	orrs	r2, r1
 8003358:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	687a      	ldr	r2, [r7, #4]
 8003360:	68d2      	ldr	r2, [r2, #12]
 8003362:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	6919      	ldr	r1, [r3, #16]
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	689b      	ldr	r3, [r3, #8]
 800336e:	041a      	lsls	r2, r3, #16
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	430a      	orrs	r2, r1
 8003376:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	68da      	ldr	r2, [r3, #12]
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003386:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	689b      	ldr	r3, [r3, #8]
 800338e:	f003 0320 	and.w	r3, r3, #32
 8003392:	2b00      	cmp	r3, #0
 8003394:	d10e      	bne.n	80033b4 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003396:	6878      	ldr	r0, [r7, #4]
 8003398:	f000 fbb8 	bl	8003b0c <HAL_RTC_WaitForSynchro>
 800339c:	4603      	mov	r3, r0
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d008      	beq.n	80033b4 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	22ff      	movs	r2, #255	; 0xff
 80033a8:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	2204      	movs	r2, #4
 80033ae:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 80033b0:	2301      	movs	r3, #1
 80033b2:	e018      	b.n	80033e6 <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80033c2:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	699a      	ldr	r2, [r3, #24]
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	430a      	orrs	r2, r1
 80033d4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	22ff      	movs	r2, #255	; 0xff
 80033dc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	2201      	movs	r2, #1
 80033e2:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 80033e4:	2300      	movs	r3, #0
  }
}
 80033e6:	4618      	mov	r0, r3
 80033e8:	3708      	adds	r7, #8
 80033ea:	46bd      	mov	sp, r7
 80033ec:	bd80      	pop	{r7, pc}

080033ee <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80033ee:	b590      	push	{r4, r7, lr}
 80033f0:	b087      	sub	sp, #28
 80033f2:	af00      	add	r7, sp, #0
 80033f4:	60f8      	str	r0, [r7, #12]
 80033f6:	60b9      	str	r1, [r7, #8]
 80033f8:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80033fa:	2300      	movs	r3, #0
 80033fc:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	7f1b      	ldrb	r3, [r3, #28]
 8003402:	2b01      	cmp	r3, #1
 8003404:	d101      	bne.n	800340a <HAL_RTC_SetTime+0x1c>
 8003406:	2302      	movs	r3, #2
 8003408:	e0aa      	b.n	8003560 <HAL_RTC_SetTime+0x172>
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	2201      	movs	r2, #1
 800340e:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	2202      	movs	r2, #2
 8003414:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2b00      	cmp	r3, #0
 800341a:	d126      	bne.n	800346a <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	689b      	ldr	r3, [r3, #8]
 8003422:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003426:	2b00      	cmp	r3, #0
 8003428:	d102      	bne.n	8003430 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800342a:	68bb      	ldr	r3, [r7, #8]
 800342c:	2200      	movs	r2, #0
 800342e:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8003430:	68bb      	ldr	r3, [r7, #8]
 8003432:	781b      	ldrb	r3, [r3, #0]
 8003434:	4618      	mov	r0, r3
 8003436:	f000 fbbd 	bl	8003bb4 <RTC_ByteToBcd2>
 800343a:	4603      	mov	r3, r0
 800343c:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800343e:	68bb      	ldr	r3, [r7, #8]
 8003440:	785b      	ldrb	r3, [r3, #1]
 8003442:	4618      	mov	r0, r3
 8003444:	f000 fbb6 	bl	8003bb4 <RTC_ByteToBcd2>
 8003448:	4603      	mov	r3, r0
 800344a:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800344c:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 800344e:	68bb      	ldr	r3, [r7, #8]
 8003450:	789b      	ldrb	r3, [r3, #2]
 8003452:	4618      	mov	r0, r3
 8003454:	f000 fbae 	bl	8003bb4 <RTC_ByteToBcd2>
 8003458:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800345a:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 800345e:	68bb      	ldr	r3, [r7, #8]
 8003460:	78db      	ldrb	r3, [r3, #3]
 8003462:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8003464:	4313      	orrs	r3, r2
 8003466:	617b      	str	r3, [r7, #20]
 8003468:	e018      	b.n	800349c <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	689b      	ldr	r3, [r3, #8]
 8003470:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003474:	2b00      	cmp	r3, #0
 8003476:	d102      	bne.n	800347e <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8003478:	68bb      	ldr	r3, [r7, #8]
 800347a:	2200      	movs	r2, #0
 800347c:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800347e:	68bb      	ldr	r3, [r7, #8]
 8003480:	781b      	ldrb	r3, [r3, #0]
 8003482:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8003484:	68bb      	ldr	r3, [r7, #8]
 8003486:	785b      	ldrb	r3, [r3, #1]
 8003488:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800348a:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 800348c:	68ba      	ldr	r2, [r7, #8]
 800348e:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8003490:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8003492:	68bb      	ldr	r3, [r7, #8]
 8003494:	78db      	ldrb	r3, [r3, #3]
 8003496:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8003498:	4313      	orrs	r3, r2
 800349a:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	22ca      	movs	r2, #202	; 0xca
 80034a2:	625a      	str	r2, [r3, #36]	; 0x24
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	2253      	movs	r2, #83	; 0x53
 80034aa:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80034ac:	68f8      	ldr	r0, [r7, #12]
 80034ae:	f000 fb55 	bl	8003b5c <RTC_EnterInitMode>
 80034b2:	4603      	mov	r3, r0
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d00b      	beq.n	80034d0 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	22ff      	movs	r2, #255	; 0xff
 80034be:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	2204      	movs	r2, #4
 80034c4:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	2200      	movs	r2, #0
 80034ca:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 80034cc:	2301      	movs	r3, #1
 80034ce:	e047      	b.n	8003560 <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681a      	ldr	r2, [r3, #0]
 80034d4:	697b      	ldr	r3, [r7, #20]
 80034d6:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80034da:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80034de:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	689a      	ldr	r2, [r3, #8]
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80034ee:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	6899      	ldr	r1, [r3, #8]
 80034f6:	68bb      	ldr	r3, [r7, #8]
 80034f8:	68da      	ldr	r2, [r3, #12]
 80034fa:	68bb      	ldr	r3, [r7, #8]
 80034fc:	691b      	ldr	r3, [r3, #16]
 80034fe:	431a      	orrs	r2, r3
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	430a      	orrs	r2, r1
 8003506:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	68da      	ldr	r2, [r3, #12]
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003516:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	689b      	ldr	r3, [r3, #8]
 800351e:	f003 0320 	and.w	r3, r3, #32
 8003522:	2b00      	cmp	r3, #0
 8003524:	d111      	bne.n	800354a <HAL_RTC_SetTime+0x15c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003526:	68f8      	ldr	r0, [r7, #12]
 8003528:	f000 faf0 	bl	8003b0c <HAL_RTC_WaitForSynchro>
 800352c:	4603      	mov	r3, r0
 800352e:	2b00      	cmp	r3, #0
 8003530:	d00b      	beq.n	800354a <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	22ff      	movs	r2, #255	; 0xff
 8003538:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	2204      	movs	r2, #4
 800353e:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	2200      	movs	r2, #0
 8003544:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8003546:	2301      	movs	r3, #1
 8003548:	e00a      	b.n	8003560 <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	22ff      	movs	r2, #255	; 0xff
 8003550:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	2201      	movs	r2, #1
 8003556:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	2200      	movs	r2, #0
 800355c:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 800355e:	2300      	movs	r3, #0
  }
}
 8003560:	4618      	mov	r0, r3
 8003562:	371c      	adds	r7, #28
 8003564:	46bd      	mov	sp, r7
 8003566:	bd90      	pop	{r4, r7, pc}

08003568 <HAL_RTC_GetTime>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	b086      	sub	sp, #24
 800356c:	af00      	add	r7, sp, #0
 800356e:	60f8      	str	r0, [r7, #12]
 8003570:	60b9      	str	r1, [r7, #8]
 8003572:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8003574:	2300      	movs	r3, #0
 8003576:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800357e:	68bb      	ldr	r3, [r7, #8]
 8003580:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	691b      	ldr	r3, [r3, #16]
 8003588:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800358c:	68bb      	ldr	r3, [r7, #8]
 800358e:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800359a:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800359e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 80035a0:	697b      	ldr	r3, [r7, #20]
 80035a2:	0c1b      	lsrs	r3, r3, #16
 80035a4:	b2db      	uxtb	r3, r3
 80035a6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80035aa:	b2da      	uxtb	r2, r3
 80035ac:	68bb      	ldr	r3, [r7, #8]
 80035ae:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 80035b0:	697b      	ldr	r3, [r7, #20]
 80035b2:	0a1b      	lsrs	r3, r3, #8
 80035b4:	b2db      	uxtb	r3, r3
 80035b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80035ba:	b2da      	uxtb	r2, r3
 80035bc:	68bb      	ldr	r3, [r7, #8]
 80035be:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 80035c0:	697b      	ldr	r3, [r7, #20]
 80035c2:	b2db      	uxtb	r3, r3
 80035c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80035c8:	b2da      	uxtb	r2, r3
 80035ca:	68bb      	ldr	r3, [r7, #8]
 80035cc:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 80035ce:	697b      	ldr	r3, [r7, #20]
 80035d0:	0c1b      	lsrs	r3, r3, #16
 80035d2:	b2db      	uxtb	r3, r3
 80035d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035d8:	b2da      	uxtb	r2, r3
 80035da:	68bb      	ldr	r3, [r7, #8]
 80035dc:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d11a      	bne.n	800361a <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80035e4:	68bb      	ldr	r3, [r7, #8]
 80035e6:	781b      	ldrb	r3, [r3, #0]
 80035e8:	4618      	mov	r0, r3
 80035ea:	f000 fb01 	bl	8003bf0 <RTC_Bcd2ToByte>
 80035ee:	4603      	mov	r3, r0
 80035f0:	461a      	mov	r2, r3
 80035f2:	68bb      	ldr	r3, [r7, #8]
 80035f4:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80035f6:	68bb      	ldr	r3, [r7, #8]
 80035f8:	785b      	ldrb	r3, [r3, #1]
 80035fa:	4618      	mov	r0, r3
 80035fc:	f000 faf8 	bl	8003bf0 <RTC_Bcd2ToByte>
 8003600:	4603      	mov	r3, r0
 8003602:	461a      	mov	r2, r3
 8003604:	68bb      	ldr	r3, [r7, #8]
 8003606:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8003608:	68bb      	ldr	r3, [r7, #8]
 800360a:	789b      	ldrb	r3, [r3, #2]
 800360c:	4618      	mov	r0, r3
 800360e:	f000 faef 	bl	8003bf0 <RTC_Bcd2ToByte>
 8003612:	4603      	mov	r3, r0
 8003614:	461a      	mov	r2, r3
 8003616:	68bb      	ldr	r3, [r7, #8]
 8003618:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800361a:	2300      	movs	r3, #0
}
 800361c:	4618      	mov	r0, r3
 800361e:	3718      	adds	r7, #24
 8003620:	46bd      	mov	sp, r7
 8003622:	bd80      	pop	{r7, pc}

08003624 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003624:	b590      	push	{r4, r7, lr}
 8003626:	b087      	sub	sp, #28
 8003628:	af00      	add	r7, sp, #0
 800362a:	60f8      	str	r0, [r7, #12]
 800362c:	60b9      	str	r1, [r7, #8]
 800362e:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8003630:	2300      	movs	r3, #0
 8003632:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	7f1b      	ldrb	r3, [r3, #28]
 8003638:	2b01      	cmp	r3, #1
 800363a:	d101      	bne.n	8003640 <HAL_RTC_SetDate+0x1c>
 800363c:	2302      	movs	r3, #2
 800363e:	e094      	b.n	800376a <HAL_RTC_SetDate+0x146>
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	2201      	movs	r2, #1
 8003644:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	2202      	movs	r2, #2
 800364a:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2b00      	cmp	r3, #0
 8003650:	d10e      	bne.n	8003670 <HAL_RTC_SetDate+0x4c>
 8003652:	68bb      	ldr	r3, [r7, #8]
 8003654:	785b      	ldrb	r3, [r3, #1]
 8003656:	f003 0310 	and.w	r3, r3, #16
 800365a:	2b00      	cmp	r3, #0
 800365c:	d008      	beq.n	8003670 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800365e:	68bb      	ldr	r3, [r7, #8]
 8003660:	785b      	ldrb	r3, [r3, #1]
 8003662:	f023 0310 	bic.w	r3, r3, #16
 8003666:	b2db      	uxtb	r3, r3
 8003668:	330a      	adds	r3, #10
 800366a:	b2da      	uxtb	r2, r3
 800366c:	68bb      	ldr	r3, [r7, #8]
 800366e:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2b00      	cmp	r3, #0
 8003674:	d11c      	bne.n	80036b0 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8003676:	68bb      	ldr	r3, [r7, #8]
 8003678:	78db      	ldrb	r3, [r3, #3]
 800367a:	4618      	mov	r0, r3
 800367c:	f000 fa9a 	bl	8003bb4 <RTC_ByteToBcd2>
 8003680:	4603      	mov	r3, r0
 8003682:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8003684:	68bb      	ldr	r3, [r7, #8]
 8003686:	785b      	ldrb	r3, [r3, #1]
 8003688:	4618      	mov	r0, r3
 800368a:	f000 fa93 	bl	8003bb4 <RTC_ByteToBcd2>
 800368e:	4603      	mov	r3, r0
 8003690:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8003692:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8003694:	68bb      	ldr	r3, [r7, #8]
 8003696:	789b      	ldrb	r3, [r3, #2]
 8003698:	4618      	mov	r0, r3
 800369a:	f000 fa8b 	bl	8003bb4 <RTC_ByteToBcd2>
 800369e:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 80036a0:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 80036a4:	68bb      	ldr	r3, [r7, #8]
 80036a6:	781b      	ldrb	r3, [r3, #0]
 80036a8:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80036aa:	4313      	orrs	r3, r2
 80036ac:	617b      	str	r3, [r7, #20]
 80036ae:	e00e      	b.n	80036ce <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80036b0:	68bb      	ldr	r3, [r7, #8]
 80036b2:	78db      	ldrb	r3, [r3, #3]
 80036b4:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 80036b6:	68bb      	ldr	r3, [r7, #8]
 80036b8:	785b      	ldrb	r3, [r3, #1]
 80036ba:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80036bc:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 80036be:	68ba      	ldr	r2, [r7, #8]
 80036c0:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 80036c2:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 80036c4:	68bb      	ldr	r3, [r7, #8]
 80036c6:	781b      	ldrb	r3, [r3, #0]
 80036c8:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80036ca:	4313      	orrs	r3, r2
 80036cc:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	22ca      	movs	r2, #202	; 0xca
 80036d4:	625a      	str	r2, [r3, #36]	; 0x24
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	2253      	movs	r2, #83	; 0x53
 80036dc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80036de:	68f8      	ldr	r0, [r7, #12]
 80036e0:	f000 fa3c 	bl	8003b5c <RTC_EnterInitMode>
 80036e4:	4603      	mov	r3, r0
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d00b      	beq.n	8003702 <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	22ff      	movs	r2, #255	; 0xff
 80036f0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	2204      	movs	r2, #4
 80036f6:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	2200      	movs	r2, #0
 80036fc:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 80036fe:	2301      	movs	r3, #1
 8003700:	e033      	b.n	800376a <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	681a      	ldr	r2, [r3, #0]
 8003706:	697b      	ldr	r3, [r7, #20]
 8003708:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800370c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003710:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	68da      	ldr	r2, [r3, #12]
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003720:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	689b      	ldr	r3, [r3, #8]
 8003728:	f003 0320 	and.w	r3, r3, #32
 800372c:	2b00      	cmp	r3, #0
 800372e:	d111      	bne.n	8003754 <HAL_RTC_SetDate+0x130>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003730:	68f8      	ldr	r0, [r7, #12]
 8003732:	f000 f9eb 	bl	8003b0c <HAL_RTC_WaitForSynchro>
 8003736:	4603      	mov	r3, r0
 8003738:	2b00      	cmp	r3, #0
 800373a:	d00b      	beq.n	8003754 <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	22ff      	movs	r2, #255	; 0xff
 8003742:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	2204      	movs	r2, #4
 8003748:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	2200      	movs	r2, #0
 800374e:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8003750:	2301      	movs	r3, #1
 8003752:	e00a      	b.n	800376a <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	22ff      	movs	r2, #255	; 0xff
 800375a:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	2201      	movs	r2, #1
 8003760:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	2200      	movs	r2, #0
 8003766:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8003768:	2300      	movs	r3, #0
  }
}
 800376a:	4618      	mov	r0, r3
 800376c:	371c      	adds	r7, #28
 800376e:	46bd      	mov	sp, r7
 8003770:	bd90      	pop	{r4, r7, pc}

08003772 <HAL_RTC_GetDate>:
  * in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  * Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003772:	b580      	push	{r7, lr}
 8003774:	b086      	sub	sp, #24
 8003776:	af00      	add	r7, sp, #0
 8003778:	60f8      	str	r0, [r7, #12]
 800377a:	60b9      	str	r1, [r7, #8]
 800377c:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800377e:	2300      	movs	r3, #0
 8003780:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	685b      	ldr	r3, [r3, #4]
 8003788:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800378c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003790:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8003792:	697b      	ldr	r3, [r7, #20]
 8003794:	0c1b      	lsrs	r3, r3, #16
 8003796:	b2da      	uxtb	r2, r3
 8003798:	68bb      	ldr	r3, [r7, #8]
 800379a:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 800379c:	697b      	ldr	r3, [r7, #20]
 800379e:	0a1b      	lsrs	r3, r3, #8
 80037a0:	b2db      	uxtb	r3, r3
 80037a2:	f003 031f 	and.w	r3, r3, #31
 80037a6:	b2da      	uxtb	r2, r3
 80037a8:	68bb      	ldr	r3, [r7, #8]
 80037aa:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 80037ac:	697b      	ldr	r3, [r7, #20]
 80037ae:	b2db      	uxtb	r3, r3
 80037b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80037b4:	b2da      	uxtb	r2, r3
 80037b6:	68bb      	ldr	r3, [r7, #8]
 80037b8:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 80037ba:	697b      	ldr	r3, [r7, #20]
 80037bc:	0b5b      	lsrs	r3, r3, #13
 80037be:	b2db      	uxtb	r3, r3
 80037c0:	f003 0307 	and.w	r3, r3, #7
 80037c4:	b2da      	uxtb	r2, r3
 80037c6:	68bb      	ldr	r3, [r7, #8]
 80037c8:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d11a      	bne.n	8003806 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80037d0:	68bb      	ldr	r3, [r7, #8]
 80037d2:	78db      	ldrb	r3, [r3, #3]
 80037d4:	4618      	mov	r0, r3
 80037d6:	f000 fa0b 	bl	8003bf0 <RTC_Bcd2ToByte>
 80037da:	4603      	mov	r3, r0
 80037dc:	461a      	mov	r2, r3
 80037de:	68bb      	ldr	r3, [r7, #8]
 80037e0:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80037e2:	68bb      	ldr	r3, [r7, #8]
 80037e4:	785b      	ldrb	r3, [r3, #1]
 80037e6:	4618      	mov	r0, r3
 80037e8:	f000 fa02 	bl	8003bf0 <RTC_Bcd2ToByte>
 80037ec:	4603      	mov	r3, r0
 80037ee:	461a      	mov	r2, r3
 80037f0:	68bb      	ldr	r3, [r7, #8]
 80037f2:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80037f4:	68bb      	ldr	r3, [r7, #8]
 80037f6:	789b      	ldrb	r3, [r3, #2]
 80037f8:	4618      	mov	r0, r3
 80037fa:	f000 f9f9 	bl	8003bf0 <RTC_Bcd2ToByte>
 80037fe:	4603      	mov	r3, r0
 8003800:	461a      	mov	r2, r3
 8003802:	68bb      	ldr	r3, [r7, #8]
 8003804:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8003806:	2300      	movs	r3, #0
}
 8003808:	4618      	mov	r0, r3
 800380a:	3718      	adds	r7, #24
 800380c:	46bd      	mov	sp, r7
 800380e:	bd80      	pop	{r7, pc}

08003810 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8003810:	b590      	push	{r4, r7, lr}
 8003812:	b089      	sub	sp, #36	; 0x24
 8003814:	af00      	add	r7, sp, #0
 8003816:	60f8      	str	r0, [r7, #12]
 8003818:	60b9      	str	r1, [r7, #8]
 800381a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U, subsecondtmpreg = 0U;
 800381c:	2300      	movs	r3, #0
 800381e:	61fb      	str	r3, [r7, #28]
 8003820:	2300      	movs	r3, #0
 8003822:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = RTC_TIMEOUT_VALUE  * (SystemCoreClock / 32U / 1000U) ;
 8003824:	4b93      	ldr	r3, [pc, #588]	; (8003a74 <HAL_RTC_SetAlarm_IT+0x264>)
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	4a93      	ldr	r2, [pc, #588]	; (8003a78 <HAL_RTC_SetAlarm_IT+0x268>)
 800382a:	fba2 2303 	umull	r2, r3, r2, r3
 800382e:	0adb      	lsrs	r3, r3, #11
 8003830:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003834:	fb02 f303 	mul.w	r3, r2, r3
 8003838:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	7f1b      	ldrb	r3, [r3, #28]
 800383e:	2b01      	cmp	r3, #1
 8003840:	d101      	bne.n	8003846 <HAL_RTC_SetAlarm_IT+0x36>
 8003842:	2302      	movs	r3, #2
 8003844:	e111      	b.n	8003a6a <HAL_RTC_SetAlarm_IT+0x25a>
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	2201      	movs	r2, #1
 800384a:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	2202      	movs	r2, #2
 8003850:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	2b00      	cmp	r3, #0
 8003856:	d137      	bne.n	80038c8 <HAL_RTC_SetAlarm_IT+0xb8>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	689b      	ldr	r3, [r3, #8]
 800385e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003862:	2b00      	cmp	r3, #0
 8003864:	d102      	bne.n	800386c <HAL_RTC_SetAlarm_IT+0x5c>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8003866:	68bb      	ldr	r3, [r7, #8]
 8003868:	2200      	movs	r2, #0
 800386a:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 800386c:	68bb      	ldr	r3, [r7, #8]
 800386e:	781b      	ldrb	r3, [r3, #0]
 8003870:	4618      	mov	r0, r3
 8003872:	f000 f99f 	bl	8003bb4 <RTC_ByteToBcd2>
 8003876:	4603      	mov	r3, r0
 8003878:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 800387a:	68bb      	ldr	r3, [r7, #8]
 800387c:	785b      	ldrb	r3, [r3, #1]
 800387e:	4618      	mov	r0, r3
 8003880:	f000 f998 	bl	8003bb4 <RTC_ByteToBcd2>
 8003884:	4603      	mov	r3, r0
 8003886:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8003888:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 800388a:	68bb      	ldr	r3, [r7, #8]
 800388c:	789b      	ldrb	r3, [r3, #2]
 800388e:	4618      	mov	r0, r3
 8003890:	f000 f990 	bl	8003bb4 <RTC_ByteToBcd2>
 8003894:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8003896:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800389a:	68bb      	ldr	r3, [r7, #8]
 800389c:	78db      	ldrb	r3, [r3, #3]
 800389e:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 80038a0:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 80038a4:	68bb      	ldr	r3, [r7, #8]
 80038a6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80038aa:	4618      	mov	r0, r3
 80038ac:	f000 f982 	bl	8003bb4 <RTC_ByteToBcd2>
 80038b0:	4603      	mov	r3, r0
 80038b2:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 80038b4:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80038b8:	68bb      	ldr	r3, [r7, #8]
 80038ba:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 80038bc:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80038be:	68bb      	ldr	r3, [r7, #8]
 80038c0:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 80038c2:	4313      	orrs	r3, r2
 80038c4:	61fb      	str	r3, [r7, #28]
 80038c6:	e023      	b.n	8003910 <HAL_RTC_SetAlarm_IT+0x100>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	689b      	ldr	r3, [r3, #8]
 80038ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d102      	bne.n	80038dc <HAL_RTC_SetAlarm_IT+0xcc>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80038d6:	68bb      	ldr	r3, [r7, #8]
 80038d8:	2200      	movs	r2, #0
 80038da:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 80038dc:	68bb      	ldr	r3, [r7, #8]
 80038de:	781b      	ldrb	r3, [r3, #0]
 80038e0:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 80038e2:	68bb      	ldr	r3, [r7, #8]
 80038e4:	785b      	ldrb	r3, [r3, #1]
 80038e6:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 80038e8:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 80038ea:	68ba      	ldr	r2, [r7, #8]
 80038ec:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 80038ee:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 80038f0:	68bb      	ldr	r3, [r7, #8]
 80038f2:	78db      	ldrb	r3, [r3, #3]
 80038f4:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 80038f6:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 80038f8:	68bb      	ldr	r3, [r7, #8]
 80038fa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80038fe:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8003900:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8003902:	68bb      	ldr	r3, [r7, #8]
 8003904:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8003906:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8003908:	68bb      	ldr	r3, [r7, #8]
 800390a:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 800390c:	4313      	orrs	r3, r2
 800390e:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8003910:	68bb      	ldr	r3, [r7, #8]
 8003912:	685a      	ldr	r2, [r3, #4]
 8003914:	68bb      	ldr	r3, [r7, #8]
 8003916:	699b      	ldr	r3, [r3, #24]
 8003918:	4313      	orrs	r3, r2
 800391a:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	22ca      	movs	r2, #202	; 0xca
 8003922:	625a      	str	r2, [r3, #36]	; 0x24
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	2253      	movs	r2, #83	; 0x53
 800392a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 800392c:	68bb      	ldr	r3, [r7, #8]
 800392e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003930:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003934:	d141      	bne.n	80039ba <HAL_RTC_SetAlarm_IT+0x1aa>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	689a      	ldr	r2, [r3, #8]
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003944:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	68db      	ldr	r3, [r3, #12]
 800394c:	b2da      	uxtb	r2, r3
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8003956:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    do
    {
      if (count-- == 0U)
 8003958:	697b      	ldr	r3, [r7, #20]
 800395a:	1e5a      	subs	r2, r3, #1
 800395c:	617a      	str	r2, [r7, #20]
 800395e:	2b00      	cmp	r3, #0
 8003960:	d10b      	bne.n	800397a <HAL_RTC_SetAlarm_IT+0x16a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	22ff      	movs	r2, #255	; 0xff
 8003968:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	2203      	movs	r2, #3
 800396e:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	2200      	movs	r2, #0
 8003974:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8003976:	2303      	movs	r3, #3
 8003978:	e077      	b.n	8003a6a <HAL_RTC_SetAlarm_IT+0x25a>
      }
    }
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET);
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	68db      	ldr	r3, [r3, #12]
 8003980:	f003 0301 	and.w	r3, r3, #1
 8003984:	2b00      	cmp	r3, #0
 8003986:	d0e7      	beq.n	8003958 <HAL_RTC_SetAlarm_IT+0x148>

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	69fa      	ldr	r2, [r7, #28]
 800398e:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	69ba      	ldr	r2, [r7, #24]
 8003996:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	689a      	ldr	r2, [r3, #8]
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80039a6:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc,RTC_IT_ALRA);
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	689a      	ldr	r2, [r3, #8]
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80039b6:	609a      	str	r2, [r3, #8]
 80039b8:	e040      	b.n	8003a3c <HAL_RTC_SetAlarm_IT+0x22c>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	689a      	ldr	r2, [r3, #8]
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80039c8:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	68db      	ldr	r3, [r3, #12]
 80039d0:	b2da      	uxtb	r2, r3
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f462 7220 	orn	r2, r2, #640	; 0x280
 80039da:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    do
    {
      if (count-- == 0U)
 80039dc:	697b      	ldr	r3, [r7, #20]
 80039de:	1e5a      	subs	r2, r3, #1
 80039e0:	617a      	str	r2, [r7, #20]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d10b      	bne.n	80039fe <HAL_RTC_SetAlarm_IT+0x1ee>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	22ff      	movs	r2, #255	; 0xff
 80039ec:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	2203      	movs	r2, #3
 80039f2:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	2200      	movs	r2, #0
 80039f8:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 80039fa:	2303      	movs	r3, #3
 80039fc:	e035      	b.n	8003a6a <HAL_RTC_SetAlarm_IT+0x25a>
      }
    }
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET);
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	68db      	ldr	r3, [r3, #12]
 8003a04:	f003 0302 	and.w	r3, r3, #2
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d0e7      	beq.n	80039dc <HAL_RTC_SetAlarm_IT+0x1cc>

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	69fa      	ldr	r2, [r7, #28]
 8003a12:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	69ba      	ldr	r2, [r7, #24]
 8003a1a:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	689a      	ldr	r2, [r3, #8]
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a2a:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	689a      	ldr	r2, [r3, #8]
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003a3a:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8003a3c:	4b0f      	ldr	r3, [pc, #60]	; (8003a7c <HAL_RTC_SetAlarm_IT+0x26c>)
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	4a0e      	ldr	r2, [pc, #56]	; (8003a7c <HAL_RTC_SetAlarm_IT+0x26c>)
 8003a42:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a46:	6013      	str	r3, [r2, #0]

  EXTI->RTSR |= RTC_EXTI_LINE_ALARM_EVENT;
 8003a48:	4b0c      	ldr	r3, [pc, #48]	; (8003a7c <HAL_RTC_SetAlarm_IT+0x26c>)
 8003a4a:	689b      	ldr	r3, [r3, #8]
 8003a4c:	4a0b      	ldr	r2, [pc, #44]	; (8003a7c <HAL_RTC_SetAlarm_IT+0x26c>)
 8003a4e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a52:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	22ff      	movs	r2, #255	; 0xff
 8003a5a:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	2201      	movs	r2, #1
 8003a60:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	2200      	movs	r2, #0
 8003a66:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8003a68:	2300      	movs	r3, #0
}
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	3724      	adds	r7, #36	; 0x24
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	bd90      	pop	{r4, r7, pc}
 8003a72:	bf00      	nop
 8003a74:	20000004 	.word	0x20000004
 8003a78:	10624dd3 	.word	0x10624dd3
 8003a7c:	40013c00 	.word	0x40013c00

08003a80 <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef* hrtc)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b082      	sub	sp, #8
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != (uint32_t)RESET)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	689b      	ldr	r3, [r3, #8]
 8003a8e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d012      	beq.n	8003abc <HAL_RTC_AlarmIRQHandler+0x3c>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != (uint32_t)RESET)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	68db      	ldr	r3, [r3, #12]
 8003a9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d00b      	beq.n	8003abc <HAL_RTC_AlarmIRQHandler+0x3c>
    {
      /* AlarmA callback */
    #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
    #else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8003aa4:	6878      	ldr	r0, [r7, #4]
 8003aa6:	f7fd fafb 	bl	80010a0 <HAL_RTC_AlarmAEventCallback>
    #endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc,RTC_FLAG_ALRAF);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	68db      	ldr	r3, [r3, #12]
 8003ab0:	b2da      	uxtb	r2, r3
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8003aba:	60da      	str	r2, [r3, #12]
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != (uint32_t)RESET)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	689b      	ldr	r3, [r3, #8]
 8003ac2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d012      	beq.n	8003af0 <HAL_RTC_AlarmIRQHandler+0x70>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != (uint32_t)RESET)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	68db      	ldr	r3, [r3, #12]
 8003ad0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d00b      	beq.n	8003af0 <HAL_RTC_AlarmIRQHandler+0x70>
    {
      /* AlarmB callback */
    #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
    #else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8003ad8:	6878      	ldr	r0, [r7, #4]
 8003ada:	f000 f8a7 	bl	8003c2c <HAL_RTCEx_AlarmBEventCallback>
    #endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc,RTC_FLAG_ALRBF);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	68db      	ldr	r3, [r3, #12]
 8003ae4:	b2da      	uxtb	r2, r3
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f462 7220 	orn	r2, r2, #640	; 0x280
 8003aee:	60da      	str	r2, [r3, #12]
    }
  }

  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8003af0:	4b05      	ldr	r3, [pc, #20]	; (8003b08 <HAL_RTC_AlarmIRQHandler+0x88>)
 8003af2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003af6:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2201      	movs	r2, #1
 8003afc:	775a      	strb	r2, [r3, #29]
}
 8003afe:	bf00      	nop
 8003b00:	3708      	adds	r7, #8
 8003b02:	46bd      	mov	sp, r7
 8003b04:	bd80      	pop	{r7, pc}
 8003b06:	bf00      	nop
 8003b08:	40013c00 	.word	0x40013c00

08003b0c <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	b084      	sub	sp, #16
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003b14:	2300      	movs	r3, #0
 8003b16:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	68da      	ldr	r2, [r3, #12]
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003b26:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003b28:	f7fd ff22 	bl	8001970 <HAL_GetTick>
 8003b2c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8003b2e:	e009      	b.n	8003b44 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8003b30:	f7fd ff1e 	bl	8001970 <HAL_GetTick>
 8003b34:	4602      	mov	r2, r0
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	1ad3      	subs	r3, r2, r3
 8003b3a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003b3e:	d901      	bls.n	8003b44 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8003b40:	2303      	movs	r3, #3
 8003b42:	e007      	b.n	8003b54 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	68db      	ldr	r3, [r3, #12]
 8003b4a:	f003 0320 	and.w	r3, r3, #32
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d0ee      	beq.n	8003b30 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8003b52:	2300      	movs	r3, #0
}
 8003b54:	4618      	mov	r0, r3
 8003b56:	3710      	adds	r7, #16
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	bd80      	pop	{r7, pc}

08003b5c <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	b084      	sub	sp, #16
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003b64:	2300      	movs	r3, #0
 8003b66:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	68db      	ldr	r3, [r3, #12]
 8003b6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d119      	bne.n	8003baa <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f04f 32ff 	mov.w	r2, #4294967295
 8003b7e:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003b80:	f7fd fef6 	bl	8001970 <HAL_GetTick>
 8003b84:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8003b86:	e009      	b.n	8003b9c <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8003b88:	f7fd fef2 	bl	8001970 <HAL_GetTick>
 8003b8c:	4602      	mov	r2, r0
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	1ad3      	subs	r3, r2, r3
 8003b92:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003b96:	d901      	bls.n	8003b9c <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8003b98:	2303      	movs	r3, #3
 8003b9a:	e007      	b.n	8003bac <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	68db      	ldr	r3, [r3, #12]
 8003ba2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d0ee      	beq.n	8003b88 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8003baa:	2300      	movs	r3, #0
}
 8003bac:	4618      	mov	r0, r3
 8003bae:	3710      	adds	r7, #16
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	bd80      	pop	{r7, pc}

08003bb4 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8003bb4:	b480      	push	{r7}
 8003bb6:	b085      	sub	sp, #20
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	4603      	mov	r3, r0
 8003bbc:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	60fb      	str	r3, [r7, #12]

  while(Value >= 10U)
 8003bc2:	e005      	b.n	8003bd0 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	3301      	adds	r3, #1
 8003bc8:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8003bca:	79fb      	ldrb	r3, [r7, #7]
 8003bcc:	3b0a      	subs	r3, #10
 8003bce:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10U)
 8003bd0:	79fb      	ldrb	r3, [r7, #7]
 8003bd2:	2b09      	cmp	r3, #9
 8003bd4:	d8f6      	bhi.n	8003bc4 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	b2db      	uxtb	r3, r3
 8003bda:	011b      	lsls	r3, r3, #4
 8003bdc:	b2da      	uxtb	r2, r3
 8003bde:	79fb      	ldrb	r3, [r7, #7]
 8003be0:	4313      	orrs	r3, r2
 8003be2:	b2db      	uxtb	r3, r3
}
 8003be4:	4618      	mov	r0, r3
 8003be6:	3714      	adds	r7, #20
 8003be8:	46bd      	mov	sp, r7
 8003bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bee:	4770      	bx	lr

08003bf0 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8003bf0:	b480      	push	{r7}
 8003bf2:	b085      	sub	sp, #20
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	4603      	mov	r3, r0
 8003bf8:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8003bfe:	79fb      	ldrb	r3, [r7, #7]
 8003c00:	091b      	lsrs	r3, r3, #4
 8003c02:	b2db      	uxtb	r3, r3
 8003c04:	461a      	mov	r2, r3
 8003c06:	4613      	mov	r3, r2
 8003c08:	009b      	lsls	r3, r3, #2
 8003c0a:	4413      	add	r3, r2
 8003c0c:	005b      	lsls	r3, r3, #1
 8003c0e:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 8003c10:	79fb      	ldrb	r3, [r7, #7]
 8003c12:	f003 030f 	and.w	r3, r3, #15
 8003c16:	b2da      	uxtb	r2, r3
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	b2db      	uxtb	r3, r3
 8003c1c:	4413      	add	r3, r2
 8003c1e:	b2db      	uxtb	r3, r3
}
 8003c20:	4618      	mov	r0, r3
 8003c22:	3714      	adds	r7, #20
 8003c24:	46bd      	mov	sp, r7
 8003c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2a:	4770      	bx	lr

08003c2c <HAL_RTCEx_AlarmBEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8003c2c:	b480      	push	{r7}
 8003c2e:	b083      	sub	sp, #12
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTC_AlarmBEventCallback could be implemented in the user file
   */
}
 8003c34:	bf00      	nop
 8003c36:	370c      	adds	r7, #12
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3e:	4770      	bx	lr

08003c40 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003c40:	b580      	push	{r7, lr}
 8003c42:	b082      	sub	sp, #8
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d101      	bne.n	8003c52 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003c4e:	2301      	movs	r3, #1
 8003c50:	e01d      	b.n	8003c8e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c58:	b2db      	uxtb	r3, r3
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d106      	bne.n	8003c6c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	2200      	movs	r2, #0
 8003c62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003c66:	6878      	ldr	r0, [r7, #4]
 8003c68:	f7fd fdca 	bl	8001800 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2202      	movs	r2, #2
 8003c70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681a      	ldr	r2, [r3, #0]
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	3304      	adds	r3, #4
 8003c7c:	4619      	mov	r1, r3
 8003c7e:	4610      	mov	r0, r2
 8003c80:	f000 fa40 	bl	8004104 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2201      	movs	r2, #1
 8003c88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003c8c:	2300      	movs	r3, #0
}
 8003c8e:	4618      	mov	r0, r3
 8003c90:	3708      	adds	r7, #8
 8003c92:	46bd      	mov	sp, r7
 8003c94:	bd80      	pop	{r7, pc}

08003c96 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003c96:	b480      	push	{r7}
 8003c98:	b085      	sub	sp, #20
 8003c9a:	af00      	add	r7, sp, #0
 8003c9c:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	68da      	ldr	r2, [r3, #12]
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f042 0201 	orr.w	r2, r2, #1
 8003cac:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	689b      	ldr	r3, [r3, #8]
 8003cb4:	f003 0307 	and.w	r3, r3, #7
 8003cb8:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	2b06      	cmp	r3, #6
 8003cbe:	d007      	beq.n	8003cd0 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	681a      	ldr	r2, [r3, #0]
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f042 0201 	orr.w	r2, r2, #1
 8003cce:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003cd0:	2300      	movs	r3, #0
}
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	3714      	adds	r7, #20
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cdc:	4770      	bx	lr

08003cde <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8003cde:	b480      	push	{r7}
 8003ce0:	b083      	sub	sp, #12
 8003ce2:	af00      	add	r7, sp, #0
 8003ce4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	68da      	ldr	r2, [r3, #12]
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f022 0201 	bic.w	r2, r2, #1
 8003cf4:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	6a1a      	ldr	r2, [r3, #32]
 8003cfc:	f241 1311 	movw	r3, #4369	; 0x1111
 8003d00:	4013      	ands	r3, r2
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d10f      	bne.n	8003d26 <HAL_TIM_Base_Stop_IT+0x48>
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	6a1a      	ldr	r2, [r3, #32]
 8003d0c:	f240 4344 	movw	r3, #1092	; 0x444
 8003d10:	4013      	ands	r3, r2
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d107      	bne.n	8003d26 <HAL_TIM_Base_Stop_IT+0x48>
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	681a      	ldr	r2, [r3, #0]
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f022 0201 	bic.w	r2, r2, #1
 8003d24:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003d26:	2300      	movs	r3, #0
}
 8003d28:	4618      	mov	r0, r3
 8003d2a:	370c      	adds	r7, #12
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d32:	4770      	bx	lr

08003d34 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b082      	sub	sp, #8
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	691b      	ldr	r3, [r3, #16]
 8003d42:	f003 0302 	and.w	r3, r3, #2
 8003d46:	2b02      	cmp	r3, #2
 8003d48:	d122      	bne.n	8003d90 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	68db      	ldr	r3, [r3, #12]
 8003d50:	f003 0302 	and.w	r3, r3, #2
 8003d54:	2b02      	cmp	r3, #2
 8003d56:	d11b      	bne.n	8003d90 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f06f 0202 	mvn.w	r2, #2
 8003d60:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	2201      	movs	r2, #1
 8003d66:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	699b      	ldr	r3, [r3, #24]
 8003d6e:	f003 0303 	and.w	r3, r3, #3
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d003      	beq.n	8003d7e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003d76:	6878      	ldr	r0, [r7, #4]
 8003d78:	f000 f9a5 	bl	80040c6 <HAL_TIM_IC_CaptureCallback>
 8003d7c:	e005      	b.n	8003d8a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d7e:	6878      	ldr	r0, [r7, #4]
 8003d80:	f000 f997 	bl	80040b2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d84:	6878      	ldr	r0, [r7, #4]
 8003d86:	f000 f9a8 	bl	80040da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	691b      	ldr	r3, [r3, #16]
 8003d96:	f003 0304 	and.w	r3, r3, #4
 8003d9a:	2b04      	cmp	r3, #4
 8003d9c:	d122      	bne.n	8003de4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	68db      	ldr	r3, [r3, #12]
 8003da4:	f003 0304 	and.w	r3, r3, #4
 8003da8:	2b04      	cmp	r3, #4
 8003daa:	d11b      	bne.n	8003de4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f06f 0204 	mvn.w	r2, #4
 8003db4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	2202      	movs	r2, #2
 8003dba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	699b      	ldr	r3, [r3, #24]
 8003dc2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d003      	beq.n	8003dd2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003dca:	6878      	ldr	r0, [r7, #4]
 8003dcc:	f000 f97b 	bl	80040c6 <HAL_TIM_IC_CaptureCallback>
 8003dd0:	e005      	b.n	8003dde <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003dd2:	6878      	ldr	r0, [r7, #4]
 8003dd4:	f000 f96d 	bl	80040b2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003dd8:	6878      	ldr	r0, [r7, #4]
 8003dda:	f000 f97e 	bl	80040da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	2200      	movs	r2, #0
 8003de2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	691b      	ldr	r3, [r3, #16]
 8003dea:	f003 0308 	and.w	r3, r3, #8
 8003dee:	2b08      	cmp	r3, #8
 8003df0:	d122      	bne.n	8003e38 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	68db      	ldr	r3, [r3, #12]
 8003df8:	f003 0308 	and.w	r3, r3, #8
 8003dfc:	2b08      	cmp	r3, #8
 8003dfe:	d11b      	bne.n	8003e38 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f06f 0208 	mvn.w	r2, #8
 8003e08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	2204      	movs	r2, #4
 8003e0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	69db      	ldr	r3, [r3, #28]
 8003e16:	f003 0303 	and.w	r3, r3, #3
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d003      	beq.n	8003e26 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e1e:	6878      	ldr	r0, [r7, #4]
 8003e20:	f000 f951 	bl	80040c6 <HAL_TIM_IC_CaptureCallback>
 8003e24:	e005      	b.n	8003e32 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e26:	6878      	ldr	r0, [r7, #4]
 8003e28:	f000 f943 	bl	80040b2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e2c:	6878      	ldr	r0, [r7, #4]
 8003e2e:	f000 f954 	bl	80040da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	2200      	movs	r2, #0
 8003e36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	691b      	ldr	r3, [r3, #16]
 8003e3e:	f003 0310 	and.w	r3, r3, #16
 8003e42:	2b10      	cmp	r3, #16
 8003e44:	d122      	bne.n	8003e8c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	68db      	ldr	r3, [r3, #12]
 8003e4c:	f003 0310 	and.w	r3, r3, #16
 8003e50:	2b10      	cmp	r3, #16
 8003e52:	d11b      	bne.n	8003e8c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f06f 0210 	mvn.w	r2, #16
 8003e5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	2208      	movs	r2, #8
 8003e62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	69db      	ldr	r3, [r3, #28]
 8003e6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d003      	beq.n	8003e7a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e72:	6878      	ldr	r0, [r7, #4]
 8003e74:	f000 f927 	bl	80040c6 <HAL_TIM_IC_CaptureCallback>
 8003e78:	e005      	b.n	8003e86 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e7a:	6878      	ldr	r0, [r7, #4]
 8003e7c:	f000 f919 	bl	80040b2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e80:	6878      	ldr	r0, [r7, #4]
 8003e82:	f000 f92a 	bl	80040da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	2200      	movs	r2, #0
 8003e8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	691b      	ldr	r3, [r3, #16]
 8003e92:	f003 0301 	and.w	r3, r3, #1
 8003e96:	2b01      	cmp	r3, #1
 8003e98:	d10e      	bne.n	8003eb8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	68db      	ldr	r3, [r3, #12]
 8003ea0:	f003 0301 	and.w	r3, r3, #1
 8003ea4:	2b01      	cmp	r3, #1
 8003ea6:	d107      	bne.n	8003eb8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f06f 0201 	mvn.w	r2, #1
 8003eb0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003eb2:	6878      	ldr	r0, [r7, #4]
 8003eb4:	f7fd f93e 	bl	8001134 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	691b      	ldr	r3, [r3, #16]
 8003ebe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ec2:	2b80      	cmp	r3, #128	; 0x80
 8003ec4:	d10e      	bne.n	8003ee4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	68db      	ldr	r3, [r3, #12]
 8003ecc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ed0:	2b80      	cmp	r3, #128	; 0x80
 8003ed2:	d107      	bne.n	8003ee4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003edc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003ede:	6878      	ldr	r0, [r7, #4]
 8003ee0:	f000 fad0 	bl	8004484 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	691b      	ldr	r3, [r3, #16]
 8003eea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003eee:	2b40      	cmp	r3, #64	; 0x40
 8003ef0:	d10e      	bne.n	8003f10 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	68db      	ldr	r3, [r3, #12]
 8003ef8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003efc:	2b40      	cmp	r3, #64	; 0x40
 8003efe:	d107      	bne.n	8003f10 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003f08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003f0a:	6878      	ldr	r0, [r7, #4]
 8003f0c:	f000 f8ef 	bl	80040ee <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	691b      	ldr	r3, [r3, #16]
 8003f16:	f003 0320 	and.w	r3, r3, #32
 8003f1a:	2b20      	cmp	r3, #32
 8003f1c:	d10e      	bne.n	8003f3c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	68db      	ldr	r3, [r3, #12]
 8003f24:	f003 0320 	and.w	r3, r3, #32
 8003f28:	2b20      	cmp	r3, #32
 8003f2a:	d107      	bne.n	8003f3c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f06f 0220 	mvn.w	r2, #32
 8003f34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003f36:	6878      	ldr	r0, [r7, #4]
 8003f38:	f000 fa9a 	bl	8004470 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003f3c:	bf00      	nop
 8003f3e:	3708      	adds	r7, #8
 8003f40:	46bd      	mov	sp, r7
 8003f42:	bd80      	pop	{r7, pc}

08003f44 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	b084      	sub	sp, #16
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
 8003f4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f54:	2b01      	cmp	r3, #1
 8003f56:	d101      	bne.n	8003f5c <HAL_TIM_ConfigClockSource+0x18>
 8003f58:	2302      	movs	r3, #2
 8003f5a:	e0a6      	b.n	80040aa <HAL_TIM_ConfigClockSource+0x166>
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2201      	movs	r2, #1
 8003f60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2202      	movs	r2, #2
 8003f68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	689b      	ldr	r3, [r3, #8]
 8003f72:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003f7a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003f82:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	68fa      	ldr	r2, [r7, #12]
 8003f8a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003f8c:	683b      	ldr	r3, [r7, #0]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	2b40      	cmp	r3, #64	; 0x40
 8003f92:	d067      	beq.n	8004064 <HAL_TIM_ConfigClockSource+0x120>
 8003f94:	2b40      	cmp	r3, #64	; 0x40
 8003f96:	d80b      	bhi.n	8003fb0 <HAL_TIM_ConfigClockSource+0x6c>
 8003f98:	2b10      	cmp	r3, #16
 8003f9a:	d073      	beq.n	8004084 <HAL_TIM_ConfigClockSource+0x140>
 8003f9c:	2b10      	cmp	r3, #16
 8003f9e:	d802      	bhi.n	8003fa6 <HAL_TIM_ConfigClockSource+0x62>
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d06f      	beq.n	8004084 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8003fa4:	e078      	b.n	8004098 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003fa6:	2b20      	cmp	r3, #32
 8003fa8:	d06c      	beq.n	8004084 <HAL_TIM_ConfigClockSource+0x140>
 8003faa:	2b30      	cmp	r3, #48	; 0x30
 8003fac:	d06a      	beq.n	8004084 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8003fae:	e073      	b.n	8004098 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003fb0:	2b70      	cmp	r3, #112	; 0x70
 8003fb2:	d00d      	beq.n	8003fd0 <HAL_TIM_ConfigClockSource+0x8c>
 8003fb4:	2b70      	cmp	r3, #112	; 0x70
 8003fb6:	d804      	bhi.n	8003fc2 <HAL_TIM_ConfigClockSource+0x7e>
 8003fb8:	2b50      	cmp	r3, #80	; 0x50
 8003fba:	d033      	beq.n	8004024 <HAL_TIM_ConfigClockSource+0xe0>
 8003fbc:	2b60      	cmp	r3, #96	; 0x60
 8003fbe:	d041      	beq.n	8004044 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8003fc0:	e06a      	b.n	8004098 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003fc2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003fc6:	d066      	beq.n	8004096 <HAL_TIM_ConfigClockSource+0x152>
 8003fc8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003fcc:	d017      	beq.n	8003ffe <HAL_TIM_ConfigClockSource+0xba>
      break;
 8003fce:	e063      	b.n	8004098 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	6818      	ldr	r0, [r3, #0]
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	6899      	ldr	r1, [r3, #8]
 8003fd8:	683b      	ldr	r3, [r7, #0]
 8003fda:	685a      	ldr	r2, [r3, #4]
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	68db      	ldr	r3, [r3, #12]
 8003fe0:	f000 f9aa 	bl	8004338 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	689b      	ldr	r3, [r3, #8]
 8003fea:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003ff2:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	68fa      	ldr	r2, [r7, #12]
 8003ffa:	609a      	str	r2, [r3, #8]
      break;
 8003ffc:	e04c      	b.n	8004098 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6818      	ldr	r0, [r3, #0]
 8004002:	683b      	ldr	r3, [r7, #0]
 8004004:	6899      	ldr	r1, [r3, #8]
 8004006:	683b      	ldr	r3, [r7, #0]
 8004008:	685a      	ldr	r2, [r3, #4]
 800400a:	683b      	ldr	r3, [r7, #0]
 800400c:	68db      	ldr	r3, [r3, #12]
 800400e:	f000 f993 	bl	8004338 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	689a      	ldr	r2, [r3, #8]
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004020:	609a      	str	r2, [r3, #8]
      break;
 8004022:	e039      	b.n	8004098 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6818      	ldr	r0, [r3, #0]
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	6859      	ldr	r1, [r3, #4]
 800402c:	683b      	ldr	r3, [r7, #0]
 800402e:	68db      	ldr	r3, [r3, #12]
 8004030:	461a      	mov	r2, r3
 8004032:	f000 f907 	bl	8004244 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	2150      	movs	r1, #80	; 0x50
 800403c:	4618      	mov	r0, r3
 800403e:	f000 f960 	bl	8004302 <TIM_ITRx_SetConfig>
      break;
 8004042:	e029      	b.n	8004098 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	6818      	ldr	r0, [r3, #0]
 8004048:	683b      	ldr	r3, [r7, #0]
 800404a:	6859      	ldr	r1, [r3, #4]
 800404c:	683b      	ldr	r3, [r7, #0]
 800404e:	68db      	ldr	r3, [r3, #12]
 8004050:	461a      	mov	r2, r3
 8004052:	f000 f926 	bl	80042a2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	2160      	movs	r1, #96	; 0x60
 800405c:	4618      	mov	r0, r3
 800405e:	f000 f950 	bl	8004302 <TIM_ITRx_SetConfig>
      break;
 8004062:	e019      	b.n	8004098 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6818      	ldr	r0, [r3, #0]
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	6859      	ldr	r1, [r3, #4]
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	68db      	ldr	r3, [r3, #12]
 8004070:	461a      	mov	r2, r3
 8004072:	f000 f8e7 	bl	8004244 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	2140      	movs	r1, #64	; 0x40
 800407c:	4618      	mov	r0, r3
 800407e:	f000 f940 	bl	8004302 <TIM_ITRx_SetConfig>
      break;
 8004082:	e009      	b.n	8004098 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681a      	ldr	r2, [r3, #0]
 8004088:	683b      	ldr	r3, [r7, #0]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	4619      	mov	r1, r3
 800408e:	4610      	mov	r0, r2
 8004090:	f000 f937 	bl	8004302 <TIM_ITRx_SetConfig>
      break;
 8004094:	e000      	b.n	8004098 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8004096:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2201      	movs	r2, #1
 800409c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2200      	movs	r2, #0
 80040a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80040a8:	2300      	movs	r3, #0
}
 80040aa:	4618      	mov	r0, r3
 80040ac:	3710      	adds	r7, #16
 80040ae:	46bd      	mov	sp, r7
 80040b0:	bd80      	pop	{r7, pc}

080040b2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80040b2:	b480      	push	{r7}
 80040b4:	b083      	sub	sp, #12
 80040b6:	af00      	add	r7, sp, #0
 80040b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80040ba:	bf00      	nop
 80040bc:	370c      	adds	r7, #12
 80040be:	46bd      	mov	sp, r7
 80040c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c4:	4770      	bx	lr

080040c6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80040c6:	b480      	push	{r7}
 80040c8:	b083      	sub	sp, #12
 80040ca:	af00      	add	r7, sp, #0
 80040cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80040ce:	bf00      	nop
 80040d0:	370c      	adds	r7, #12
 80040d2:	46bd      	mov	sp, r7
 80040d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d8:	4770      	bx	lr

080040da <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80040da:	b480      	push	{r7}
 80040dc:	b083      	sub	sp, #12
 80040de:	af00      	add	r7, sp, #0
 80040e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80040e2:	bf00      	nop
 80040e4:	370c      	adds	r7, #12
 80040e6:	46bd      	mov	sp, r7
 80040e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ec:	4770      	bx	lr

080040ee <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80040ee:	b480      	push	{r7}
 80040f0:	b083      	sub	sp, #12
 80040f2:	af00      	add	r7, sp, #0
 80040f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80040f6:	bf00      	nop
 80040f8:	370c      	adds	r7, #12
 80040fa:	46bd      	mov	sp, r7
 80040fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004100:	4770      	bx	lr
	...

08004104 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004104:	b480      	push	{r7}
 8004106:	b085      	sub	sp, #20
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
 800410c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	4a40      	ldr	r2, [pc, #256]	; (8004218 <TIM_Base_SetConfig+0x114>)
 8004118:	4293      	cmp	r3, r2
 800411a:	d013      	beq.n	8004144 <TIM_Base_SetConfig+0x40>
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004122:	d00f      	beq.n	8004144 <TIM_Base_SetConfig+0x40>
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	4a3d      	ldr	r2, [pc, #244]	; (800421c <TIM_Base_SetConfig+0x118>)
 8004128:	4293      	cmp	r3, r2
 800412a:	d00b      	beq.n	8004144 <TIM_Base_SetConfig+0x40>
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	4a3c      	ldr	r2, [pc, #240]	; (8004220 <TIM_Base_SetConfig+0x11c>)
 8004130:	4293      	cmp	r3, r2
 8004132:	d007      	beq.n	8004144 <TIM_Base_SetConfig+0x40>
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	4a3b      	ldr	r2, [pc, #236]	; (8004224 <TIM_Base_SetConfig+0x120>)
 8004138:	4293      	cmp	r3, r2
 800413a:	d003      	beq.n	8004144 <TIM_Base_SetConfig+0x40>
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	4a3a      	ldr	r2, [pc, #232]	; (8004228 <TIM_Base_SetConfig+0x124>)
 8004140:	4293      	cmp	r3, r2
 8004142:	d108      	bne.n	8004156 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800414a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	685b      	ldr	r3, [r3, #4]
 8004150:	68fa      	ldr	r2, [r7, #12]
 8004152:	4313      	orrs	r3, r2
 8004154:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	4a2f      	ldr	r2, [pc, #188]	; (8004218 <TIM_Base_SetConfig+0x114>)
 800415a:	4293      	cmp	r3, r2
 800415c:	d02b      	beq.n	80041b6 <TIM_Base_SetConfig+0xb2>
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004164:	d027      	beq.n	80041b6 <TIM_Base_SetConfig+0xb2>
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	4a2c      	ldr	r2, [pc, #176]	; (800421c <TIM_Base_SetConfig+0x118>)
 800416a:	4293      	cmp	r3, r2
 800416c:	d023      	beq.n	80041b6 <TIM_Base_SetConfig+0xb2>
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	4a2b      	ldr	r2, [pc, #172]	; (8004220 <TIM_Base_SetConfig+0x11c>)
 8004172:	4293      	cmp	r3, r2
 8004174:	d01f      	beq.n	80041b6 <TIM_Base_SetConfig+0xb2>
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	4a2a      	ldr	r2, [pc, #168]	; (8004224 <TIM_Base_SetConfig+0x120>)
 800417a:	4293      	cmp	r3, r2
 800417c:	d01b      	beq.n	80041b6 <TIM_Base_SetConfig+0xb2>
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	4a29      	ldr	r2, [pc, #164]	; (8004228 <TIM_Base_SetConfig+0x124>)
 8004182:	4293      	cmp	r3, r2
 8004184:	d017      	beq.n	80041b6 <TIM_Base_SetConfig+0xb2>
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	4a28      	ldr	r2, [pc, #160]	; (800422c <TIM_Base_SetConfig+0x128>)
 800418a:	4293      	cmp	r3, r2
 800418c:	d013      	beq.n	80041b6 <TIM_Base_SetConfig+0xb2>
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	4a27      	ldr	r2, [pc, #156]	; (8004230 <TIM_Base_SetConfig+0x12c>)
 8004192:	4293      	cmp	r3, r2
 8004194:	d00f      	beq.n	80041b6 <TIM_Base_SetConfig+0xb2>
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	4a26      	ldr	r2, [pc, #152]	; (8004234 <TIM_Base_SetConfig+0x130>)
 800419a:	4293      	cmp	r3, r2
 800419c:	d00b      	beq.n	80041b6 <TIM_Base_SetConfig+0xb2>
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	4a25      	ldr	r2, [pc, #148]	; (8004238 <TIM_Base_SetConfig+0x134>)
 80041a2:	4293      	cmp	r3, r2
 80041a4:	d007      	beq.n	80041b6 <TIM_Base_SetConfig+0xb2>
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	4a24      	ldr	r2, [pc, #144]	; (800423c <TIM_Base_SetConfig+0x138>)
 80041aa:	4293      	cmp	r3, r2
 80041ac:	d003      	beq.n	80041b6 <TIM_Base_SetConfig+0xb2>
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	4a23      	ldr	r2, [pc, #140]	; (8004240 <TIM_Base_SetConfig+0x13c>)
 80041b2:	4293      	cmp	r3, r2
 80041b4:	d108      	bne.n	80041c8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80041bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80041be:	683b      	ldr	r3, [r7, #0]
 80041c0:	68db      	ldr	r3, [r3, #12]
 80041c2:	68fa      	ldr	r2, [r7, #12]
 80041c4:	4313      	orrs	r3, r2
 80041c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80041ce:	683b      	ldr	r3, [r7, #0]
 80041d0:	695b      	ldr	r3, [r3, #20]
 80041d2:	4313      	orrs	r3, r2
 80041d4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	68fa      	ldr	r2, [r7, #12]
 80041da:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	689a      	ldr	r2, [r3, #8]
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	681a      	ldr	r2, [r3, #0]
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	4a0a      	ldr	r2, [pc, #40]	; (8004218 <TIM_Base_SetConfig+0x114>)
 80041f0:	4293      	cmp	r3, r2
 80041f2:	d003      	beq.n	80041fc <TIM_Base_SetConfig+0xf8>
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	4a0c      	ldr	r2, [pc, #48]	; (8004228 <TIM_Base_SetConfig+0x124>)
 80041f8:	4293      	cmp	r3, r2
 80041fa:	d103      	bne.n	8004204 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	691a      	ldr	r2, [r3, #16]
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2201      	movs	r2, #1
 8004208:	615a      	str	r2, [r3, #20]
}
 800420a:	bf00      	nop
 800420c:	3714      	adds	r7, #20
 800420e:	46bd      	mov	sp, r7
 8004210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004214:	4770      	bx	lr
 8004216:	bf00      	nop
 8004218:	40010000 	.word	0x40010000
 800421c:	40000400 	.word	0x40000400
 8004220:	40000800 	.word	0x40000800
 8004224:	40000c00 	.word	0x40000c00
 8004228:	40010400 	.word	0x40010400
 800422c:	40014000 	.word	0x40014000
 8004230:	40014400 	.word	0x40014400
 8004234:	40014800 	.word	0x40014800
 8004238:	40001800 	.word	0x40001800
 800423c:	40001c00 	.word	0x40001c00
 8004240:	40002000 	.word	0x40002000

08004244 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004244:	b480      	push	{r7}
 8004246:	b087      	sub	sp, #28
 8004248:	af00      	add	r7, sp, #0
 800424a:	60f8      	str	r0, [r7, #12]
 800424c:	60b9      	str	r1, [r7, #8]
 800424e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	6a1b      	ldr	r3, [r3, #32]
 8004254:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	6a1b      	ldr	r3, [r3, #32]
 800425a:	f023 0201 	bic.w	r2, r3, #1
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	699b      	ldr	r3, [r3, #24]
 8004266:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004268:	693b      	ldr	r3, [r7, #16]
 800426a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800426e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	011b      	lsls	r3, r3, #4
 8004274:	693a      	ldr	r2, [r7, #16]
 8004276:	4313      	orrs	r3, r2
 8004278:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800427a:	697b      	ldr	r3, [r7, #20]
 800427c:	f023 030a 	bic.w	r3, r3, #10
 8004280:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004282:	697a      	ldr	r2, [r7, #20]
 8004284:	68bb      	ldr	r3, [r7, #8]
 8004286:	4313      	orrs	r3, r2
 8004288:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	693a      	ldr	r2, [r7, #16]
 800428e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	697a      	ldr	r2, [r7, #20]
 8004294:	621a      	str	r2, [r3, #32]
}
 8004296:	bf00      	nop
 8004298:	371c      	adds	r7, #28
 800429a:	46bd      	mov	sp, r7
 800429c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a0:	4770      	bx	lr

080042a2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80042a2:	b480      	push	{r7}
 80042a4:	b087      	sub	sp, #28
 80042a6:	af00      	add	r7, sp, #0
 80042a8:	60f8      	str	r0, [r7, #12]
 80042aa:	60b9      	str	r1, [r7, #8]
 80042ac:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	6a1b      	ldr	r3, [r3, #32]
 80042b2:	f023 0210 	bic.w	r2, r3, #16
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	699b      	ldr	r3, [r3, #24]
 80042be:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	6a1b      	ldr	r3, [r3, #32]
 80042c4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80042c6:	697b      	ldr	r3, [r7, #20]
 80042c8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80042cc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	031b      	lsls	r3, r3, #12
 80042d2:	697a      	ldr	r2, [r7, #20]
 80042d4:	4313      	orrs	r3, r2
 80042d6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80042d8:	693b      	ldr	r3, [r7, #16]
 80042da:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80042de:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80042e0:	68bb      	ldr	r3, [r7, #8]
 80042e2:	011b      	lsls	r3, r3, #4
 80042e4:	693a      	ldr	r2, [r7, #16]
 80042e6:	4313      	orrs	r3, r2
 80042e8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	697a      	ldr	r2, [r7, #20]
 80042ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	693a      	ldr	r2, [r7, #16]
 80042f4:	621a      	str	r2, [r3, #32]
}
 80042f6:	bf00      	nop
 80042f8:	371c      	adds	r7, #28
 80042fa:	46bd      	mov	sp, r7
 80042fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004300:	4770      	bx	lr

08004302 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004302:	b480      	push	{r7}
 8004304:	b085      	sub	sp, #20
 8004306:	af00      	add	r7, sp, #0
 8004308:	6078      	str	r0, [r7, #4]
 800430a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	689b      	ldr	r3, [r3, #8]
 8004310:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004318:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800431a:	683a      	ldr	r2, [r7, #0]
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	4313      	orrs	r3, r2
 8004320:	f043 0307 	orr.w	r3, r3, #7
 8004324:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	68fa      	ldr	r2, [r7, #12]
 800432a:	609a      	str	r2, [r3, #8]
}
 800432c:	bf00      	nop
 800432e:	3714      	adds	r7, #20
 8004330:	46bd      	mov	sp, r7
 8004332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004336:	4770      	bx	lr

08004338 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004338:	b480      	push	{r7}
 800433a:	b087      	sub	sp, #28
 800433c:	af00      	add	r7, sp, #0
 800433e:	60f8      	str	r0, [r7, #12]
 8004340:	60b9      	str	r1, [r7, #8]
 8004342:	607a      	str	r2, [r7, #4]
 8004344:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	689b      	ldr	r3, [r3, #8]
 800434a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800434c:	697b      	ldr	r3, [r7, #20]
 800434e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004352:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	021a      	lsls	r2, r3, #8
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	431a      	orrs	r2, r3
 800435c:	68bb      	ldr	r3, [r7, #8]
 800435e:	4313      	orrs	r3, r2
 8004360:	697a      	ldr	r2, [r7, #20]
 8004362:	4313      	orrs	r3, r2
 8004364:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	697a      	ldr	r2, [r7, #20]
 800436a:	609a      	str	r2, [r3, #8]
}
 800436c:	bf00      	nop
 800436e:	371c      	adds	r7, #28
 8004370:	46bd      	mov	sp, r7
 8004372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004376:	4770      	bx	lr

08004378 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004378:	b480      	push	{r7}
 800437a:	b085      	sub	sp, #20
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
 8004380:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004388:	2b01      	cmp	r3, #1
 800438a:	d101      	bne.n	8004390 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800438c:	2302      	movs	r3, #2
 800438e:	e05a      	b.n	8004446 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2201      	movs	r2, #1
 8004394:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2202      	movs	r2, #2
 800439c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	685b      	ldr	r3, [r3, #4]
 80043a6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	689b      	ldr	r3, [r3, #8]
 80043ae:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043b6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	68fa      	ldr	r2, [r7, #12]
 80043be:	4313      	orrs	r3, r2
 80043c0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	68fa      	ldr	r2, [r7, #12]
 80043c8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	4a21      	ldr	r2, [pc, #132]	; (8004454 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80043d0:	4293      	cmp	r3, r2
 80043d2:	d022      	beq.n	800441a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043dc:	d01d      	beq.n	800441a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	4a1d      	ldr	r2, [pc, #116]	; (8004458 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80043e4:	4293      	cmp	r3, r2
 80043e6:	d018      	beq.n	800441a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	4a1b      	ldr	r2, [pc, #108]	; (800445c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80043ee:	4293      	cmp	r3, r2
 80043f0:	d013      	beq.n	800441a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	4a1a      	ldr	r2, [pc, #104]	; (8004460 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80043f8:	4293      	cmp	r3, r2
 80043fa:	d00e      	beq.n	800441a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	4a18      	ldr	r2, [pc, #96]	; (8004464 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004402:	4293      	cmp	r3, r2
 8004404:	d009      	beq.n	800441a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	4a17      	ldr	r2, [pc, #92]	; (8004468 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800440c:	4293      	cmp	r3, r2
 800440e:	d004      	beq.n	800441a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	4a15      	ldr	r2, [pc, #84]	; (800446c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004416:	4293      	cmp	r3, r2
 8004418:	d10c      	bne.n	8004434 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800441a:	68bb      	ldr	r3, [r7, #8]
 800441c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004420:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004422:	683b      	ldr	r3, [r7, #0]
 8004424:	685b      	ldr	r3, [r3, #4]
 8004426:	68ba      	ldr	r2, [r7, #8]
 8004428:	4313      	orrs	r3, r2
 800442a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	68ba      	ldr	r2, [r7, #8]
 8004432:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2201      	movs	r2, #1
 8004438:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2200      	movs	r2, #0
 8004440:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004444:	2300      	movs	r3, #0
}
 8004446:	4618      	mov	r0, r3
 8004448:	3714      	adds	r7, #20
 800444a:	46bd      	mov	sp, r7
 800444c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004450:	4770      	bx	lr
 8004452:	bf00      	nop
 8004454:	40010000 	.word	0x40010000
 8004458:	40000400 	.word	0x40000400
 800445c:	40000800 	.word	0x40000800
 8004460:	40000c00 	.word	0x40000c00
 8004464:	40010400 	.word	0x40010400
 8004468:	40014000 	.word	0x40014000
 800446c:	40001800 	.word	0x40001800

08004470 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004470:	b480      	push	{r7}
 8004472:	b083      	sub	sp, #12
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004478:	bf00      	nop
 800447a:	370c      	adds	r7, #12
 800447c:	46bd      	mov	sp, r7
 800447e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004482:	4770      	bx	lr

08004484 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004484:	b480      	push	{r7}
 8004486:	b083      	sub	sp, #12
 8004488:	af00      	add	r7, sp, #0
 800448a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800448c:	bf00      	nop
 800448e:	370c      	adds	r7, #12
 8004490:	46bd      	mov	sp, r7
 8004492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004496:	4770      	bx	lr

08004498 <__errno>:
 8004498:	4b01      	ldr	r3, [pc, #4]	; (80044a0 <__errno+0x8>)
 800449a:	6818      	ldr	r0, [r3, #0]
 800449c:	4770      	bx	lr
 800449e:	bf00      	nop
 80044a0:	20000010 	.word	0x20000010

080044a4 <__libc_init_array>:
 80044a4:	b570      	push	{r4, r5, r6, lr}
 80044a6:	4e0d      	ldr	r6, [pc, #52]	; (80044dc <__libc_init_array+0x38>)
 80044a8:	4c0d      	ldr	r4, [pc, #52]	; (80044e0 <__libc_init_array+0x3c>)
 80044aa:	1ba4      	subs	r4, r4, r6
 80044ac:	10a4      	asrs	r4, r4, #2
 80044ae:	2500      	movs	r5, #0
 80044b0:	42a5      	cmp	r5, r4
 80044b2:	d109      	bne.n	80044c8 <__libc_init_array+0x24>
 80044b4:	4e0b      	ldr	r6, [pc, #44]	; (80044e4 <__libc_init_array+0x40>)
 80044b6:	4c0c      	ldr	r4, [pc, #48]	; (80044e8 <__libc_init_array+0x44>)
 80044b8:	f000 fc26 	bl	8004d08 <_init>
 80044bc:	1ba4      	subs	r4, r4, r6
 80044be:	10a4      	asrs	r4, r4, #2
 80044c0:	2500      	movs	r5, #0
 80044c2:	42a5      	cmp	r5, r4
 80044c4:	d105      	bne.n	80044d2 <__libc_init_array+0x2e>
 80044c6:	bd70      	pop	{r4, r5, r6, pc}
 80044c8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80044cc:	4798      	blx	r3
 80044ce:	3501      	adds	r5, #1
 80044d0:	e7ee      	b.n	80044b0 <__libc_init_array+0xc>
 80044d2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80044d6:	4798      	blx	r3
 80044d8:	3501      	adds	r5, #1
 80044da:	e7f2      	b.n	80044c2 <__libc_init_array+0x1e>
 80044dc:	08004e10 	.word	0x08004e10
 80044e0:	08004e10 	.word	0x08004e10
 80044e4:	08004e10 	.word	0x08004e10
 80044e8:	08004e14 	.word	0x08004e14

080044ec <memset>:
 80044ec:	4402      	add	r2, r0
 80044ee:	4603      	mov	r3, r0
 80044f0:	4293      	cmp	r3, r2
 80044f2:	d100      	bne.n	80044f6 <memset+0xa>
 80044f4:	4770      	bx	lr
 80044f6:	f803 1b01 	strb.w	r1, [r3], #1
 80044fa:	e7f9      	b.n	80044f0 <memset+0x4>

080044fc <siprintf>:
 80044fc:	b40e      	push	{r1, r2, r3}
 80044fe:	b500      	push	{lr}
 8004500:	b09c      	sub	sp, #112	; 0x70
 8004502:	ab1d      	add	r3, sp, #116	; 0x74
 8004504:	9002      	str	r0, [sp, #8]
 8004506:	9006      	str	r0, [sp, #24]
 8004508:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800450c:	4809      	ldr	r0, [pc, #36]	; (8004534 <siprintf+0x38>)
 800450e:	9107      	str	r1, [sp, #28]
 8004510:	9104      	str	r1, [sp, #16]
 8004512:	4909      	ldr	r1, [pc, #36]	; (8004538 <siprintf+0x3c>)
 8004514:	f853 2b04 	ldr.w	r2, [r3], #4
 8004518:	9105      	str	r1, [sp, #20]
 800451a:	6800      	ldr	r0, [r0, #0]
 800451c:	9301      	str	r3, [sp, #4]
 800451e:	a902      	add	r1, sp, #8
 8004520:	f000 f866 	bl	80045f0 <_svfiprintf_r>
 8004524:	9b02      	ldr	r3, [sp, #8]
 8004526:	2200      	movs	r2, #0
 8004528:	701a      	strb	r2, [r3, #0]
 800452a:	b01c      	add	sp, #112	; 0x70
 800452c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004530:	b003      	add	sp, #12
 8004532:	4770      	bx	lr
 8004534:	20000010 	.word	0x20000010
 8004538:	ffff0208 	.word	0xffff0208

0800453c <__ssputs_r>:
 800453c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004540:	688e      	ldr	r6, [r1, #8]
 8004542:	429e      	cmp	r6, r3
 8004544:	4682      	mov	sl, r0
 8004546:	460c      	mov	r4, r1
 8004548:	4690      	mov	r8, r2
 800454a:	4699      	mov	r9, r3
 800454c:	d837      	bhi.n	80045be <__ssputs_r+0x82>
 800454e:	898a      	ldrh	r2, [r1, #12]
 8004550:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004554:	d031      	beq.n	80045ba <__ssputs_r+0x7e>
 8004556:	6825      	ldr	r5, [r4, #0]
 8004558:	6909      	ldr	r1, [r1, #16]
 800455a:	1a6f      	subs	r7, r5, r1
 800455c:	6965      	ldr	r5, [r4, #20]
 800455e:	2302      	movs	r3, #2
 8004560:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004564:	fb95 f5f3 	sdiv	r5, r5, r3
 8004568:	f109 0301 	add.w	r3, r9, #1
 800456c:	443b      	add	r3, r7
 800456e:	429d      	cmp	r5, r3
 8004570:	bf38      	it	cc
 8004572:	461d      	movcc	r5, r3
 8004574:	0553      	lsls	r3, r2, #21
 8004576:	d530      	bpl.n	80045da <__ssputs_r+0x9e>
 8004578:	4629      	mov	r1, r5
 800457a:	f000 fb2b 	bl	8004bd4 <_malloc_r>
 800457e:	4606      	mov	r6, r0
 8004580:	b950      	cbnz	r0, 8004598 <__ssputs_r+0x5c>
 8004582:	230c      	movs	r3, #12
 8004584:	f8ca 3000 	str.w	r3, [sl]
 8004588:	89a3      	ldrh	r3, [r4, #12]
 800458a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800458e:	81a3      	strh	r3, [r4, #12]
 8004590:	f04f 30ff 	mov.w	r0, #4294967295
 8004594:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004598:	463a      	mov	r2, r7
 800459a:	6921      	ldr	r1, [r4, #16]
 800459c:	f000 faa8 	bl	8004af0 <memcpy>
 80045a0:	89a3      	ldrh	r3, [r4, #12]
 80045a2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80045a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80045aa:	81a3      	strh	r3, [r4, #12]
 80045ac:	6126      	str	r6, [r4, #16]
 80045ae:	6165      	str	r5, [r4, #20]
 80045b0:	443e      	add	r6, r7
 80045b2:	1bed      	subs	r5, r5, r7
 80045b4:	6026      	str	r6, [r4, #0]
 80045b6:	60a5      	str	r5, [r4, #8]
 80045b8:	464e      	mov	r6, r9
 80045ba:	454e      	cmp	r6, r9
 80045bc:	d900      	bls.n	80045c0 <__ssputs_r+0x84>
 80045be:	464e      	mov	r6, r9
 80045c0:	4632      	mov	r2, r6
 80045c2:	4641      	mov	r1, r8
 80045c4:	6820      	ldr	r0, [r4, #0]
 80045c6:	f000 fa9e 	bl	8004b06 <memmove>
 80045ca:	68a3      	ldr	r3, [r4, #8]
 80045cc:	1b9b      	subs	r3, r3, r6
 80045ce:	60a3      	str	r3, [r4, #8]
 80045d0:	6823      	ldr	r3, [r4, #0]
 80045d2:	441e      	add	r6, r3
 80045d4:	6026      	str	r6, [r4, #0]
 80045d6:	2000      	movs	r0, #0
 80045d8:	e7dc      	b.n	8004594 <__ssputs_r+0x58>
 80045da:	462a      	mov	r2, r5
 80045dc:	f000 fb54 	bl	8004c88 <_realloc_r>
 80045e0:	4606      	mov	r6, r0
 80045e2:	2800      	cmp	r0, #0
 80045e4:	d1e2      	bne.n	80045ac <__ssputs_r+0x70>
 80045e6:	6921      	ldr	r1, [r4, #16]
 80045e8:	4650      	mov	r0, sl
 80045ea:	f000 faa5 	bl	8004b38 <_free_r>
 80045ee:	e7c8      	b.n	8004582 <__ssputs_r+0x46>

080045f0 <_svfiprintf_r>:
 80045f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80045f4:	461d      	mov	r5, r3
 80045f6:	898b      	ldrh	r3, [r1, #12]
 80045f8:	061f      	lsls	r7, r3, #24
 80045fa:	b09d      	sub	sp, #116	; 0x74
 80045fc:	4680      	mov	r8, r0
 80045fe:	460c      	mov	r4, r1
 8004600:	4616      	mov	r6, r2
 8004602:	d50f      	bpl.n	8004624 <_svfiprintf_r+0x34>
 8004604:	690b      	ldr	r3, [r1, #16]
 8004606:	b96b      	cbnz	r3, 8004624 <_svfiprintf_r+0x34>
 8004608:	2140      	movs	r1, #64	; 0x40
 800460a:	f000 fae3 	bl	8004bd4 <_malloc_r>
 800460e:	6020      	str	r0, [r4, #0]
 8004610:	6120      	str	r0, [r4, #16]
 8004612:	b928      	cbnz	r0, 8004620 <_svfiprintf_r+0x30>
 8004614:	230c      	movs	r3, #12
 8004616:	f8c8 3000 	str.w	r3, [r8]
 800461a:	f04f 30ff 	mov.w	r0, #4294967295
 800461e:	e0c8      	b.n	80047b2 <_svfiprintf_r+0x1c2>
 8004620:	2340      	movs	r3, #64	; 0x40
 8004622:	6163      	str	r3, [r4, #20]
 8004624:	2300      	movs	r3, #0
 8004626:	9309      	str	r3, [sp, #36]	; 0x24
 8004628:	2320      	movs	r3, #32
 800462a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800462e:	2330      	movs	r3, #48	; 0x30
 8004630:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004634:	9503      	str	r5, [sp, #12]
 8004636:	f04f 0b01 	mov.w	fp, #1
 800463a:	4637      	mov	r7, r6
 800463c:	463d      	mov	r5, r7
 800463e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8004642:	b10b      	cbz	r3, 8004648 <_svfiprintf_r+0x58>
 8004644:	2b25      	cmp	r3, #37	; 0x25
 8004646:	d13e      	bne.n	80046c6 <_svfiprintf_r+0xd6>
 8004648:	ebb7 0a06 	subs.w	sl, r7, r6
 800464c:	d00b      	beq.n	8004666 <_svfiprintf_r+0x76>
 800464e:	4653      	mov	r3, sl
 8004650:	4632      	mov	r2, r6
 8004652:	4621      	mov	r1, r4
 8004654:	4640      	mov	r0, r8
 8004656:	f7ff ff71 	bl	800453c <__ssputs_r>
 800465a:	3001      	adds	r0, #1
 800465c:	f000 80a4 	beq.w	80047a8 <_svfiprintf_r+0x1b8>
 8004660:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004662:	4453      	add	r3, sl
 8004664:	9309      	str	r3, [sp, #36]	; 0x24
 8004666:	783b      	ldrb	r3, [r7, #0]
 8004668:	2b00      	cmp	r3, #0
 800466a:	f000 809d 	beq.w	80047a8 <_svfiprintf_r+0x1b8>
 800466e:	2300      	movs	r3, #0
 8004670:	f04f 32ff 	mov.w	r2, #4294967295
 8004674:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004678:	9304      	str	r3, [sp, #16]
 800467a:	9307      	str	r3, [sp, #28]
 800467c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004680:	931a      	str	r3, [sp, #104]	; 0x68
 8004682:	462f      	mov	r7, r5
 8004684:	2205      	movs	r2, #5
 8004686:	f817 1b01 	ldrb.w	r1, [r7], #1
 800468a:	4850      	ldr	r0, [pc, #320]	; (80047cc <_svfiprintf_r+0x1dc>)
 800468c:	f7fb fda0 	bl	80001d0 <memchr>
 8004690:	9b04      	ldr	r3, [sp, #16]
 8004692:	b9d0      	cbnz	r0, 80046ca <_svfiprintf_r+0xda>
 8004694:	06d9      	lsls	r1, r3, #27
 8004696:	bf44      	itt	mi
 8004698:	2220      	movmi	r2, #32
 800469a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800469e:	071a      	lsls	r2, r3, #28
 80046a0:	bf44      	itt	mi
 80046a2:	222b      	movmi	r2, #43	; 0x2b
 80046a4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80046a8:	782a      	ldrb	r2, [r5, #0]
 80046aa:	2a2a      	cmp	r2, #42	; 0x2a
 80046ac:	d015      	beq.n	80046da <_svfiprintf_r+0xea>
 80046ae:	9a07      	ldr	r2, [sp, #28]
 80046b0:	462f      	mov	r7, r5
 80046b2:	2000      	movs	r0, #0
 80046b4:	250a      	movs	r5, #10
 80046b6:	4639      	mov	r1, r7
 80046b8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80046bc:	3b30      	subs	r3, #48	; 0x30
 80046be:	2b09      	cmp	r3, #9
 80046c0:	d94d      	bls.n	800475e <_svfiprintf_r+0x16e>
 80046c2:	b1b8      	cbz	r0, 80046f4 <_svfiprintf_r+0x104>
 80046c4:	e00f      	b.n	80046e6 <_svfiprintf_r+0xf6>
 80046c6:	462f      	mov	r7, r5
 80046c8:	e7b8      	b.n	800463c <_svfiprintf_r+0x4c>
 80046ca:	4a40      	ldr	r2, [pc, #256]	; (80047cc <_svfiprintf_r+0x1dc>)
 80046cc:	1a80      	subs	r0, r0, r2
 80046ce:	fa0b f000 	lsl.w	r0, fp, r0
 80046d2:	4318      	orrs	r0, r3
 80046d4:	9004      	str	r0, [sp, #16]
 80046d6:	463d      	mov	r5, r7
 80046d8:	e7d3      	b.n	8004682 <_svfiprintf_r+0x92>
 80046da:	9a03      	ldr	r2, [sp, #12]
 80046dc:	1d11      	adds	r1, r2, #4
 80046de:	6812      	ldr	r2, [r2, #0]
 80046e0:	9103      	str	r1, [sp, #12]
 80046e2:	2a00      	cmp	r2, #0
 80046e4:	db01      	blt.n	80046ea <_svfiprintf_r+0xfa>
 80046e6:	9207      	str	r2, [sp, #28]
 80046e8:	e004      	b.n	80046f4 <_svfiprintf_r+0x104>
 80046ea:	4252      	negs	r2, r2
 80046ec:	f043 0302 	orr.w	r3, r3, #2
 80046f0:	9207      	str	r2, [sp, #28]
 80046f2:	9304      	str	r3, [sp, #16]
 80046f4:	783b      	ldrb	r3, [r7, #0]
 80046f6:	2b2e      	cmp	r3, #46	; 0x2e
 80046f8:	d10c      	bne.n	8004714 <_svfiprintf_r+0x124>
 80046fa:	787b      	ldrb	r3, [r7, #1]
 80046fc:	2b2a      	cmp	r3, #42	; 0x2a
 80046fe:	d133      	bne.n	8004768 <_svfiprintf_r+0x178>
 8004700:	9b03      	ldr	r3, [sp, #12]
 8004702:	1d1a      	adds	r2, r3, #4
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	9203      	str	r2, [sp, #12]
 8004708:	2b00      	cmp	r3, #0
 800470a:	bfb8      	it	lt
 800470c:	f04f 33ff 	movlt.w	r3, #4294967295
 8004710:	3702      	adds	r7, #2
 8004712:	9305      	str	r3, [sp, #20]
 8004714:	4d2e      	ldr	r5, [pc, #184]	; (80047d0 <_svfiprintf_r+0x1e0>)
 8004716:	7839      	ldrb	r1, [r7, #0]
 8004718:	2203      	movs	r2, #3
 800471a:	4628      	mov	r0, r5
 800471c:	f7fb fd58 	bl	80001d0 <memchr>
 8004720:	b138      	cbz	r0, 8004732 <_svfiprintf_r+0x142>
 8004722:	2340      	movs	r3, #64	; 0x40
 8004724:	1b40      	subs	r0, r0, r5
 8004726:	fa03 f000 	lsl.w	r0, r3, r0
 800472a:	9b04      	ldr	r3, [sp, #16]
 800472c:	4303      	orrs	r3, r0
 800472e:	3701      	adds	r7, #1
 8004730:	9304      	str	r3, [sp, #16]
 8004732:	7839      	ldrb	r1, [r7, #0]
 8004734:	4827      	ldr	r0, [pc, #156]	; (80047d4 <_svfiprintf_r+0x1e4>)
 8004736:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800473a:	2206      	movs	r2, #6
 800473c:	1c7e      	adds	r6, r7, #1
 800473e:	f7fb fd47 	bl	80001d0 <memchr>
 8004742:	2800      	cmp	r0, #0
 8004744:	d038      	beq.n	80047b8 <_svfiprintf_r+0x1c8>
 8004746:	4b24      	ldr	r3, [pc, #144]	; (80047d8 <_svfiprintf_r+0x1e8>)
 8004748:	bb13      	cbnz	r3, 8004790 <_svfiprintf_r+0x1a0>
 800474a:	9b03      	ldr	r3, [sp, #12]
 800474c:	3307      	adds	r3, #7
 800474e:	f023 0307 	bic.w	r3, r3, #7
 8004752:	3308      	adds	r3, #8
 8004754:	9303      	str	r3, [sp, #12]
 8004756:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004758:	444b      	add	r3, r9
 800475a:	9309      	str	r3, [sp, #36]	; 0x24
 800475c:	e76d      	b.n	800463a <_svfiprintf_r+0x4a>
 800475e:	fb05 3202 	mla	r2, r5, r2, r3
 8004762:	2001      	movs	r0, #1
 8004764:	460f      	mov	r7, r1
 8004766:	e7a6      	b.n	80046b6 <_svfiprintf_r+0xc6>
 8004768:	2300      	movs	r3, #0
 800476a:	3701      	adds	r7, #1
 800476c:	9305      	str	r3, [sp, #20]
 800476e:	4619      	mov	r1, r3
 8004770:	250a      	movs	r5, #10
 8004772:	4638      	mov	r0, r7
 8004774:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004778:	3a30      	subs	r2, #48	; 0x30
 800477a:	2a09      	cmp	r2, #9
 800477c:	d903      	bls.n	8004786 <_svfiprintf_r+0x196>
 800477e:	2b00      	cmp	r3, #0
 8004780:	d0c8      	beq.n	8004714 <_svfiprintf_r+0x124>
 8004782:	9105      	str	r1, [sp, #20]
 8004784:	e7c6      	b.n	8004714 <_svfiprintf_r+0x124>
 8004786:	fb05 2101 	mla	r1, r5, r1, r2
 800478a:	2301      	movs	r3, #1
 800478c:	4607      	mov	r7, r0
 800478e:	e7f0      	b.n	8004772 <_svfiprintf_r+0x182>
 8004790:	ab03      	add	r3, sp, #12
 8004792:	9300      	str	r3, [sp, #0]
 8004794:	4622      	mov	r2, r4
 8004796:	4b11      	ldr	r3, [pc, #68]	; (80047dc <_svfiprintf_r+0x1ec>)
 8004798:	a904      	add	r1, sp, #16
 800479a:	4640      	mov	r0, r8
 800479c:	f3af 8000 	nop.w
 80047a0:	f1b0 3fff 	cmp.w	r0, #4294967295
 80047a4:	4681      	mov	r9, r0
 80047a6:	d1d6      	bne.n	8004756 <_svfiprintf_r+0x166>
 80047a8:	89a3      	ldrh	r3, [r4, #12]
 80047aa:	065b      	lsls	r3, r3, #25
 80047ac:	f53f af35 	bmi.w	800461a <_svfiprintf_r+0x2a>
 80047b0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80047b2:	b01d      	add	sp, #116	; 0x74
 80047b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80047b8:	ab03      	add	r3, sp, #12
 80047ba:	9300      	str	r3, [sp, #0]
 80047bc:	4622      	mov	r2, r4
 80047be:	4b07      	ldr	r3, [pc, #28]	; (80047dc <_svfiprintf_r+0x1ec>)
 80047c0:	a904      	add	r1, sp, #16
 80047c2:	4640      	mov	r0, r8
 80047c4:	f000 f882 	bl	80048cc <_printf_i>
 80047c8:	e7ea      	b.n	80047a0 <_svfiprintf_r+0x1b0>
 80047ca:	bf00      	nop
 80047cc:	08004dd4 	.word	0x08004dd4
 80047d0:	08004dda 	.word	0x08004dda
 80047d4:	08004dde 	.word	0x08004dde
 80047d8:	00000000 	.word	0x00000000
 80047dc:	0800453d 	.word	0x0800453d

080047e0 <_printf_common>:
 80047e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80047e4:	4691      	mov	r9, r2
 80047e6:	461f      	mov	r7, r3
 80047e8:	688a      	ldr	r2, [r1, #8]
 80047ea:	690b      	ldr	r3, [r1, #16]
 80047ec:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80047f0:	4293      	cmp	r3, r2
 80047f2:	bfb8      	it	lt
 80047f4:	4613      	movlt	r3, r2
 80047f6:	f8c9 3000 	str.w	r3, [r9]
 80047fa:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80047fe:	4606      	mov	r6, r0
 8004800:	460c      	mov	r4, r1
 8004802:	b112      	cbz	r2, 800480a <_printf_common+0x2a>
 8004804:	3301      	adds	r3, #1
 8004806:	f8c9 3000 	str.w	r3, [r9]
 800480a:	6823      	ldr	r3, [r4, #0]
 800480c:	0699      	lsls	r1, r3, #26
 800480e:	bf42      	ittt	mi
 8004810:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004814:	3302      	addmi	r3, #2
 8004816:	f8c9 3000 	strmi.w	r3, [r9]
 800481a:	6825      	ldr	r5, [r4, #0]
 800481c:	f015 0506 	ands.w	r5, r5, #6
 8004820:	d107      	bne.n	8004832 <_printf_common+0x52>
 8004822:	f104 0a19 	add.w	sl, r4, #25
 8004826:	68e3      	ldr	r3, [r4, #12]
 8004828:	f8d9 2000 	ldr.w	r2, [r9]
 800482c:	1a9b      	subs	r3, r3, r2
 800482e:	42ab      	cmp	r3, r5
 8004830:	dc28      	bgt.n	8004884 <_printf_common+0xa4>
 8004832:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8004836:	6822      	ldr	r2, [r4, #0]
 8004838:	3300      	adds	r3, #0
 800483a:	bf18      	it	ne
 800483c:	2301      	movne	r3, #1
 800483e:	0692      	lsls	r2, r2, #26
 8004840:	d42d      	bmi.n	800489e <_printf_common+0xbe>
 8004842:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004846:	4639      	mov	r1, r7
 8004848:	4630      	mov	r0, r6
 800484a:	47c0      	blx	r8
 800484c:	3001      	adds	r0, #1
 800484e:	d020      	beq.n	8004892 <_printf_common+0xb2>
 8004850:	6823      	ldr	r3, [r4, #0]
 8004852:	68e5      	ldr	r5, [r4, #12]
 8004854:	f8d9 2000 	ldr.w	r2, [r9]
 8004858:	f003 0306 	and.w	r3, r3, #6
 800485c:	2b04      	cmp	r3, #4
 800485e:	bf08      	it	eq
 8004860:	1aad      	subeq	r5, r5, r2
 8004862:	68a3      	ldr	r3, [r4, #8]
 8004864:	6922      	ldr	r2, [r4, #16]
 8004866:	bf0c      	ite	eq
 8004868:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800486c:	2500      	movne	r5, #0
 800486e:	4293      	cmp	r3, r2
 8004870:	bfc4      	itt	gt
 8004872:	1a9b      	subgt	r3, r3, r2
 8004874:	18ed      	addgt	r5, r5, r3
 8004876:	f04f 0900 	mov.w	r9, #0
 800487a:	341a      	adds	r4, #26
 800487c:	454d      	cmp	r5, r9
 800487e:	d11a      	bne.n	80048b6 <_printf_common+0xd6>
 8004880:	2000      	movs	r0, #0
 8004882:	e008      	b.n	8004896 <_printf_common+0xb6>
 8004884:	2301      	movs	r3, #1
 8004886:	4652      	mov	r2, sl
 8004888:	4639      	mov	r1, r7
 800488a:	4630      	mov	r0, r6
 800488c:	47c0      	blx	r8
 800488e:	3001      	adds	r0, #1
 8004890:	d103      	bne.n	800489a <_printf_common+0xba>
 8004892:	f04f 30ff 	mov.w	r0, #4294967295
 8004896:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800489a:	3501      	adds	r5, #1
 800489c:	e7c3      	b.n	8004826 <_printf_common+0x46>
 800489e:	18e1      	adds	r1, r4, r3
 80048a0:	1c5a      	adds	r2, r3, #1
 80048a2:	2030      	movs	r0, #48	; 0x30
 80048a4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80048a8:	4422      	add	r2, r4
 80048aa:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80048ae:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80048b2:	3302      	adds	r3, #2
 80048b4:	e7c5      	b.n	8004842 <_printf_common+0x62>
 80048b6:	2301      	movs	r3, #1
 80048b8:	4622      	mov	r2, r4
 80048ba:	4639      	mov	r1, r7
 80048bc:	4630      	mov	r0, r6
 80048be:	47c0      	blx	r8
 80048c0:	3001      	adds	r0, #1
 80048c2:	d0e6      	beq.n	8004892 <_printf_common+0xb2>
 80048c4:	f109 0901 	add.w	r9, r9, #1
 80048c8:	e7d8      	b.n	800487c <_printf_common+0x9c>
	...

080048cc <_printf_i>:
 80048cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80048d0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80048d4:	460c      	mov	r4, r1
 80048d6:	7e09      	ldrb	r1, [r1, #24]
 80048d8:	b085      	sub	sp, #20
 80048da:	296e      	cmp	r1, #110	; 0x6e
 80048dc:	4617      	mov	r7, r2
 80048de:	4606      	mov	r6, r0
 80048e0:	4698      	mov	r8, r3
 80048e2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80048e4:	f000 80b3 	beq.w	8004a4e <_printf_i+0x182>
 80048e8:	d822      	bhi.n	8004930 <_printf_i+0x64>
 80048ea:	2963      	cmp	r1, #99	; 0x63
 80048ec:	d036      	beq.n	800495c <_printf_i+0x90>
 80048ee:	d80a      	bhi.n	8004906 <_printf_i+0x3a>
 80048f0:	2900      	cmp	r1, #0
 80048f2:	f000 80b9 	beq.w	8004a68 <_printf_i+0x19c>
 80048f6:	2958      	cmp	r1, #88	; 0x58
 80048f8:	f000 8083 	beq.w	8004a02 <_printf_i+0x136>
 80048fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004900:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8004904:	e032      	b.n	800496c <_printf_i+0xa0>
 8004906:	2964      	cmp	r1, #100	; 0x64
 8004908:	d001      	beq.n	800490e <_printf_i+0x42>
 800490a:	2969      	cmp	r1, #105	; 0x69
 800490c:	d1f6      	bne.n	80048fc <_printf_i+0x30>
 800490e:	6820      	ldr	r0, [r4, #0]
 8004910:	6813      	ldr	r3, [r2, #0]
 8004912:	0605      	lsls	r5, r0, #24
 8004914:	f103 0104 	add.w	r1, r3, #4
 8004918:	d52a      	bpl.n	8004970 <_printf_i+0xa4>
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	6011      	str	r1, [r2, #0]
 800491e:	2b00      	cmp	r3, #0
 8004920:	da03      	bge.n	800492a <_printf_i+0x5e>
 8004922:	222d      	movs	r2, #45	; 0x2d
 8004924:	425b      	negs	r3, r3
 8004926:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800492a:	486f      	ldr	r0, [pc, #444]	; (8004ae8 <_printf_i+0x21c>)
 800492c:	220a      	movs	r2, #10
 800492e:	e039      	b.n	80049a4 <_printf_i+0xd8>
 8004930:	2973      	cmp	r1, #115	; 0x73
 8004932:	f000 809d 	beq.w	8004a70 <_printf_i+0x1a4>
 8004936:	d808      	bhi.n	800494a <_printf_i+0x7e>
 8004938:	296f      	cmp	r1, #111	; 0x6f
 800493a:	d020      	beq.n	800497e <_printf_i+0xb2>
 800493c:	2970      	cmp	r1, #112	; 0x70
 800493e:	d1dd      	bne.n	80048fc <_printf_i+0x30>
 8004940:	6823      	ldr	r3, [r4, #0]
 8004942:	f043 0320 	orr.w	r3, r3, #32
 8004946:	6023      	str	r3, [r4, #0]
 8004948:	e003      	b.n	8004952 <_printf_i+0x86>
 800494a:	2975      	cmp	r1, #117	; 0x75
 800494c:	d017      	beq.n	800497e <_printf_i+0xb2>
 800494e:	2978      	cmp	r1, #120	; 0x78
 8004950:	d1d4      	bne.n	80048fc <_printf_i+0x30>
 8004952:	2378      	movs	r3, #120	; 0x78
 8004954:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004958:	4864      	ldr	r0, [pc, #400]	; (8004aec <_printf_i+0x220>)
 800495a:	e055      	b.n	8004a08 <_printf_i+0x13c>
 800495c:	6813      	ldr	r3, [r2, #0]
 800495e:	1d19      	adds	r1, r3, #4
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	6011      	str	r1, [r2, #0]
 8004964:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004968:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800496c:	2301      	movs	r3, #1
 800496e:	e08c      	b.n	8004a8a <_printf_i+0x1be>
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	6011      	str	r1, [r2, #0]
 8004974:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004978:	bf18      	it	ne
 800497a:	b21b      	sxthne	r3, r3
 800497c:	e7cf      	b.n	800491e <_printf_i+0x52>
 800497e:	6813      	ldr	r3, [r2, #0]
 8004980:	6825      	ldr	r5, [r4, #0]
 8004982:	1d18      	adds	r0, r3, #4
 8004984:	6010      	str	r0, [r2, #0]
 8004986:	0628      	lsls	r0, r5, #24
 8004988:	d501      	bpl.n	800498e <_printf_i+0xc2>
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	e002      	b.n	8004994 <_printf_i+0xc8>
 800498e:	0668      	lsls	r0, r5, #25
 8004990:	d5fb      	bpl.n	800498a <_printf_i+0xbe>
 8004992:	881b      	ldrh	r3, [r3, #0]
 8004994:	4854      	ldr	r0, [pc, #336]	; (8004ae8 <_printf_i+0x21c>)
 8004996:	296f      	cmp	r1, #111	; 0x6f
 8004998:	bf14      	ite	ne
 800499a:	220a      	movne	r2, #10
 800499c:	2208      	moveq	r2, #8
 800499e:	2100      	movs	r1, #0
 80049a0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80049a4:	6865      	ldr	r5, [r4, #4]
 80049a6:	60a5      	str	r5, [r4, #8]
 80049a8:	2d00      	cmp	r5, #0
 80049aa:	f2c0 8095 	blt.w	8004ad8 <_printf_i+0x20c>
 80049ae:	6821      	ldr	r1, [r4, #0]
 80049b0:	f021 0104 	bic.w	r1, r1, #4
 80049b4:	6021      	str	r1, [r4, #0]
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d13d      	bne.n	8004a36 <_printf_i+0x16a>
 80049ba:	2d00      	cmp	r5, #0
 80049bc:	f040 808e 	bne.w	8004adc <_printf_i+0x210>
 80049c0:	4665      	mov	r5, ip
 80049c2:	2a08      	cmp	r2, #8
 80049c4:	d10b      	bne.n	80049de <_printf_i+0x112>
 80049c6:	6823      	ldr	r3, [r4, #0]
 80049c8:	07db      	lsls	r3, r3, #31
 80049ca:	d508      	bpl.n	80049de <_printf_i+0x112>
 80049cc:	6923      	ldr	r3, [r4, #16]
 80049ce:	6862      	ldr	r2, [r4, #4]
 80049d0:	429a      	cmp	r2, r3
 80049d2:	bfde      	ittt	le
 80049d4:	2330      	movle	r3, #48	; 0x30
 80049d6:	f805 3c01 	strble.w	r3, [r5, #-1]
 80049da:	f105 35ff 	addle.w	r5, r5, #4294967295
 80049de:	ebac 0305 	sub.w	r3, ip, r5
 80049e2:	6123      	str	r3, [r4, #16]
 80049e4:	f8cd 8000 	str.w	r8, [sp]
 80049e8:	463b      	mov	r3, r7
 80049ea:	aa03      	add	r2, sp, #12
 80049ec:	4621      	mov	r1, r4
 80049ee:	4630      	mov	r0, r6
 80049f0:	f7ff fef6 	bl	80047e0 <_printf_common>
 80049f4:	3001      	adds	r0, #1
 80049f6:	d14d      	bne.n	8004a94 <_printf_i+0x1c8>
 80049f8:	f04f 30ff 	mov.w	r0, #4294967295
 80049fc:	b005      	add	sp, #20
 80049fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004a02:	4839      	ldr	r0, [pc, #228]	; (8004ae8 <_printf_i+0x21c>)
 8004a04:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8004a08:	6813      	ldr	r3, [r2, #0]
 8004a0a:	6821      	ldr	r1, [r4, #0]
 8004a0c:	1d1d      	adds	r5, r3, #4
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	6015      	str	r5, [r2, #0]
 8004a12:	060a      	lsls	r2, r1, #24
 8004a14:	d50b      	bpl.n	8004a2e <_printf_i+0x162>
 8004a16:	07ca      	lsls	r2, r1, #31
 8004a18:	bf44      	itt	mi
 8004a1a:	f041 0120 	orrmi.w	r1, r1, #32
 8004a1e:	6021      	strmi	r1, [r4, #0]
 8004a20:	b91b      	cbnz	r3, 8004a2a <_printf_i+0x15e>
 8004a22:	6822      	ldr	r2, [r4, #0]
 8004a24:	f022 0220 	bic.w	r2, r2, #32
 8004a28:	6022      	str	r2, [r4, #0]
 8004a2a:	2210      	movs	r2, #16
 8004a2c:	e7b7      	b.n	800499e <_printf_i+0xd2>
 8004a2e:	064d      	lsls	r5, r1, #25
 8004a30:	bf48      	it	mi
 8004a32:	b29b      	uxthmi	r3, r3
 8004a34:	e7ef      	b.n	8004a16 <_printf_i+0x14a>
 8004a36:	4665      	mov	r5, ip
 8004a38:	fbb3 f1f2 	udiv	r1, r3, r2
 8004a3c:	fb02 3311 	mls	r3, r2, r1, r3
 8004a40:	5cc3      	ldrb	r3, [r0, r3]
 8004a42:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8004a46:	460b      	mov	r3, r1
 8004a48:	2900      	cmp	r1, #0
 8004a4a:	d1f5      	bne.n	8004a38 <_printf_i+0x16c>
 8004a4c:	e7b9      	b.n	80049c2 <_printf_i+0xf6>
 8004a4e:	6813      	ldr	r3, [r2, #0]
 8004a50:	6825      	ldr	r5, [r4, #0]
 8004a52:	6961      	ldr	r1, [r4, #20]
 8004a54:	1d18      	adds	r0, r3, #4
 8004a56:	6010      	str	r0, [r2, #0]
 8004a58:	0628      	lsls	r0, r5, #24
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	d501      	bpl.n	8004a62 <_printf_i+0x196>
 8004a5e:	6019      	str	r1, [r3, #0]
 8004a60:	e002      	b.n	8004a68 <_printf_i+0x19c>
 8004a62:	066a      	lsls	r2, r5, #25
 8004a64:	d5fb      	bpl.n	8004a5e <_printf_i+0x192>
 8004a66:	8019      	strh	r1, [r3, #0]
 8004a68:	2300      	movs	r3, #0
 8004a6a:	6123      	str	r3, [r4, #16]
 8004a6c:	4665      	mov	r5, ip
 8004a6e:	e7b9      	b.n	80049e4 <_printf_i+0x118>
 8004a70:	6813      	ldr	r3, [r2, #0]
 8004a72:	1d19      	adds	r1, r3, #4
 8004a74:	6011      	str	r1, [r2, #0]
 8004a76:	681d      	ldr	r5, [r3, #0]
 8004a78:	6862      	ldr	r2, [r4, #4]
 8004a7a:	2100      	movs	r1, #0
 8004a7c:	4628      	mov	r0, r5
 8004a7e:	f7fb fba7 	bl	80001d0 <memchr>
 8004a82:	b108      	cbz	r0, 8004a88 <_printf_i+0x1bc>
 8004a84:	1b40      	subs	r0, r0, r5
 8004a86:	6060      	str	r0, [r4, #4]
 8004a88:	6863      	ldr	r3, [r4, #4]
 8004a8a:	6123      	str	r3, [r4, #16]
 8004a8c:	2300      	movs	r3, #0
 8004a8e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004a92:	e7a7      	b.n	80049e4 <_printf_i+0x118>
 8004a94:	6923      	ldr	r3, [r4, #16]
 8004a96:	462a      	mov	r2, r5
 8004a98:	4639      	mov	r1, r7
 8004a9a:	4630      	mov	r0, r6
 8004a9c:	47c0      	blx	r8
 8004a9e:	3001      	adds	r0, #1
 8004aa0:	d0aa      	beq.n	80049f8 <_printf_i+0x12c>
 8004aa2:	6823      	ldr	r3, [r4, #0]
 8004aa4:	079b      	lsls	r3, r3, #30
 8004aa6:	d413      	bmi.n	8004ad0 <_printf_i+0x204>
 8004aa8:	68e0      	ldr	r0, [r4, #12]
 8004aaa:	9b03      	ldr	r3, [sp, #12]
 8004aac:	4298      	cmp	r0, r3
 8004aae:	bfb8      	it	lt
 8004ab0:	4618      	movlt	r0, r3
 8004ab2:	e7a3      	b.n	80049fc <_printf_i+0x130>
 8004ab4:	2301      	movs	r3, #1
 8004ab6:	464a      	mov	r2, r9
 8004ab8:	4639      	mov	r1, r7
 8004aba:	4630      	mov	r0, r6
 8004abc:	47c0      	blx	r8
 8004abe:	3001      	adds	r0, #1
 8004ac0:	d09a      	beq.n	80049f8 <_printf_i+0x12c>
 8004ac2:	3501      	adds	r5, #1
 8004ac4:	68e3      	ldr	r3, [r4, #12]
 8004ac6:	9a03      	ldr	r2, [sp, #12]
 8004ac8:	1a9b      	subs	r3, r3, r2
 8004aca:	42ab      	cmp	r3, r5
 8004acc:	dcf2      	bgt.n	8004ab4 <_printf_i+0x1e8>
 8004ace:	e7eb      	b.n	8004aa8 <_printf_i+0x1dc>
 8004ad0:	2500      	movs	r5, #0
 8004ad2:	f104 0919 	add.w	r9, r4, #25
 8004ad6:	e7f5      	b.n	8004ac4 <_printf_i+0x1f8>
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d1ac      	bne.n	8004a36 <_printf_i+0x16a>
 8004adc:	7803      	ldrb	r3, [r0, #0]
 8004ade:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004ae2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004ae6:	e76c      	b.n	80049c2 <_printf_i+0xf6>
 8004ae8:	08004de5 	.word	0x08004de5
 8004aec:	08004df6 	.word	0x08004df6

08004af0 <memcpy>:
 8004af0:	b510      	push	{r4, lr}
 8004af2:	1e43      	subs	r3, r0, #1
 8004af4:	440a      	add	r2, r1
 8004af6:	4291      	cmp	r1, r2
 8004af8:	d100      	bne.n	8004afc <memcpy+0xc>
 8004afa:	bd10      	pop	{r4, pc}
 8004afc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004b00:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004b04:	e7f7      	b.n	8004af6 <memcpy+0x6>

08004b06 <memmove>:
 8004b06:	4288      	cmp	r0, r1
 8004b08:	b510      	push	{r4, lr}
 8004b0a:	eb01 0302 	add.w	r3, r1, r2
 8004b0e:	d807      	bhi.n	8004b20 <memmove+0x1a>
 8004b10:	1e42      	subs	r2, r0, #1
 8004b12:	4299      	cmp	r1, r3
 8004b14:	d00a      	beq.n	8004b2c <memmove+0x26>
 8004b16:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004b1a:	f802 4f01 	strb.w	r4, [r2, #1]!
 8004b1e:	e7f8      	b.n	8004b12 <memmove+0xc>
 8004b20:	4283      	cmp	r3, r0
 8004b22:	d9f5      	bls.n	8004b10 <memmove+0xa>
 8004b24:	1881      	adds	r1, r0, r2
 8004b26:	1ad2      	subs	r2, r2, r3
 8004b28:	42d3      	cmn	r3, r2
 8004b2a:	d100      	bne.n	8004b2e <memmove+0x28>
 8004b2c:	bd10      	pop	{r4, pc}
 8004b2e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004b32:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8004b36:	e7f7      	b.n	8004b28 <memmove+0x22>

08004b38 <_free_r>:
 8004b38:	b538      	push	{r3, r4, r5, lr}
 8004b3a:	4605      	mov	r5, r0
 8004b3c:	2900      	cmp	r1, #0
 8004b3e:	d045      	beq.n	8004bcc <_free_r+0x94>
 8004b40:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004b44:	1f0c      	subs	r4, r1, #4
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	bfb8      	it	lt
 8004b4a:	18e4      	addlt	r4, r4, r3
 8004b4c:	f000 f8d2 	bl	8004cf4 <__malloc_lock>
 8004b50:	4a1f      	ldr	r2, [pc, #124]	; (8004bd0 <_free_r+0x98>)
 8004b52:	6813      	ldr	r3, [r2, #0]
 8004b54:	4610      	mov	r0, r2
 8004b56:	b933      	cbnz	r3, 8004b66 <_free_r+0x2e>
 8004b58:	6063      	str	r3, [r4, #4]
 8004b5a:	6014      	str	r4, [r2, #0]
 8004b5c:	4628      	mov	r0, r5
 8004b5e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004b62:	f000 b8c8 	b.w	8004cf6 <__malloc_unlock>
 8004b66:	42a3      	cmp	r3, r4
 8004b68:	d90c      	bls.n	8004b84 <_free_r+0x4c>
 8004b6a:	6821      	ldr	r1, [r4, #0]
 8004b6c:	1862      	adds	r2, r4, r1
 8004b6e:	4293      	cmp	r3, r2
 8004b70:	bf04      	itt	eq
 8004b72:	681a      	ldreq	r2, [r3, #0]
 8004b74:	685b      	ldreq	r3, [r3, #4]
 8004b76:	6063      	str	r3, [r4, #4]
 8004b78:	bf04      	itt	eq
 8004b7a:	1852      	addeq	r2, r2, r1
 8004b7c:	6022      	streq	r2, [r4, #0]
 8004b7e:	6004      	str	r4, [r0, #0]
 8004b80:	e7ec      	b.n	8004b5c <_free_r+0x24>
 8004b82:	4613      	mov	r3, r2
 8004b84:	685a      	ldr	r2, [r3, #4]
 8004b86:	b10a      	cbz	r2, 8004b8c <_free_r+0x54>
 8004b88:	42a2      	cmp	r2, r4
 8004b8a:	d9fa      	bls.n	8004b82 <_free_r+0x4a>
 8004b8c:	6819      	ldr	r1, [r3, #0]
 8004b8e:	1858      	adds	r0, r3, r1
 8004b90:	42a0      	cmp	r0, r4
 8004b92:	d10b      	bne.n	8004bac <_free_r+0x74>
 8004b94:	6820      	ldr	r0, [r4, #0]
 8004b96:	4401      	add	r1, r0
 8004b98:	1858      	adds	r0, r3, r1
 8004b9a:	4282      	cmp	r2, r0
 8004b9c:	6019      	str	r1, [r3, #0]
 8004b9e:	d1dd      	bne.n	8004b5c <_free_r+0x24>
 8004ba0:	6810      	ldr	r0, [r2, #0]
 8004ba2:	6852      	ldr	r2, [r2, #4]
 8004ba4:	605a      	str	r2, [r3, #4]
 8004ba6:	4401      	add	r1, r0
 8004ba8:	6019      	str	r1, [r3, #0]
 8004baa:	e7d7      	b.n	8004b5c <_free_r+0x24>
 8004bac:	d902      	bls.n	8004bb4 <_free_r+0x7c>
 8004bae:	230c      	movs	r3, #12
 8004bb0:	602b      	str	r3, [r5, #0]
 8004bb2:	e7d3      	b.n	8004b5c <_free_r+0x24>
 8004bb4:	6820      	ldr	r0, [r4, #0]
 8004bb6:	1821      	adds	r1, r4, r0
 8004bb8:	428a      	cmp	r2, r1
 8004bba:	bf04      	itt	eq
 8004bbc:	6811      	ldreq	r1, [r2, #0]
 8004bbe:	6852      	ldreq	r2, [r2, #4]
 8004bc0:	6062      	str	r2, [r4, #4]
 8004bc2:	bf04      	itt	eq
 8004bc4:	1809      	addeq	r1, r1, r0
 8004bc6:	6021      	streq	r1, [r4, #0]
 8004bc8:	605c      	str	r4, [r3, #4]
 8004bca:	e7c7      	b.n	8004b5c <_free_r+0x24>
 8004bcc:	bd38      	pop	{r3, r4, r5, pc}
 8004bce:	bf00      	nop
 8004bd0:	20000098 	.word	0x20000098

08004bd4 <_malloc_r>:
 8004bd4:	b570      	push	{r4, r5, r6, lr}
 8004bd6:	1ccd      	adds	r5, r1, #3
 8004bd8:	f025 0503 	bic.w	r5, r5, #3
 8004bdc:	3508      	adds	r5, #8
 8004bde:	2d0c      	cmp	r5, #12
 8004be0:	bf38      	it	cc
 8004be2:	250c      	movcc	r5, #12
 8004be4:	2d00      	cmp	r5, #0
 8004be6:	4606      	mov	r6, r0
 8004be8:	db01      	blt.n	8004bee <_malloc_r+0x1a>
 8004bea:	42a9      	cmp	r1, r5
 8004bec:	d903      	bls.n	8004bf6 <_malloc_r+0x22>
 8004bee:	230c      	movs	r3, #12
 8004bf0:	6033      	str	r3, [r6, #0]
 8004bf2:	2000      	movs	r0, #0
 8004bf4:	bd70      	pop	{r4, r5, r6, pc}
 8004bf6:	f000 f87d 	bl	8004cf4 <__malloc_lock>
 8004bfa:	4a21      	ldr	r2, [pc, #132]	; (8004c80 <_malloc_r+0xac>)
 8004bfc:	6814      	ldr	r4, [r2, #0]
 8004bfe:	4621      	mov	r1, r4
 8004c00:	b991      	cbnz	r1, 8004c28 <_malloc_r+0x54>
 8004c02:	4c20      	ldr	r4, [pc, #128]	; (8004c84 <_malloc_r+0xb0>)
 8004c04:	6823      	ldr	r3, [r4, #0]
 8004c06:	b91b      	cbnz	r3, 8004c10 <_malloc_r+0x3c>
 8004c08:	4630      	mov	r0, r6
 8004c0a:	f000 f863 	bl	8004cd4 <_sbrk_r>
 8004c0e:	6020      	str	r0, [r4, #0]
 8004c10:	4629      	mov	r1, r5
 8004c12:	4630      	mov	r0, r6
 8004c14:	f000 f85e 	bl	8004cd4 <_sbrk_r>
 8004c18:	1c43      	adds	r3, r0, #1
 8004c1a:	d124      	bne.n	8004c66 <_malloc_r+0x92>
 8004c1c:	230c      	movs	r3, #12
 8004c1e:	6033      	str	r3, [r6, #0]
 8004c20:	4630      	mov	r0, r6
 8004c22:	f000 f868 	bl	8004cf6 <__malloc_unlock>
 8004c26:	e7e4      	b.n	8004bf2 <_malloc_r+0x1e>
 8004c28:	680b      	ldr	r3, [r1, #0]
 8004c2a:	1b5b      	subs	r3, r3, r5
 8004c2c:	d418      	bmi.n	8004c60 <_malloc_r+0x8c>
 8004c2e:	2b0b      	cmp	r3, #11
 8004c30:	d90f      	bls.n	8004c52 <_malloc_r+0x7e>
 8004c32:	600b      	str	r3, [r1, #0]
 8004c34:	50cd      	str	r5, [r1, r3]
 8004c36:	18cc      	adds	r4, r1, r3
 8004c38:	4630      	mov	r0, r6
 8004c3a:	f000 f85c 	bl	8004cf6 <__malloc_unlock>
 8004c3e:	f104 000b 	add.w	r0, r4, #11
 8004c42:	1d23      	adds	r3, r4, #4
 8004c44:	f020 0007 	bic.w	r0, r0, #7
 8004c48:	1ac3      	subs	r3, r0, r3
 8004c4a:	d0d3      	beq.n	8004bf4 <_malloc_r+0x20>
 8004c4c:	425a      	negs	r2, r3
 8004c4e:	50e2      	str	r2, [r4, r3]
 8004c50:	e7d0      	b.n	8004bf4 <_malloc_r+0x20>
 8004c52:	428c      	cmp	r4, r1
 8004c54:	684b      	ldr	r3, [r1, #4]
 8004c56:	bf16      	itet	ne
 8004c58:	6063      	strne	r3, [r4, #4]
 8004c5a:	6013      	streq	r3, [r2, #0]
 8004c5c:	460c      	movne	r4, r1
 8004c5e:	e7eb      	b.n	8004c38 <_malloc_r+0x64>
 8004c60:	460c      	mov	r4, r1
 8004c62:	6849      	ldr	r1, [r1, #4]
 8004c64:	e7cc      	b.n	8004c00 <_malloc_r+0x2c>
 8004c66:	1cc4      	adds	r4, r0, #3
 8004c68:	f024 0403 	bic.w	r4, r4, #3
 8004c6c:	42a0      	cmp	r0, r4
 8004c6e:	d005      	beq.n	8004c7c <_malloc_r+0xa8>
 8004c70:	1a21      	subs	r1, r4, r0
 8004c72:	4630      	mov	r0, r6
 8004c74:	f000 f82e 	bl	8004cd4 <_sbrk_r>
 8004c78:	3001      	adds	r0, #1
 8004c7a:	d0cf      	beq.n	8004c1c <_malloc_r+0x48>
 8004c7c:	6025      	str	r5, [r4, #0]
 8004c7e:	e7db      	b.n	8004c38 <_malloc_r+0x64>
 8004c80:	20000098 	.word	0x20000098
 8004c84:	2000009c 	.word	0x2000009c

08004c88 <_realloc_r>:
 8004c88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c8a:	4607      	mov	r7, r0
 8004c8c:	4614      	mov	r4, r2
 8004c8e:	460e      	mov	r6, r1
 8004c90:	b921      	cbnz	r1, 8004c9c <_realloc_r+0x14>
 8004c92:	4611      	mov	r1, r2
 8004c94:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004c98:	f7ff bf9c 	b.w	8004bd4 <_malloc_r>
 8004c9c:	b922      	cbnz	r2, 8004ca8 <_realloc_r+0x20>
 8004c9e:	f7ff ff4b 	bl	8004b38 <_free_r>
 8004ca2:	4625      	mov	r5, r4
 8004ca4:	4628      	mov	r0, r5
 8004ca6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004ca8:	f000 f826 	bl	8004cf8 <_malloc_usable_size_r>
 8004cac:	42a0      	cmp	r0, r4
 8004cae:	d20f      	bcs.n	8004cd0 <_realloc_r+0x48>
 8004cb0:	4621      	mov	r1, r4
 8004cb2:	4638      	mov	r0, r7
 8004cb4:	f7ff ff8e 	bl	8004bd4 <_malloc_r>
 8004cb8:	4605      	mov	r5, r0
 8004cba:	2800      	cmp	r0, #0
 8004cbc:	d0f2      	beq.n	8004ca4 <_realloc_r+0x1c>
 8004cbe:	4631      	mov	r1, r6
 8004cc0:	4622      	mov	r2, r4
 8004cc2:	f7ff ff15 	bl	8004af0 <memcpy>
 8004cc6:	4631      	mov	r1, r6
 8004cc8:	4638      	mov	r0, r7
 8004cca:	f7ff ff35 	bl	8004b38 <_free_r>
 8004cce:	e7e9      	b.n	8004ca4 <_realloc_r+0x1c>
 8004cd0:	4635      	mov	r5, r6
 8004cd2:	e7e7      	b.n	8004ca4 <_realloc_r+0x1c>

08004cd4 <_sbrk_r>:
 8004cd4:	b538      	push	{r3, r4, r5, lr}
 8004cd6:	4c06      	ldr	r4, [pc, #24]	; (8004cf0 <_sbrk_r+0x1c>)
 8004cd8:	2300      	movs	r3, #0
 8004cda:	4605      	mov	r5, r0
 8004cdc:	4608      	mov	r0, r1
 8004cde:	6023      	str	r3, [r4, #0]
 8004ce0:	f7fc fcf0 	bl	80016c4 <_sbrk>
 8004ce4:	1c43      	adds	r3, r0, #1
 8004ce6:	d102      	bne.n	8004cee <_sbrk_r+0x1a>
 8004ce8:	6823      	ldr	r3, [r4, #0]
 8004cea:	b103      	cbz	r3, 8004cee <_sbrk_r+0x1a>
 8004cec:	602b      	str	r3, [r5, #0]
 8004cee:	bd38      	pop	{r3, r4, r5, pc}
 8004cf0:	200001ac 	.word	0x200001ac

08004cf4 <__malloc_lock>:
 8004cf4:	4770      	bx	lr

08004cf6 <__malloc_unlock>:
 8004cf6:	4770      	bx	lr

08004cf8 <_malloc_usable_size_r>:
 8004cf8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004cfc:	1f18      	subs	r0, r3, #4
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	bfbc      	itt	lt
 8004d02:	580b      	ldrlt	r3, [r1, r0]
 8004d04:	18c0      	addlt	r0, r0, r3
 8004d06:	4770      	bx	lr

08004d08 <_init>:
 8004d08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d0a:	bf00      	nop
 8004d0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d0e:	bc08      	pop	{r3}
 8004d10:	469e      	mov	lr, r3
 8004d12:	4770      	bx	lr

08004d14 <_fini>:
 8004d14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d16:	bf00      	nop
 8004d18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d1a:	bc08      	pop	{r3}
 8004d1c:	469e      	mov	lr, r3
 8004d1e:	4770      	bx	lr
